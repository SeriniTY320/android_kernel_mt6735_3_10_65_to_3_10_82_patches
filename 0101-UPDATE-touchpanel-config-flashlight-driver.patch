From 467e19ea25e1baef2bf7aa8ae913f0f3cd2499f0 Mon Sep 17 00:00:00 2001
From: SnowCatPDA <snowcat@vpro.ru>
Date: Tue, 24 May 2016 19:02:44 +0500
Subject: [PATCH 101/117] UPDATE touchpanel config, flashlight driver
 Touchscreen custom config moved to mach/project/touchscreen/.... Flashlight
 driver need set GPIO_CAMERA_FLASH_EXT1_PIN for GPIO flash Updated codegen.dws

---
 arch/arm64/boot/dts/X5PRO_6735m.dts                | 1268 ++++++++++++++++++++
 arch/arm64/configs/X5PRO_6735m_defconfig           |    2 +-
 .../touchscreen/mediatek/FT6206_X2605/Makefile     |    2 +-
 .../mediatek/FT6206_X2605/tpd_custom_fts.h         |  190 ---
 .../src/mt6735/constant_flashlight/Makefile        |    5 +-
 .../src/mt6735/constant_flashlight/leds_strobe.c   |   48 +-
 .../src/mt6735/constant_flashlight/sgm3785_drv.c   |  151 +++
 .../src/mt6735/constant_flashlight/sgm3785_drv.h   |   58 +
 .../mach/mt6735/X5PRO_6735m/dct/dct/codegen.dws    |  Bin 29635 -> 29675 bytes
 .../mach/mt6735/X5PRO_6735m/dct/dct/cust_eint.dtsi |   68 --
 .../mach/mt6735/X5PRO_6735m/dct/dct/cust_i2c.dtsi  |   82 --
 .../touchpanel/FT6206_X2605/tpd_custom_fts.h       |  196 +++
 .../touchpanel/FT6206_X2605/tpd_custom_fts.h       |  190 +++
 tools/dct/DCT.log                                  |    0
 14 files changed, 1898 insertions(+), 362 deletions(-)
 create mode 100644 arch/arm64/boot/dts/X5PRO_6735m.dts
 delete mode 100755 drivers/input/touchscreen/mediatek/FT6206_X2605/tpd_custom_fts.h
 mode change 100755 => 100644 drivers/misc/mediatek/flashlight/src/mt6735/constant_flashlight/Makefile
 create mode 100644 drivers/misc/mediatek/flashlight/src/mt6735/constant_flashlight/sgm3785_drv.c
 create mode 100644 drivers/misc/mediatek/flashlight/src/mt6735/constant_flashlight/sgm3785_drv.h
 delete mode 100644 drivers/misc/mediatek/mach/mt6735/X5PRO_6735m/dct/dct/cust_eint.dtsi
 delete mode 100644 drivers/misc/mediatek/mach/mt6735/X5PRO_6735m/dct/dct/cust_i2c.dtsi
 create mode 100755 drivers/misc/mediatek/mach/mt6735/X5PRO_6735m/touchpanel/FT6206_X2605/tpd_custom_fts.h
 create mode 100755 drivers/misc/mediatek/mach/mt6735/benefit_m7/touchpanel/FT6206_X2605/tpd_custom_fts.h
 create mode 100644 tools/dct/DCT.log

diff --git a/arch/arm64/boot/dts/X5PRO_6735m.dts b/arch/arm64/boot/dts/X5PRO_6735m.dts
new file mode 100644
index 0000000..18f2067
--- /dev/null
+++ b/arch/arm64/boot/dts/X5PRO_6735m.dts
@@ -0,0 +1,1268 @@
+/dts-v1/;
+
+/ {
+	model = "MT6735M";
+	compatible = "mediatek,MT6735M";
+	interrupt-parent = <0x1>;
+	#address-cells = <0x2>;
+	#size-cells = <0x2>;
+
+	chosen {
+		bootargs = "console=tty0 console=ttyMT0,921600n1 root=/dev/ram initrd=0x44000000,0x1000000 loglevel=8 androidboot.hardware=mt6735";
+	};
+
+	mtk-msdc {
+		compatible = "simple-bus";
+		#address-cells = <0x1>;
+		#size-cells = <0x1>;
+		ranges = <0x0 0x0 0x0 0xffffffff>;
+
+		MSDC0@0x11230000 {
+			compatible = "mediatek,MSDC0";
+			reg = <0x11230000 0x10000 0x10000e84 0x2>;
+			interrupts = <0x0 0x4f 0x8>;
+		};
+
+		MSDC1@0x11240000 {
+			compatible = "mediatek,MSDC1";
+			reg = <0x11240000 0x10000 0x10000e84 0x2>;
+			interrupts = <0x0 0x50 0x8>;
+		};
+
+		MSDC2@0x11250000 {
+			compatible = "mediatek,MSDC2";
+			reg = <0x11250000 0x10000 0x10000e84 0x2>;
+			interrupts = <0x0 0x51 0x8>;
+		};
+
+		MSDC3@0x11260000 {
+			compatible = "mediatek,MSDC3";
+			reg = <0x11260000 0x10000 0x10000e84 0x2>;
+			interrupts = <0x0 0x52 0x8>;
+		};
+	};
+
+	cpus {
+		#address-cells = <0x1>;
+		#size-cells = <0x0>;
+
+		cpu@0 {
+			device_type = "cpu";
+			compatible = "arm,cortex-a53";
+			reg = <0x0>;
+			enable-method = "mt-boot";
+			cpu-release-addr = <0x0 0x40000200>;
+			clock-frequency = <0x3b9aca00>;
+			linux,phandle = <0x2>;
+			phandle = <0x2>;
+		};
+
+		cpu@1 {
+			device_type = "cpu";
+			compatible = "arm,cortex-a53";
+			reg = <0x1>;
+			enable-method = "mt-boot";
+			cpu-release-addr = <0x0 0x40000200>;
+			clock-frequency = <0x3b9aca00>;
+			linux,phandle = <0x3>;
+			phandle = <0x3>;
+		};
+
+		cpu@2 {
+			device_type = "cpu";
+			compatible = "arm,cortex-a53";
+			reg = <0x2>;
+			enable-method = "mt-boot";
+			cpu-release-addr = <0x0 0x40000200>;
+			clock-frequency = <0x3b9aca00>;
+			linux,phandle = <0x4>;
+			phandle = <0x4>;
+		};
+
+		cpu@3 {
+			device_type = "cpu";
+			compatible = "arm,cortex-a53";
+			reg = <0x3>;
+			enable-method = "mt-boot";
+			cpu-release-addr = <0x0 0x40000200>;
+			clock-frequency = <0x3b9aca00>;
+			linux,phandle = <0x5>;
+			phandle = <0x5>;
+		};
+	};
+
+	memory@00000000 {
+		device_type = "memory";
+		reg = <0x0 0x40000000 0x0 0x1f000000>;
+	};
+
+	reserved-memory {
+		#address-cells = <0x2>;
+		#size-cells = <0x2>;
+		ranges;
+
+		ATF-reserved-memory {
+			compatible = "ATF-reserved-memory";
+			no-map;
+			reg = <0x0 0x43000000 0x0 0x30000>;
+		};
+
+		reserve-memory-ccci_md1 {
+			compatible = "reserve-memory-ccci_md1";
+			no-map;
+			size = <0x0 0x3810000>;
+			alignment = <0x0 0x2000000>;
+			alloc-ranges = <0x0 0x40000000 0x0 0xc0000000>;
+		};
+
+		consys-reserve-memory {
+			compatible = "consys-reserve-memory";
+			no-map;
+			size = <0x0 0x200000>;
+			alignment = <0x0 0x200000>;
+		};
+	};
+
+	interrupt-controller@0x10220000 {
+		compatible = "mtk,mt-gic";
+		#interrupt-cells = <0x3>;
+		#address-cells = <0x0>;
+		interrupt-controller;
+		reg = <0x0 0x10221000 0x0 0x1000 0x0 0x10222000 0x0 0x1000 0x0 0x10200620 0x0 0x1000>;
+		interrupts = <0x1 0x9 0xf04>;
+		linux,phandle = <0x1>;
+		phandle = <0x1>;
+
+		gic-cpuif@0 {
+			compatible = "arm,gic-cpuif";
+			cpuif-id = <0x0>;
+			cpu = <0x2>;
+		};
+
+		gic-cpuif@1 {
+			compatible = "arm,gic-cpuif";
+			cpuif-id = <0x1>;
+			cpu = <0x3>;
+		};
+
+		gic-cpuif@2 {
+			compatible = "arm,gic-cpuif";
+			cpuif-id = <0x2>;
+			cpu = <0x4>;
+		};
+
+		gic-cpuif@3 {
+			compatible = "arm,gic-cpuif";
+			cpuif-id = <0x3>;
+			cpu = <0x5>;
+		};
+	};
+
+	CPUXGPT@0x10200000 {
+		compatible = "mediatek,CPUXGPT";
+		reg = <0x0 0x10200000 0x0 0x1000>;
+		interrupts = <0x0 0x40 0x4 0x0 0x41 0x4 0x0 0x42 0x4 0x0 0x43 0x4 0x0 0x44 0x4 0x0 0x45 0x4 0x0 0x46 0x4 0x0 0x47 0x4>;
+	};
+
+	APXGPT@0x10004000 {
+		compatible = "mediatek,APXGPT";
+		reg = <0x0 0x10004000 0x0 0x1000>;
+		interrupts = <0x0 0x98 0x8>;
+		clock-frequency = <0xc65d40>;
+	};
+
+	timer {
+		compatible = "arm,armv8-timer";
+		interrupts = <0x1 0xd 0x8 0x1 0xe 0x8 0x1 0xb 0x8 0x1 0xa 0x8>;
+		clock-frequency = <0xc65d40>;
+	};
+
+	bus {
+		compatible = "simple-bus";
+		#address-cells = <0x1>;
+		#size-cells = <0x1>;
+		ranges = <0x0 0x0 0x0 0xffffffff>;
+
+		INFRACFG_AO@0x10000000 {
+			compatible = "mediatek,INFRACFG_AO";
+			reg = <0x10000000 0x1000>;
+		};
+
+		PWRAP@0x10001000 {
+			compatible = "mediatek,PWRAP";
+			reg = <0x10001000 0x1000>;
+			interrupts = <0x0 0xa3 0x4>;
+		};
+
+		PERICFG@0x10002000 {
+			compatible = "mediatek,PERICFG";
+			reg = <0x10002000 0x1000>;
+		};
+
+		FHCTL@0x10209F00 {
+			compatible = "mediatek,FHCTL";
+			reg = <0x10209f00 0x100>;
+		};
+
+		KP@0x10003000 {
+			compatible = "mediatek,KP";
+			reg = <0x10003000 0x1000>;
+			interrupts = <0x0 0xa4 0x2>;
+		};
+
+		EINTC@0x10005000 {
+			compatible = "mtk,mt-eic";
+			reg = <0x10005000 0x1000>;
+			interrupts = <0x0 0x99 0x4>;
+			#interrupt-cells = <0x2>;
+			interrupt-controller;
+			max_eint_num = <0xd5>;
+			mapping_table_entry = <0x0>;
+			linux,phandle = <0x6>;
+			phandle = <0x6>;
+
+			ALS@2 {
+				compatible = "mediatek, ALS-eint";
+				interrupt-parent = <0x6>;
+				interrupts = <0x2 0x8>;
+				debounce = <0x2 0x0>;
+			};
+
+			ACCDET@6 {
+				compatible = "mediatek, ACCDET-eint";
+				interrupt-parent = <0x6>;
+				interrupts = <0x6 0x8>;
+				debounce = <0x6 0x3e800>;
+			};
+
+			TOUCH_PANEL@10 {
+				compatible = "mediatek, TOUCH_PANEL-eint";
+				interrupt-parent = <0x6>;
+				interrupts = <0xa 0x2>;
+				debounce = <0xa 0x0>;
+			};
+		};
+
+		SLEEP@0x10006000 {
+			compatible = "mediatek,SLEEP";
+			reg = <0x10006000 0x1000>;
+			interrupts = <0x0 0xa5 0x8 0x0 0xa6 0x8 0x0 0xa7 0x8 0x0 0xa8 0x8>;
+		};
+
+		DEVAPC_AO@0x10007000 {
+			compatible = "mediatek,DEVAPC_AO";
+			reg = <0x10007000 0x1000>;
+		};
+
+		SEJ@0x10008000 {
+			compatible = "mediatek,SEJ";
+			reg = <0x10008000 0x1000>;
+			interrupts = <0x0 0xad 0x8>;
+		};
+
+		RSVD@0x10009000 {
+			compatible = "mediatek,RSVD";
+			reg = <0x10009000 0x1000>;
+		};
+
+		BAT_METTER {
+			compatible = "mediatek,bat_meter";
+		};
+
+		BAT_NOTIFY {
+			compatible = "mediatek,bat_notify";
+		};
+
+		BATTERY {
+			compatible = "mediatek,battery";
+		};
+
+		MDCLDMA@0x1000A000 {
+			compatible = "mediatek,MDCLDMA";
+			reg = <0x1000a000 0x1000 0x1000b000 0x1000 0x1021a000 0x1000 0x1021b000 0x1000 0x1020a000 0x1000 0x1020b000 0x1000>;
+			cell-index = <0x0>;
+			interrupts = <0x0 0x91 0x4 0x0 0x8c 0x8 0x0 0xdd 0x2>;
+			cldma,major = <0xb8>;
+			cldma,minor_base = <0x0>;
+			cldma,capability = <0x2>;
+			md_smem_size = <0x10000>;
+		};
+
+		DBGAPB_BASE@0x1011A000 {
+			compatible = "mediatek,DBGAPB_BASE";
+			reg = <0x1011a000 0x100>;
+		};
+
+		DNL3_XGPT64@0x1000C000 {
+			compatible = "mediatek,DNL3_XGPT64";
+			reg = <0x1000c000 0x1000>;
+			interrupts = <0x0 0x9f 0x8>;
+		};
+
+		MCUCFG@0x10200000 {
+			compatible = "mediatek,MCUCFG";
+			reg = <0x10200000 0x200>;
+			interrupts = <0x0 0x0 0x8>;
+		};
+
+		RSVD@0x10200200 {
+			compatible = "mediatek,RSVD";
+			reg = <0x10200200 0x200>;
+		};
+
+		MCUSYS_MISCCFG@0x10200400 {
+			compatible = "mediatek,MCUSYS_MISCCFG";
+			reg = <0x10200400 0x200>;
+		};
+
+		MCUSYS_MCUCFG@0x10200600 {
+			compatible = "mediatek,MCUSYS_MCUCFG";
+			reg = <0x10200600 0xa00>;
+		};
+
+		INFRACFG@0x10201000 {
+			compatible = "mediatek,INFRACFG";
+			reg = <0x10201000 0x1000>;
+		};
+
+		SRAMROM@0x10202000 {
+			compatible = "mediatek,SRAMROM";
+			reg = <0x10202000 0x1000>;
+		};
+
+		EMI@0x10203000 {
+			compatible = "mediatek,EMI";
+			reg = <0x10203000 0x1000>;
+			interrupts = <0x0 0x88 0x4>;
+		};
+
+		SYS_CIRQ@0x10204000 {
+			compatible = "mediatek,SYS_CIRQ";
+			reg = <0x10204000 0x1000>;
+			interrupts = <0x0 0xe7 0x8>;
+			cirq_num = <0x9f>;
+			spi_start_offset = <0x48>;
+		};
+
+		M4U@0x10205000 {
+			cell-index = <0x0>;
+			compatible = "mediatek,M4U";
+			reg = <0x10205000 0x1000>;
+			interrupts = <0x0 0x92 0x8>;
+		};
+
+		EFUSEC@0x10206000 {
+			compatible = "mediatek,EFUSEC";
+			reg = <0x10206000 0x1000>;
+		};
+
+		DEVAPC@0x10207000 {
+			compatible = "mediatek,DEVAPC";
+			reg = <0x10207000 0x1000>;
+			interrupts = <0x0 0x86 0x8>;
+		};
+
+		BUS_DBG@0x10208000 {
+			compatible = "mediatek,BUS_DBG";
+			reg = <0x10208000 0x1000>;
+			interrupts = <0x0 0x89 0x8>;
+		};
+
+		APMIXED@0x10209000 {
+			compatible = "mediatek,APMIXED";
+			reg = <0x10209000 0x1000>;
+		};
+
+		RSVD@0x1020C000 {
+			compatible = "mediatek,RSVD";
+			reg = <0x1020c000 0x1000>;
+		};
+
+		INFRA_MBIST@0x1020D000 {
+			compatible = "mediatek,INFRA_MBIST";
+			reg = <0x1020d000 0x1000>;
+		};
+
+		DRAMC_NAO@0x1020E000 {
+			compatible = "mediatek,DRAMC_NAO";
+			reg = <0x1020e000 0x1000>;
+		};
+
+		TRNG@0x1020F000 {
+			compatible = "mediatek,TRNG";
+			reg = <0x1020f000 0x1000>;
+			interrupts = <0x0 0x8d 0x8>;
+		};
+
+		CKSYS@0x10210000 {
+			compatible = "mediatek,CKSYS";
+			reg = <0x10210000 0x1000>;
+		};
+
+		GPIO@0x10211000 {
+			compatible = "mediatek,GPIO";
+			reg = <0x10211000 0x1000>;
+		};
+
+		TOPRGU@0x10212000 {
+			compatible = "mediatek,TOPRGU";
+			reg = <0x10212000 0x1000>;
+			interrupts = <0x0 0x80 0x2>;
+		};
+
+		DDRPHY@0x10213000 {
+			compatible = "mediatek,DDRPHY";
+			reg = <0x10213000 0x1000>;
+		};
+
+		DRAMC0@0x10214000 {
+			compatible = "mediatek,DRAMC0";
+			reg = <0x10214000 0x1000>;
+			interrupts = <0x0 0x95 0x2>;
+		};
+
+		MIPI_RX_ANA_CSI0@0x10215800 {
+			compatible = "mediatek,MIPI_RX_ANA_CSI0";
+			reg = <0x10215800 0x400>;
+		};
+
+		MIPI_RX_ANA_CSI1@0x10215C00 {
+			compatible = "mediatek,MIPI_RX_ANA_CSI1";
+			reg = <0x10215c00 0x400>;
+		};
+
+		GCPU@0x10216000 {
+			compatible = "mediatek,GCPU";
+			reg = <0x10216000 0x1000>;
+			interrupts = <0x0 0x96 0x8>;
+		};
+
+		GCE@0x10217000 {
+			compatible = "mediatek,GCE";
+			reg = <0x10217000 0xc00>;
+			interrupts = <0x0 0x97 0x8 0x0 0x94 0x8>;
+		};
+
+		CQ_DMA@0x10217c00 {
+			compatible = "mediatek,CQDMA";
+			reg = <0x10217c00 0x400>;
+			interrupts = <0x0 0x8a 0x8>;
+			nr_channel = <0x1>;
+		};
+
+		AP_CCIF1@0x10218000 {
+			compatible = "mediatek,AP_CCIF1";
+			reg = <0x10218000 0x1000>;
+			interrupts = <0x0 0x8b 0x4>;
+		};
+
+		MD_CCIF1@0x10219000 {
+			compatible = "mediatek,MD_CCIF1";
+			reg = <0x10219000 0x1000>;
+		};
+
+		INFRA_MD@0x1021C000 {
+			compatible = "mediatek,INFRA_MD";
+			reg = <0x1021c000 0x1000>;
+		};
+
+		DBGAPB@0x10400000 {
+			compatible = "mediatek,DBGAPB";
+			reg = <0x10400000 0xc00000>;
+			interrupts = <0x0 0x84 0x8>;
+		};
+
+		DEBUGTOP_CA7L@0x10800000 {
+			compatible = "mediatek,DEBUGTOP_CA7L";
+			reg = <0x10800000 0x400000>;
+		};
+
+		DEBUGTOP_MD1@0x10450000 {
+			compatible = "mediatek,DEBUGTOP_MD1";
+			reg = <0x10450000 0x20000>;
+		};
+
+		DEBUGTOP_MD2@0x10470000 {
+			compatible = "mediatek,DEBUGTOP_MD2";
+			reg = <0x10470000 0x10000>;
+		};
+
+		CA9@0x10220000 {
+			compatible = "mediatek,CA9";
+			reg = <0x10220000 0x8000>;
+		};
+
+		MCU_BIU@0x10300000 {
+			compatible = "mediatek,MCU_BIU";
+			reg = <0x10300000 0x8000>;
+		};
+
+		CPU_DBGAPB {
+			compatible = "mediatek,DBG_DEBUG";
+			num = <0x4>;
+			reg = <0x10810000 0x1000 0x10910000 0x1000 0x10a10000 0x1000 0x10b10000 0x1000>;
+		};
+
+		AP_DMA@0x11000000 {
+			compatible = "mediatek,AP_DMA";
+			reg = <0x11000000 0x1000>;
+			interrupts = <0x0 0x61 0x8>;
+		};
+
+		AP_DMA_IRDA@0x11000100 {
+			compatible = "mediatek,AP_DMA_IRDA";
+			reg = <0x11000100 0x80>;
+			interrupts = <0x0 0x62 0x8>;
+		};
+
+		AP_DMA_UART0_TX@0x11000380 {
+			compatible = "mediatek,AP_DMA_UART0_TX";
+			reg = <0x11000380 0x80>;
+			interrupts = <0x0 0x67 0x8>;
+		};
+
+		AP_DMA_UART0_RX@0x11000400 {
+			compatible = "mediatek,AP_DMA_UART0_RX";
+			reg = <0x11000400 0x80>;
+			interrupts = <0x0 0x68 0x8>;
+		};
+
+		AP_DMA_UART1_TX@0x11000480 {
+			compatible = "mediatek,AP_DMA_UART1_TX";
+			reg = <0x11000480 0x80>;
+			interrupts = <0x0 0x69 0x8>;
+		};
+
+		AP_DMA_UART1_RX@0x11000500 {
+			compatible = "mediatek,AP_DMA_UART1_RX";
+			reg = <0x11000500 0x80>;
+			interrupts = <0x0 0x6a 0x8>;
+		};
+
+		AP_DMA_UART2_TX@0x11000580 {
+			compatible = "mediatek,AP_DMA_UART2_TX";
+			reg = <0x11000580 0x80>;
+			interrupts = <0x0 0x6b 0x8>;
+		};
+
+		AP_DMA_UART2_RX@0x11000600 {
+			compatible = "mediatek,AP_DMA_UART2_RX";
+			reg = <0x11000600 0x80>;
+			interrupts = <0x0 0x6c 0x8>;
+		};
+
+		AP_DMA_UART3_TX@0x11000680 {
+			compatible = "mediatek,AP_DMA_UART3_TX";
+			reg = <0x11000680 0x80>;
+			interrupts = <0x0 0x6d 0x8>;
+		};
+
+		AP_DMA_UART3_RX@0x11000700 {
+			compatible = "mediatek,AP_DMA_UART3_RX";
+			reg = <0x11000700 0x80>;
+			interrupts = <0x0 0x6e 0x8>;
+		};
+
+		AP_DMA_UART4_TX@0x11000780 {
+			compatible = "mediatek,AP_DMA_UART4_TX";
+			reg = <0x11000780 0x80>;
+			interrupts = <0x0 0x6f 0x8>;
+		};
+
+		AP_DMA_UART4_RX@0x11000800 {
+			compatible = "mediatek,AP_DMA_UART4_RX";
+			reg = <0x11000800 0x80>;
+			interrupts = <0x0 0x70 0x8>;
+		};
+
+		AUXADC@0x11001000 {
+			compatible = "mediatek,AUXADC";
+			reg = <0x11001000 0x1000>;
+			interrupts = <0x0 0x4a 0x2>;
+		};
+
+		AP_UART0@0x11002000 {
+			cell-index = <0x0>;
+			compatible = "mediatek,AP_UART0";
+			reg = <0x11002000 0x1000>;
+			interrupts = <0x0 0x5b 0x8>;
+		};
+
+		AP_UART1@0x11003000 {
+			cell-index = <0x1>;
+			compatible = "mediatek,AP_UART1";
+			reg = <0x11003000 0x1000>;
+			interrupts = <0x0 0x5c 0x8>;
+		};
+
+		AP_UART2@0x11004000 {
+			cell-index = <0x2>;
+			compatible = "mediatek,AP_UART2";
+			reg = <0x11004000 0x1000>;
+			interrupts = <0x0 0x5d 0x8>;
+		};
+
+		AP_UART3@0x11005000 {
+			cell-index = <0x3>;
+			compatible = "mediatek,AP_UART3";
+			reg = <0x11005000 0x1000>;
+			interrupts = <0x0 0x5e 0x8>;
+		};
+
+		PWM@0x11006000 {
+			compatible = "mediatek,PWM";
+			reg = <0x11006000 0x1000>;
+			interrupts = <0x0 0x4d 0x8>;
+		};
+
+		G3D_CONFIG@0x13000000 {
+			compatible = "mediatek,G3D_CONFIG";
+			reg = <0x13000000 0x1000>;
+		};
+
+		IMGSYS@0x15000000 {
+			compatible = "mediatek,IMGSYS";
+			reg = <0x15000000 0x1000>;
+		};
+
+		I2C0@0x11007000 {
+			compatible = "mediatek,I2C0";
+			cell-index = <0x0>;
+			reg = <0x11007000 0x1000>;
+			interrupts = <0x0 0x54 0x8 0x0 0x63 0x8>;
+		};
+
+		I2C1@0x11008000 {
+			compatible = "mediatek,I2C1";
+			cell-index = <0x1>;
+			reg = <0x11008000 0x1000>;
+			interrupts = <0x0 0x55 0x8 0x0 0x64 0x8>;
+		};
+
+		I2C2@0x11009000 {
+			compatible = "mediatek,I2C2";
+			cell-index = <0x2>;
+			reg = <0x11009000 0x1000>;
+			interrupts = <0x0 0x56 0x8 0x0 0x65 0x8>;
+		};
+
+		I2C3@0x1100F000 {
+			compatible = "mediatek,I2C3";
+			cell-index = <0x3>;
+			reg = <0x1100f000 0x1000>;
+			interrupts = <0x0 0x57 0x8 0x0 0x66 0x8>;
+		};
+
+		SPI1@0x1100A000 {
+			cell-index = <0x0>;
+			spi-padmacro = <0x0>;
+			compatible = "mediatek,SPI1";
+			reg = <0x1100a000 0x1000>;
+			interrupts = <0x0 0x76 0x8>;
+		};
+
+		THERM_CTRL@0x1100B000 {
+			compatible = "mediatek,THERM_CTRL";
+			reg = <0x1100b000 0x1000>;
+			interrupts = <0x0 0x4e 0x8>;
+		};
+
+		PTP_FSM@0x1100B000 {
+			compatible = "mediatek,PTP_FSM";
+			reg = <0x1100b000 0x1000>;
+			interrupts = <0x0 0x7d 0x8>;
+		};
+
+		AP_DMA_BTIF_TX@0x11000780 {
+			compatible = "mediatek,AP_DMA_BTIF_TX";
+			reg = <0x11000780 0x80>;
+			interrupts = <0x0 0x6f 0x8>;
+		};
+
+		AP_DMA_BTIF_RX@0x11000800 {
+			compatible = "mediatek,AP_DMA_BTIF_RX";
+			reg = <0x11000800 0x80>;
+			interrupts = <0x0 0x70 0x8>;
+		};
+
+		BTIF@0x1100C000 {
+			compatible = "mediatek,BTIF";
+			reg = <0x1100c000 0x1000>;
+			interrupts = <0x0 0x5a 0x8>;
+		};
+
+		mt3326-gps@0xffffffff {
+			compatible = "mediatek,mt3326-gps";
+		};
+
+		CONSYS@0x18070000 {
+			compatible = "mediatek,CONSYS";
+			reg = <0x18070000 0x200 0x10212000 0x100 0x10000000 0x2000 0x10006000 0x1000>;
+			interrupts = <0x0 0xe3 0x8 0x0 0xe1 0x8>;
+		};
+
+		BTCVSD@0x18000000 {
+			compatible = "mediatek,audio_bt_cvsd";
+			reg = <0x18000000 0x1000 0x18080000 0x1000>;
+			interrupts = <0x0 0xe4 0x8>;
+		};
+
+		WIFI@0x180F0000 {
+			compatible = "mediatek,WIFI";
+			reg = <0x180f0000 0x5c>;
+			interrupts = <0x0 0xe2 0x8>;
+		};
+
+		NFI@0x1100D000 {
+			compatible = "mediatek,NFI";
+			reg = <0x1100d000 0x1000>;
+			interrupts = <0x0 0x60 0x8>;
+		};
+
+		DISP_PWM0@0x1100E000 {
+			compatible = "mediatek,DISP_PWM0";
+			reg = <0x1100e000 0x1000>;
+		};
+
+		IRDA@0x11010000 {
+			compatible = "mediatek,IRDA";
+			reg = <0x11010000 0x1000>;
+		};
+
+		IRTX@0x11011000 {
+			compatible = "mediatek,IRTX";
+			reg = <0x11011000 0x1000>;
+			interrupts = <0x0 0x7c 0x4>;
+			major = <0x64>;
+			pwm_ch = <0x0>;
+		};
+
+		USB0@0x11200000 {
+			compatible = "mediatek,USB0";
+			cell-index = <0x0>;
+			reg = <0x11200000 0x10000 0x11210000 0x10000>;
+			interrupts = <0x0 0x48 0x8>;
+			mode = <0x2>;
+			multipoint = <0x1>;
+			dyn_fifo = <0x1>;
+			soft_con = <0x1>;
+			dma = <0x1>;
+			num_eps = <0x10>;
+			dma_channels = <0x8>;
+		};
+
+		AUDIO@0x11220000 {
+			compatible = "mediatek,AUDIO";
+			reg = <0x11220000 0x10000>;
+			interrupts = <0x0 0x90 0x8>;
+		};
+
+		MT_SOC_DL1_PCM@0x11220000 {
+			compatible = "mediatek,mt_soc_pcm_dl1";
+			reg = <0x11220000 0x1000>;
+			interrupts = <0x0 0x90 0x8>;
+			audclk-gpio = <0x8f 0x0>;
+			audmiso-gpio = <0x90 0x0>;
+			audmosi-gpio = <0x91 0x0>;
+			vowclk-gpio = <0x94 0x0>;
+			extspkamp-gpio = <0x75 0x0>;
+			i2s1clk-gpio = <0x50 0x0>;
+			i2s1dat-gpio = <0x4e 0x0>;
+			i2s1mclk-gpio = <0x9 0x0>;
+			i2s1ws-gpio = <0x4f 0x0>;
+		};
+
+		MT_SOC_UL1_PCM@0x11220000 {
+			compatible = "mediatek,mt_soc_pcm_capture";
+		};
+
+		MT_SOC_VOICE_MD1@0x11220000 {
+			compatible = "mediatek,mt_soc_pcm_voice_md1";
+		};
+
+		MT_SOC_HDMI_PCM@0x11220000 {
+			compatible = "mediatek,mt_soc_pcm_hdmi";
+		};
+
+		MT_SOC_ULDLLOOPBACK_PCM@0x11220000 {
+			compatible = "mediatek,mt_soc_pcm_uldlloopback";
+		};
+
+		MT_SOC_I2S0_PCM@0x11220000 {
+			compatible = "mediatek,mt_soc_pcm_dl1_i2s0";
+		};
+
+		MT_SOC_MRGRX_PCM@0x11220000 {
+			compatible = "mediatek,mt_soc_pcm_mrgrx";
+		};
+
+		MT_SOC_MRGRX_AWB_PCM@0x11220000 {
+			compatible = "mediatek,mt_soc_pcm_mrgrx_awb";
+		};
+
+		MT_SOC_FM_I2S_PCM@0x11220000 {
+			compatible = "mediatek,mt_soc_pcm_fm_i2s";
+		};
+
+		MT_SOC_FM_I2S_AWB_PCM@0x11220000 {
+			compatible = "mediatek,mt_soc_pcm_fm_i2s_awb";
+		};
+
+		MT_SOC_I2S0DL1_PCM@0x11220000 {
+			compatible = "mediatek,mt_soc_pcm_dl1_i2s0Dl1";
+		};
+
+		MT_SOC_DL1_AWB_PCM@0x11220000 {
+			compatible = "mediatek,mt_soc_pcm_dl1_awb";
+		};
+
+		MT_SOC_VOICE_MD1_BT@0x11220000 {
+			compatible = "mediatek,mt_soc_pcm_voice_md1_bt";
+		};
+
+		MT_SOC_VOIP_BT_OUT@0x11220000 {
+			compatible = "mediatek,mt_soc_pcm_dl1_bt";
+		};
+
+		MT_SOC_VOIP_BT_IN@0x11220000 {
+			compatible = "mediatek,mt_soc_pcm_bt_dai";
+		};
+
+		MT_SOC_TDMRX_PCM@0x11220000 {
+			compatible = "mediatek,mt_soc_tdm_capture";
+		};
+
+		MT_SOC_FM_MRGTX_PCM@0x11220000 {
+			compatible = "mediatek,mt_soc_pcm_fmtx";
+		};
+
+		MT_SOC_UL2_PCM@0x11220000 {
+			compatible = "mediatek,mt_soc_pcm_capture2";
+		};
+
+		MT_SOC_I2S0_AWB_PCM@0x11220000 {
+			compatible = "mediatek,mt_soc_pcm_i2s0_awb";
+		};
+
+		MT_SOC_VOICE_MD2@0x11220000 {
+			compatible = "mediatek,mt_soc_pcm_voice_md2";
+		};
+
+		MT_SOC_ROUTING_PCM@0x11220000 {
+			compatible = "mediatek,mt_soc_pcm_routing";
+			i2s1clk-gpio = <0x7 0x6>;
+			i2s1dat-gpio = <0x5 0x6>;
+			i2s1mclk-gpio = <0x9 0x6>;
+			i2s1ws-gpio = <0x6 0x6>;
+		};
+
+		MT_SOC_VOICE_MD2_BT@0x11220000 {
+			compatible = "mediatek,mt_soc_pcm_voice_md2_bt";
+		};
+
+		MT_SOC_HP_IMPEDANCE_PCM@0x11220000 {
+			compatible = "mediatek,Mt_soc_pcm_hp_impedance";
+		};
+
+		MT_SOC_CODEC_NAME@0x11220000 {
+			compatible = "mediatek,mt_soc_codec_63xx";
+		};
+
+		MT_SOC_DUMMY_PCM@0x11220000 {
+			compatible = "mediatek,mt_soc_pcm_dummy";
+		};
+
+		MT_SOC_CODEC_DUMMY_NAME@0x11220000 {
+			compatible = "mediatek,mt_soc_codec_dummy";
+		};
+
+		MT_SOC_ROUTING_DAI_NAME@0x11220000 {
+			compatible = "mediatek,mt_soc_dai_routing";
+		};
+
+		MT_SOC_DAI_NAME@0x11220000 {
+			compatible = "mediatek,mt_soc_dai_stub";
+		};
+
+		MT_SOC_OFFLOAD_GDMA@0x11220000 {
+			compatible = "mediatek,mt_soc_pcm_offload_gdma";
+		};
+
+		USB1@0x11260000 {
+			compatible = "mediatek,USB1";
+			reg = <0x11260000 0x10000>;
+			interrupts = <0x0 0x49 0x8>;
+		};
+
+		MSDC3@0x11260000 {
+			compatible = "mediatek,MSDC3";
+			reg = <0x11260000 0x10000>;
+		};
+
+		WCN_AHB@0x11270000 {
+			compatible = "mediatek,WCN_AHB";
+			reg = <0x11270000 0x10000>;
+			interrupts = <0x0 0xe4 0x8>;
+		};
+
+		MDPERIPHERALS@0x20000000 {
+			compatible = "mediatek,MD PERIPHERALS";
+			reg = <0x20000000 0x0>;
+		};
+
+		MD2PERIPHERALS@0x30000000 {
+			compatible = "mediatek,MD2 PERIPHERALS";
+			reg = <0x30000000 0x0>;
+		};
+
+		C2KPERIPHERALS@0x38000000 {
+			compatible = "mediatek,C2K PERIPHERALS";
+			reg = <0x38000000 0x0>;
+		};
+
+		MFGCFG@0x13000000 {
+			compatible = "mediatek,MFGCFG";
+			reg = <0x13000000 0x1000>;
+			interrupts = <0x0 0xd2 0x8>;
+		};
+
+		MALI@0x13040000 {
+			compatible = "arm,malit720", "arm,mali-t72x", "arm,malit7xx", "arm,mali-midgard";
+			reg = <0x13040000 0x4000>;
+			interrupts = <0x0 0xd4 0x8 0x0 0xd3 0x8 0x0 0xd2 0x8>;
+			interrupt-names = "JOB", "MMU", "GPU";
+			clock-frequency = <0x1ad27480>;
+		};
+
+		MMSYS_CONFIG@0x14000000 {
+			compatible = "mediatek,MMSYS_CONFIG";
+			reg = <0x14000000 0x1000>;
+			interrupts = <0x0 0xce 0x8>;
+		};
+
+		MDP_RDMA@0x14001000 {
+			compatible = "mediatek,MDP_RDMA";
+			reg = <0x14001000 0x1000>;
+			interrupts = <0x0 0xbb 0x8>;
+		};
+
+		MDP_RSZ0@0x14002000 {
+			compatible = "mediatek,MDP_RSZ0";
+			reg = <0x14002000 0x1000>;
+			interrupts = <0x0 0xbc 0x8>;
+		};
+
+		MDP_RSZ1@0x14003000 {
+			compatible = "mediatek,MDP_RSZ1";
+			reg = <0x14003000 0x1000>;
+			interrupts = <0x0 0xbd 0x8>;
+		};
+
+		MDP_WDMA@0x14004000 {
+			compatible = "mediatek,MDP_WDMA";
+			reg = <0x14004000 0x1000>;
+			interrupts = <0x0 0xbf 0x8>;
+		};
+
+		MDP_WROT@0x14005000 {
+			compatible = "mediatek,MDP_WROT";
+			reg = <0x14005000 0x1000>;
+			interrupts = <0x0 0xc0 0x8>;
+		};
+
+		MDP_TDSHP@0x14006000 {
+			compatible = "mediatek,MDP_TDSHP";
+			reg = <0x14006000 0x1000>;
+			interrupts = <0x0 0xbe 0x8>;
+		};
+
+		DISPSYS@0x14007000 {
+			compatible = "mediatek,DISPSYS";
+			reg = <0x14007000 0x1000 0x0 0x0 0x14009000 0x1000 0x0 0x0 0x1400b000 0x1000 0x1400c000 0x1000 0x1400d000 0x1000 0x1400e000 0x1000 0x1400f000 0x1000 0x14010000 0x1000 0x0 0x0 0x1100e000 0x1000 0x0 0x0 0x14015000 0x1000 0x14012000 0x1000 0x14013000 0x1000 0x14000000 0x1000 0x14016000 0x1000 0x14017000 0x1000 0x14018000 0x1000 0x10206000 0x1000 0x10210000 0x1000 0x10211a70 0xc 0x10211974 0xc 0x10211b70 0xc 0x10206044 0xc 0x10206514 0xc 0x10206558 0xc 0x102100a0 0x1000 0x10209270 0x1000 0x10209274 0x1000 0x0 0x0>;
+			interrupts = <0x0 0xc1 0x8 0x0 0x0 0x8 0x0 0xc3 0x8 0x0 0x0 0x8 0x0 0xc5 0x8 0x0 0xc6 0x8 0x0 0xc7 0x8 0x0 0xc8 0x8 0x0 0xc9 0x8 0x0 0xca 0x8 0x0 0x0 0x8 0x0 0x75 0x8 0x0 0x0 0x8 0x0 0xba 0x8 0x0 0xcc 0x8 0x0 0xcd 0x8 0x0 0xce 0x8 0x0 0xb0 0x8 0x0 0x0 0x8 0x0 0x0 0x8 0x0 0x0 0x8 0x0 0x0 0x8 0x0 0x0 0x8 0x0 0x0 0x8 0x0 0x0 0x8 0x0 0x0 0x8 0x0 0x0 0x8>;
+		};
+
+		DISP_OVL0@0x14007000 {
+			compatible = "mediatek,DISP_OVL0";
+			reg = <0x14007000 0x1000>;
+			interrupts = <0x0 0xc1 0x8>;
+		};
+
+		DISP_OVL1@0x14008000 {
+			compatible = "mediatek,DISP_OVL1";
+			reg = <0x14008000 0x1000>;
+			interrupts = <0x0 0xc2 0x8>;
+		};
+
+		DISP_RDMA0@0x14009000 {
+			compatible = "mediatek,DISP_RDMA0";
+			reg = <0x14009000 0x1000>;
+			interrupts = <0x0 0xc3 0x8>;
+		};
+
+		DISP_RDMA1@0x1400A000 {
+			compatible = "mediatek,DISP_RDMA1";
+			reg = <0x1400a000 0x1000>;
+			interrupts = <0x0 0xc4 0x8>;
+		};
+
+		gpio@0x10000e00 {
+			compatible = "mediatek,fpga_gpio";
+			reg = <0x10000e00 0x100>;
+		};
+
+		DISP_WDMA0@0x1400B000 {
+			compatible = "mediatek,DISP_WDMA0";
+			reg = <0x1400b000 0x1000>;
+			interrupts = <0x0 0xc5 0x8>;
+		};
+
+		DISP_COLOR@0x1400C000 {
+			compatible = "mediatek,DISP_COLOR";
+			reg = <0x1400c000 0x1000>;
+			interrupts = <0x0 0xc6 0x8>;
+		};
+
+		DISP_CCORR@0x1400D000 {
+			compatible = "mediatek,DISP_CCORR";
+			reg = <0x1400d000 0x1000>;
+			interrupts = <0x0 0xc7 0x8>;
+		};
+
+		DISP_AAL@0x1400E000 {
+			compatible = "mediatek,DISP_AAL";
+			reg = <0x1400e000 0x1000>;
+			interrupts = <0x0 0xc8 0x8>;
+		};
+
+		DISP_GAMMA@0x1400F000 {
+			compatible = "mediatek,DISP_GAMMA";
+			reg = <0x1400f000 0x1000>;
+			interrupts = <0x0 0xc9 0x8>;
+		};
+
+		DISP_DITHER@0x14010000 {
+			compatible = "mediatek,DISP_DITHER";
+			reg = <0x14010000 0x1000>;
+			interrupts = <0x0 0xca 0x8>;
+		};
+
+		DISP_UFOE@0x14011000 {
+			compatible = "mediatek,DISP_UFOE";
+			reg = <0x14011000 0x1000>;
+			interrupts = <0x0 0xcb 0x8>;
+		};
+
+		HDMI@0 {
+			compatible = "mediatek,HDMI";
+		};
+
+		DSI0@0x14012000 {
+			compatible = "mediatek,DSI0";
+			reg = <0x14012000 0x1000>;
+			interrupts = <0x0 0xcc 0x8>;
+		};
+
+		DPI0@0x14013000 {
+			compatible = "mediatek,DPI0";
+			reg = <0x14013000 0x1000>;
+			interrupts = <0x0 0xcd 0x8>;
+		};
+
+		DISP_PWM@0x14014000 {
+			compatible = "mediatek,DISP_PWM";
+			reg = <0x14014000 0x1000>;
+		};
+
+		MM_MUTEX@0x14015000 {
+			compatible = "mediatek,MM_MUTEX";
+			reg = <0x14015000 0x1000>;
+			interrupts = <0x0 0xba 0x8>;
+		};
+
+		SMI_LARB0@0x14016000 {
+			compatible = "mediatek,SMI_LARB0";
+			reg = <0x14016000 0x1000>;
+			interrupts = <0x0 0xb0 0x8>;
+		};
+
+		SMI_COMMON@0x14017000 {
+			compatible = "mediatek,SMI_COMMON";
+			reg = <0x14017000 0x1000 0x14016000 0x1000 0x16010000 0x1000 0x15001000 0x1000>;
+		};
+
+		MIPI_TX_CONFIG@0x14018000 {
+			compatible = "mediatek,MIPI_TX_CONFIG";
+			reg = <0x14018000 0x1000>;
+		};
+
+		ISPSYS@0x15000000 {
+			compatible = "mediatek,ISPSYS";
+			reg = <0x15004000 0x9000 0x15000000 0x10000 0x10215000 0x1000>;
+			interrupts = <0x0 0xb6 0x8 0x0 0xb7 0x8>;
+		};
+
+		KD_CAMERA_HW1@0x15008000 {
+			compatible = "mediatek,CAMERA_HW";
+			reg = <0x15008000 0x1000>;
+		};
+
+		KD_CAMERA_HW2@0x15008000 {
+			compatible = "mediatek,CAMERA_HW2";
+			reg = <0x15008000 0x1000>;
+		};
+
+		ISP_SYSR@0x15000000 {
+			compatible = "mediatek,ISP_SYSR";
+		};
+
+		ISP_PIPEM@0x15000000 {
+			compatible = "mediatek,ISP_PIPEM";
+		};
+
+		SENINF_TOP@0x15008000 {
+			compatible = "mediatek,SENINF_TOP";
+			reg = <0x15008000 0x1000>;
+			interrupts = <0x0 0xb6 0x8>;
+		};
+
+		CAM@0x15004000 {
+			compatible = "mediatek,CAM";
+			reg = <0x15004000 0x1000>;
+			interrupts = <0x0 0xb7 0x8>;
+		};
+
+		VENC@0x15009000 {
+			compatible = "mediatek,VENC";
+			reg = <0x15009000 0x1000>;
+			interrupts = <0x0 0xb4 0x8>;
+		};
+
+		VDEC@0x1500B000 {
+			compatible = "mediatek,VDEC";
+			reg = <0x1500b000 0x1000>;
+		};
+
+		JPGENC@0x1500A000 {
+			compatible = "mediatek,JPGENC";
+			reg = <0x1500a000 0x1000>;
+			interrupts = <0x0 0xb5 0x8>;
+		};
+
+		SMI_LARB2@0x15001000 {
+			compatible = "mediatek,SMI_LARB2";
+			reg = <0x15001000 0x1000>;
+			interrupts = <0x0 0xb2 0x8>;
+		};
+
+		IMGSYS_CONFG@0x15000000 {
+			compatible = "mediatek,IMGSYS_CONFG";
+			reg = <0x15000000 0x1000>;
+		};
+
+		VDEC_GCON@0x16000000 {
+			compatible = "mediatek,VDEC_GCON";
+			reg = <0x16000000 0x1000>;
+		};
+
+		SMI_LARB1@0x16010000 {
+			compatible = "mediatek,SMI_LARB1";
+			reg = <0x16010000 0x10000>;
+			interrupts = <0x0 0xb1 0x8>;
+		};
+
+		VDEC_FULL_TOP@0x16020000 {
+			compatible = "mediatek,VDEC_FULL_TOP";
+			reg = <0x16020000 0x10000>;
+			interrupts = <0x0 0xb3 0x8>;
+		};
+
+		CHIPID@08000000 {
+			compatible = "mediatek,CHIPID";
+			reg = <0x8000000 0x4 0x8000004 0x4 0x8000008 0x4 0x800000c 0x4>;
+		};
+
+		MTKFB@5e200000 {
+			compatible = "mediatek,MTKFB";
+			reg = <0x7f000000 0x1000000>;
+		};
+	};
+
+	psci {
+		compatible = "arm,psci";
+		method = "smc";
+		cpu_suspend = <0x84000001>;
+		cpu_off = <0x84000002>;
+		cpu_on = <0x84000003>;
+		affinity_info = <0x84000004>;
+	};
+
+	hwmsensor@0 {
+		compatible = "mediatek,hwmsensor";
+	};
+
+	gsensor@0 {
+		compatible = "mediatek,gsensor";
+	};
+
+	als_ps@0 {
+		compatible = "mediatek,als_ps";
+	};
+
+	m_acc_pl@0 {
+		compatible = "mediatek,m_acc_pl";
+	};
+
+	m_alsps_pl@0 {
+		compatible = "mediatek,m_alsps_pl";
+	};
+
+	m_batch_pl@0 {
+		compatible = "mediatek,m_batch_pl";
+	};
+
+	batchsensor@0 {
+		compatible = "mediatek,batchsensor";
+	};
+
+	gyroscope@0 {
+		compatible = "mediatek,gyroscope";
+	};
+
+	m_gyro_pl@0 {
+		compatible = "mediatek,m_gyro_pl";
+	};
+
+	barometer@0 {
+		compatible = "mediatek,barometer";
+	};
+
+	m_baro_pl@0 {
+		compatible = "mediatek,m_baro_pl";
+	};
+
+	msensor@0 {
+		compatible = "mediatek,msensor";
+	};
+
+	m_mag_pl@0 {
+		compatible = "mediatek,m_mag_pl";
+	};
+
+	orientation@0 {
+		compatible = "mediatek,orientation";
+	};
+
+	MOBICORE {
+		compatible = "trustonic,mobicore";
+		interrupts = <0x0 0xf8 0x1>;
+	};
+
+	mt8193ckgen@0 {
+		compatible = "mediatek,mt8193-ckgen";
+	};
+
+	multibridge@0 {
+		compatible = "mediatek,multibridge";
+	};
+};
diff --git a/arch/arm64/configs/X5PRO_6735m_defconfig b/arch/arm64/configs/X5PRO_6735m_defconfig
index 0ae109d..e34ee73 100644
--- a/arch/arm64/configs/X5PRO_6735m_defconfig
+++ b/arch/arm64/configs/X5PRO_6735m_defconfig
@@ -306,7 +306,7 @@ CONFIG_CMDLINE_FROM_BOOTLOADER=y
 # CONFIG_CMDLINE_EXTEND is not set
 # CONFIG_CMDLINE_FORCE is not set
 CONFIG_BUILD_ARM64_APPENDED_DTB_IMAGE=y
-CONFIG_BUILD_ARM64_APPENDED_DTB_IMAGE_NAMES="benefit_m7"
+CONFIG_BUILD_ARM64_APPENDED_DTB_IMAGE_NAMES="X5PRO_6735m"
 
 #
 # CPU Power Management
diff --git a/drivers/input/touchscreen/mediatek/FT6206_X2605/Makefile b/drivers/input/touchscreen/mediatek/FT6206_X2605/Makefile
index e1e6ddb..c34120b 100755
--- a/drivers/input/touchscreen/mediatek/FT6206_X2605/Makefile
+++ b/drivers/input/touchscreen/mediatek/FT6206_X2605/Makefile
@@ -1,7 +1,7 @@
 include $(srctree)/drivers/misc/mediatek/Makefile.custom
 
 # Linux driver folder
-ccflags-y += -I$(srctree)/arch/arm/mach-$(MTK_PLATFORM)/$(ARCH_MTK_PROJECT)/touchpanel/FT6206_X2605/
+ccflags-y += -I$(srctree)/drivers/misc/mediatek/mach/$(MTK_PLATFORM)/$(ARCH_MTK_PROJECT)/touchpanel/FT6206_X2605/
 ccflags-y += -I$(srctree)/drivers/input/touchscreen/mediatek/FT6206_X2605/
 ccflags-y += -I$(srctree)/drivers/input/touchscreen/mediatek/
 
diff --git a/drivers/input/touchscreen/mediatek/FT6206_X2605/tpd_custom_fts.h b/drivers/input/touchscreen/mediatek/FT6206_X2605/tpd_custom_fts.h
deleted file mode 100755
index f30512c..0000000
--- a/drivers/input/touchscreen/mediatek/FT6206_X2605/tpd_custom_fts.h
+++ /dev/null
@@ -1,190 +0,0 @@
-#ifndef TOUCHPANEL_H__
-#define TOUCHPANEL_H__
-
-#include <linux/hrtimer.h>
-#include <linux/string.h>
-#include <linux/vmalloc.h>
-//#include <linux/io.h>
-
-#include <linux/init.h>
-#include <linux/module.h>
-#include <linux/delay.h>
-#include <linux/i2c.h>
-#include <linux/input.h>
-#include <linux/slab.h>
-#include <linux/gpio.h>
-#include <linux/sched.h>
-#include <linux/kthread.h>
-#include <linux/bitops.h>
-#include <linux/kernel.h>
-#include <linux/delay.h>
-#include <linux/byteorder/generic.h>
-#ifdef CONFIG_HAS_EARLYSUSPEND
-#include <linux/earlysuspend.h>
-#endif
-#include <linux/interrupt.h>
-#include <linux/time.h>
-#include <linux/rtpm_prio.h>
-
-#include <linux/proc_fs.h>
-#include <asm/uaccess.h>
-
-#include <mach/mt_pm_ldo.h>
-#include <mach/mt_typedefs.h>
-#include <mach/mt_boot.h>
-
-#include <cust_eint.h>
-#include <linux/jiffies.h>
-
-#include <pmic_drv.h>
-//#include <cust_i2c.h>
-
-struct Upgrade_Info {
-        u8 CHIP_ID;
-        u8 FTS_NAME[20];
-        u8 TPD_MAX_POINTS;
-        u8 AUTO_CLB;
-	u16 delay_aa;		/*delay of write FT_UPGRADE_AA */
-	u16 delay_55;		/*delay of write FT_UPGRADE_55 */
-	u8 upgrade_id_1;	/*upgrade id 1 */
-	u8 upgrade_id_2;	/*upgrade id 2 */
-	u16 delay_readid;	/*delay of read id */
-	u16 delay_earse_flash; /*delay of earse flash*/
-};
-
-extern struct Upgrade_Info fts_updateinfo_curr;
-
-extern int fts_i2c_Read(struct i2c_client *client, char *writebuf,int writelen, char *readbuf, int readlen);
-extern int fts_i2c_Write(struct i2c_client *client, char *writebuf, int writelen);
-extern int fts_write_reg(struct i2c_client *client, u8 regaddr, u8 regvalue);
-extern int fts_read_reg(struct i2c_client *client, u8 regaddr, u8 *regvalue);
-extern void focaltech_get_upgrade_array(void);
-extern void fts_reset_tp(int HighOrLow);
-
-/**********************Custom define begin**********************************************/
-
-
-#define TPD_POWER_SOURCE_CUSTOM         MT6328_POWER_LDO_VGP1
-#define IIC_PORT                   1	//MT6572: 1  MT6589:0 , Based on the I2C index you choose for TPM
-
-//#define FTS_GESTRUE                                  // if need the gesture funtion,enable this MACRO
-//#define TPD_PROXIMITY					// if need the PS funtion,enable this MACRO
-
-/*
-///// ***** virtual key  definition  ***** /////
-
-Below are the recommend  virtual key definition for different resolution TPM. 
-
-HVGA  320x480    2key ( (80,530);(240,530) )           3key  ( (80,530);(160;530);(240,530) )          4key   ( (40,530);(120;530);(200,530);(280,530)  ) 
-WVGA  480x800   2key ( (80,900);(400,900) )           3key  ( (80,900);(240,900);(400,900) )          4key   ( (60,900);(180;900);(300,900);(420,900)  ) 
-FWVGA 480x854  2key ( (80,900);(400,900) )           3key  ( (80,900);(240,900);(400,900) )          4key   ( (60,900);(180;900);(300,900);(420,900)  ) 
-QHD  540x960     2key ( (90,1080);(450,1080) )           3key  ( (90,1080);(270,1080);(450,1080) )          4key   ( (90,1080);(180;1080);(360,1080);(450,1080)  ) 
-HD    1280x720    2key ( (120,1350);(600,1350) )           3key  ( (120,1350);(360,1350);(600,1350) )          4key   ( (120,1080);(240;1080);(480,1080);(600,1080)  )
-FHD   1920x1080  2key ( (160,2100);(920,2100) )           3key  ( (160,2100);(540,2100);(920,2100) )          4key   ( (160,2100);(320;1080);(600,1080);(920,2100)  )
-*/
-#define TPD_HAVE_BUTTON	// if have virtual key,need define the MACRO
-#define TPD_BUTTON_HEIGH        (40)  //100
-#define TPD_KEY_COUNT           3    //  4
-#define TPD_KEYS                { KEY_BACK, KEY_HOMEPAGE, KEY_MENU}
-#define TPD_KEYS_DIM            	{{80,900,20,TPD_BUTTON_HEIGH}, {240,900,20,TPD_BUTTON_HEIGH}, {400,900,20,TPD_BUTTON_HEIGH}}
-
-/*********************Custom Define end*************************************************/
-
-#define TPD_NAME    "FTS"
-
-/* Pre-defined definition */
-#define TPD_TYPE_CAPACITIVE
-#define TPD_TYPE_RESISTIVE
-#define TPD_POWER_SOURCE         
-#define TPD_I2C_NUMBER           		0
-#define TPD_WAKEUP_TRIAL         		60
-#define TPD_WAKEUP_DELAY         		100
-
-#define TPD_VELOCITY_CUSTOM_X 			15
-#define TPD_VELOCITY_CUSTOM_Y 			20
-
-#define CFG_MAX_TOUCH_POINTS	5
-#define MT_MAX_TOUCH_POINTS	10
-#define FT_MAX_ID	0x0F
-#define FT_TOUCH_STEP	6
-#define FT_FACE_DETECT_POS		1
-#define FT_TOUCH_X_H_POS		3
-#define FT_TOUCH_X_L_POS		4
-#define FT_TOUCH_Y_H_POS		5
-#define FT_TOUCH_Y_L_POS		6
-#define FT_TOUCH_EVENT_POS		3
-#define FT_TOUCH_ID_POS			5
-
-#define POINT_READ_BUF	(3 + FT_TOUCH_STEP * CFG_MAX_TOUCH_POINTS)
-
-
-#define TPD_DELAY                		(2*HZ/100)
-#define TPD_RES_X                		720
-#define TPD_RES_Y                		1280
-#define TPD_CALIBRATION_MATRIX  		{962,0,0,0,1600,0,0,0};
-
-//#define TPD_HAVE_CALIBRATION
-//#define TPD_HAVE_TREMBLE_ELIMINATION
-
-//#define TPD_CLOSE_POWER_IN_SLEEP
-
-
-/******************************************************************************/
-/*Chip Device Type*/
-#define IC_FT5X06						0	/*x=2,3,4*/
-#define IC_FT5606						1	/*ft5506/FT5606/FT5816*/
-#define IC_FT5316						2	/*ft5x16*/
-#define IC_FT6208						3  	/*ft6208*/
-#define IC_FT6x06     					4	/*ft6206/FT6306*/
-#define IC_FT5x06i     					5	/*ft5306i*/
-#define IC_FT5x36     					6	/*ft5336/ft5436/FT5436i*/
-
-
-
-/*register address*/
-#define FTS_REG_CHIP_ID				0xA3    //chip ID 
-#define FTS_REG_FW_VER				0xA6   //FW  version 
-#define FTS_REG_VENDOR_ID			0xA8   // TP vendor ID 
-#define FTS_REG_POINT_RATE			0x88   //report rate	
-
-
-#define TPD_MAX_POINTS_2                        2
-#define TPD_MAX_POINTS_5                        5
-#define TPD_MAXPOINTS_10                        10
-#define AUTO_CLB_NEED                           1
-#define AUTO_CLB_NONEED                         0
-
-
-#define FTS_DBG
-#ifdef FTS_DBG
-#define DBG(fmt, args...) 				printk("[FTS]" fmt, ## args)
-#else
-#define DBG(fmt, args...) 				do{}while(0)
-#endif
-/**************************add by yangjuwei*******************************/
-#define RGK_SAMPLE_VERSION 0x11
-#define MODULE_MAX_LEN 40
-#define MODULE_ID0 0x71
-#define MODULE_ID1 0x72
-#define MODULE_ID2 0x73
-#define MODULE_ID3 0x74
-#define MODULE_ID4 0x75
-static char tp_modules_name[][MODULE_MAX_LEN] ={
-	[0]="unkown",
-	[1]="HeLiTai",
-	[2]="DiJin",
-	[3]="unkown",
-	[4]="unkown",
-	[5]="unkown",
-	[6]="unkown",
-	[7]="unkown",
-	[8]="unkown",
-};
-//#define FTS_GESTRUE
-//#define TPD_AUTO_UPGRADE				//if need upgrade CTP FW when POWER ON,pls enable this MACRO
-#ifdef FTS_GESTRUE
-#define RGK_TP_GESTURE_ORBIT
-#endif
-
-#define USB_CHARGE_DETECT
-#endif /* TOUCHPANEL_H__ */
diff --git a/drivers/misc/mediatek/flashlight/src/mt6735/constant_flashlight/Makefile b/drivers/misc/mediatek/flashlight/src/mt6735/constant_flashlight/Makefile
old mode 100755
new mode 100644
index 6069cfe..6479c58
--- a/drivers/misc/mediatek/flashlight/src/mt6735/constant_flashlight/Makefile
+++ b/drivers/misc/mediatek/flashlight/src/mt6735/constant_flashlight/Makefile
@@ -1,7 +1,10 @@
 #
 # Makefile for misc devices that really don't fit anywhere else.
 #
-
 include $(srctree)/drivers/misc/mediatek/Makefile.custom
 
 obj-y				+= leds_strobe.o
+
+ifeq ($(CONFIG_HCT_LED_SGM3785),y)
+obj-y += sgm3785_drv.o
+endif
diff --git a/drivers/misc/mediatek/flashlight/src/mt6735/constant_flashlight/leds_strobe.c b/drivers/misc/mediatek/flashlight/src/mt6735/constant_flashlight/leds_strobe.c
index 7fbb62d..b47a12c 100644
--- a/drivers/misc/mediatek/flashlight/src/mt6735/constant_flashlight/leds_strobe.c
+++ b/drivers/misc/mediatek/flashlight/src/mt6735/constant_flashlight/leds_strobe.c
@@ -105,22 +105,34 @@ extern void sgm3785_FL_Enable(int duty);
 #endif
 //=========================
 
-//#define GPIO_CAMERA_FLASH_EN_PIN GPIO44
-//#define GPIO_CAMERA_FLASH_MODE_PIN GPIO43
+
 int FL_Enable(void)
 {
-
-#define FLASH_GPIO (43)
-mt_set_gpio_mode(FLASH_GPIO, 0);
-mt_set_gpio_dir(FLASH_GPIO, GPIO_DIR_OUT);
-mt_set_gpio_out(FLASH_GPIO, GPIO_OUT_ONE);
-/*
+	int i;
+#if defined(CONFIG_HCT_LED_SGM3785)
+	sgm3785_FL_Enable(g_duty);		
+#else
 #if defined(GPIO_CAMERA_FLASH_EN_PIN)
 	if(mt_set_gpio_mode(GPIO_CAMERA_FLASH_EN_PIN,GPIO_MODE_00)){PK_DBG("[constant_flashlight] set enf gpio mode failed!! \n");}
 	if(mt_set_gpio_mode(GPIO_CAMERA_FLASH_MODE_PIN,GPIO_MODE_00)){PK_DBG("[constant_flashlight] set enf gpio mode failed!! \n");}
 	if(mt_set_gpio_dir(GPIO_CAMERA_FLASH_EN_PIN,GPIO_DIR_OUT)){PK_DBG("[constant_flashlight] set  enf gpio dir failed!! \n");}
 	if(mt_set_gpio_dir(GPIO_CAMERA_FLASH_MODE_PIN,GPIO_DIR_OUT)){PK_DBG("[constant_flashlight] set  enf gpio dir failed!! \n");}
+	#if defined(CONFIG_AW_FLASH_LED_LONGTIME_SUPPORT)
+        mt_set_gpio_out(GPIO_CAMERA_FLASH_EN_PIN,GPIO_OUT_ZERO);
+	mdelay(1);
+
+	
+	for(i=1;i<=9;i++)
+	{	
+		mt_set_gpio_out(GPIO_CAMERA_FLASH_EN_PIN,GPIO_OUT_ZERO);
+		udelay(2);
+		mt_set_gpio_out(GPIO_CAMERA_FLASH_EN_PIN,GPIO_OUT_ONE);
+		udelay(2);
+
+	}
+	#else
 	mt_set_gpio_out(GPIO_CAMERA_FLASH_EN_PIN,GPIO_OUT_ONE);
+	#endif
 
 	if(g_duty > 0)//flashlight mode
 		mt_set_gpio_out(GPIO_CAMERA_FLASH_MODE_PIN,GPIO_OUT_ONE);
@@ -134,7 +146,7 @@ mt_set_gpio_out(FLASH_GPIO, GPIO_OUT_ONE);
 	if(mt_set_gpio_dir(GPIO_CAMERA_FLASH_EXT1_PIN,GPIO_DIR_OUT)){PK_DBG("[constant_flashlight] set  enf gpio dir failed!! \n");}
 	mt_set_gpio_out(GPIO_CAMERA_FLASH_EXT1_PIN,GPIO_OUT_ONE);
 #endif
-*/
+
     PK_DBG(" FL_Enable line=%d\n",__LINE__);
     return 0;
 }
@@ -143,8 +155,6 @@ mt_set_gpio_out(FLASH_GPIO, GPIO_OUT_ONE);
 
 int FL_Disable(void)
 {
-mt_set_gpio_out(FLASH_GPIO, GPIO_OUT_ZERO);
-/*
 #if defined(CONFIG_HCT_LED_SGM3785)
 	sgm3785_FL_Disable();
 #else
@@ -163,7 +173,7 @@ mt_set_gpio_out(FLASH_GPIO, GPIO_OUT_ZERO);
 	if(mt_set_gpio_dir(GPIO_CAMERA_FLASH_EXT1_PIN,GPIO_DIR_OUT)){PK_DBG("[constant_flashlight] set  enf gpio dir failed!! \n");}
 	mt_set_gpio_out(GPIO_CAMERA_FLASH_EXT1_PIN,GPIO_OUT_ZERO);
 #endif
-*/
+
 	PK_DBG(" FL_Disable line=%d\n",__LINE__);
     return 0;
 }
@@ -221,13 +231,14 @@ static struct hrtimer g_timeOutTimer;
 void timerInit(void)
 {
 	static int init_flag;
-	if (init_flag==0){
+	if (init_flag==0)
+	{
 		init_flag=1;
-  INIT_WORK(&workTimeOut, work_timeOutFunc);
-	g_timeOutTimeMs=1000; //1s
-	hrtimer_init( &g_timeOutTimer, CLOCK_MONOTONIC, HRTIMER_MODE_REL );
-	g_timeOutTimer.function=ledTimeOutCallback;
-}
+	 	INIT_WORK(&workTimeOut, work_timeOutFunc);
+		g_timeOutTimeMs=1000; //1s
+		hrtimer_init( &g_timeOutTimer, CLOCK_MONOTONIC, HRTIMER_MODE_REL );
+		g_timeOutTimer.function=ledTimeOutCallback;
+	}
 }
 
 
@@ -266,7 +277,6 @@ static int constant_flashlight_ioctl(unsigned int cmd, unsigned long arg)
     		PK_DBG("FLASHLIGHT_ONOFF: %d\n",(int)arg);
     		if(arg==1)
     		{
-
     		    int s;
     		    int ms;
     		    if(g_timeOutTimeMs>1000)
diff --git a/drivers/misc/mediatek/flashlight/src/mt6735/constant_flashlight/sgm3785_drv.c b/drivers/misc/mediatek/flashlight/src/mt6735/constant_flashlight/sgm3785_drv.c
new file mode 100644
index 0000000..4d07717
--- /dev/null
+++ b/drivers/misc/mediatek/flashlight/src/mt6735/constant_flashlight/sgm3785_drv.c
@@ -0,0 +1,151 @@
+/************************************************************************************************
+*							*file name : sgm3785_drv.c
+*							*Version : v1.0
+*							*Author : erick
+*							*Date : 2015.4.16
+*************************************************************************************************/
+#include <sgm3785_drv.h>
+
+static kal_bool active_flag = KAL_FALSE;
+
+struct pwm_spec_config sgm3785_config = {
+    .pwm_no = PWM_NO,
+    .mode = PWM_MODE_OLD,
+    .clk_div = CLK_DIV32,//CLK_DIV16: 147.7kHz    CLK_DIV32: 73.8kHz
+    .clk_src = PWM_CLK_OLD_MODE_BLOCK,
+    .pmic_pad = false,
+    .PWM_MODE_OLD_REGS.IDLE_VALUE = IDLE_FALSE,
+    .PWM_MODE_OLD_REGS.GUARD_VALUE = GUARD_FALSE,
+    .PWM_MODE_OLD_REGS.GDURATION = 0,
+    .PWM_MODE_OLD_REGS.WAVE_NUM = 0,
+    .PWM_MODE_OLD_REGS.DATA_WIDTH = 10,
+    .PWM_MODE_OLD_REGS.THRESH = 5,
+};
+
+/*flash mode
+ENF: 1                           _____________
+         0 ____________|       660ms       |____
+ENM:1    _      _     _     _      _     _     _      _     _
+         0 _| |_| |_| |_| |_| |_| |_| |_| |_| |_
+*/
+static S32 sgm3785_set_flash_mode(U16 duty)
+{	
+	S32 ret;
+
+	if(active_flag == KAL_TRUE)
+		return;
+
+	if(mt_set_gpio_mode(ENF,GPIO_MODE_00)){sgm3138_dbg("[sgm3785] set enf gpio mode failed!! \n");}
+	if(mt_set_gpio_dir(ENF,GPIO_DIR_OUT)){sgm3138_dbg("[sgm3785] set  enf gpio dir failed!! \n");}
+	mt_set_gpio_out(ENF,GPIO_OUT_ZERO);
+
+	if(mt_set_gpio_mode(ENM,ENM_PWM_MODE)){sgm3138_dbg("[sgm3785] set enf gpio mode failed!! \n");}
+	sgm3785_config.PWM_MODE_OLD_REGS.THRESH = duty;
+	ret = pwm_set_spec_config(&sgm3785_config);	
+
+	mt_set_gpio_out(ENF,GPIO_OUT_ONE);	
+
+	active_flag = KAL_TRUE;
+	return ret;
+}
+
+/*movie/torch mode
+ENF: 1
+          0 _____________________________________
+ENM:1	 ______	     _     _      _     _      _	
+         0 _| >5ms |_| |_| |_| |_| |_| |________
+*/	
+static S32 sgm3785_set_torch_mode(U16 duty)
+{
+	S32 ret;
+
+	if(active_flag == KAL_TRUE)
+		return;
+
+	if(mt_set_gpio_mode(ENF,GPIO_MODE_00)){sgm3138_dbg("[sgm3785] set enf gpio mode failed!! \n");}
+	if(mt_set_gpio_dir(ENF,GPIO_DIR_OUT)){sgm3138_dbg("[sgm3785] set  enf gpio dir failed!! \n");}
+	mt_set_gpio_out(ENF,GPIO_OUT_ZERO);
+
+	if(mt_set_gpio_mode(ENM,GPIO_MODE_00)){sgm3138_dbg("[sgm3785] set enf gpio mode failed!! \n");}
+	if(mt_set_gpio_dir(ENM,GPIO_DIR_OUT)){sgm3138_dbg("[sgm3785] set  enf gpio dir failed!! \n");}
+	mt_set_gpio_out(ENM,GPIO_OUT_ZERO);
+	mdelay(1);
+	mt_set_gpio_out(ENM,GPIO_OUT_ONE);
+	mdelay(6);
+
+	if(mt_set_gpio_mode(ENM,ENM_PWM_MODE)){sgm3138_dbg("[sgm3785] set enf gpio mode failed!! \n");}
+	sgm3785_config.PWM_MODE_OLD_REGS.THRESH = duty;
+	ret = pwm_set_spec_config(&sgm3785_config);
+
+	active_flag = KAL_TRUE;
+	return ret;
+}
+
+static S32 sgm3785_shutdown(void)
+{
+	if(active_flag == KAL_FALSE)
+		return;
+
+	mt_pwm_disable(PWM_NO, false);
+
+	if(mt_set_gpio_mode(ENF,GPIO_MODE_00)){sgm3138_dbg("[sgm3785] set enf gpio mode failed!! \n");}
+	if(mt_set_gpio_mode(ENM,GPIO_MODE_00)){sgm3138_dbg("[sgm3785] set enf gpio mode failed!! \n");}
+	if(mt_set_gpio_dir(ENF,GPIO_DIR_OUT)){sgm3138_dbg("[sgm3785] set  enf gpio dir failed!! \n");}
+	if(mt_set_gpio_dir(ENM,GPIO_DIR_OUT)){sgm3138_dbg("[sgm3785] set  enf gpio dir failed!! \n");}
+	mt_set_gpio_out(ENF,GPIO_OUT_ZERO);
+	mt_set_gpio_out(ENM,GPIO_OUT_ZERO);
+	mdelay(5);
+
+	active_flag = KAL_FALSE;
+}
+
+int sgm3785_ioctr(U16 mode, U16 duty)
+{
+	sgm3138_dbg("[sgm3785] mode %d , duty %d\n", mode, duty);
+
+	if(mode < MODE_MIN || mode >= MODE_MAX)
+	{
+		sgm3138_dbg("[sgm3785] mode error!!!\n");
+		return 1;
+	}
+	
+	if(duty < 0 || duty > 10)
+	{
+		sgm3138_dbg("[sgm3785] duty error!!!\n");
+		return 1;
+	}
+
+	switch(mode){
+		case FLASH_M:
+			sgm3785_set_flash_mode(duty);
+			break;
+
+		case TORCH_M:
+			sgm3785_set_torch_mode(duty);
+			break;
+
+		case PWD_M:
+			sgm3785_shutdown();
+			break;
+
+		default:
+			sgm3138_dbg("[sgm3785] error ioctr!!!\n");
+			break;
+	}
+
+	return 0;
+}
+
+void sgm3785_FL_Enable(int duty)
+{
+	if(duty > 0)//flashlight mode
+		sgm3785_ioctr(FLASH_M, F_DUTY);
+	else //torch mode
+		sgm3785_ioctr(TORCH_M, T_DUTY);
+}
+
+void sgm3785_FL_Disable(void)
+{
+	sgm3785_ioctr(PWD_M, 0);
+}
+
diff --git a/drivers/misc/mediatek/flashlight/src/mt6735/constant_flashlight/sgm3785_drv.h b/drivers/misc/mediatek/flashlight/src/mt6735/constant_flashlight/sgm3785_drv.h
new file mode 100644
index 0000000..7defeaa
--- /dev/null
+++ b/drivers/misc/mediatek/flashlight/src/mt6735/constant_flashlight/sgm3785_drv.h
@@ -0,0 +1,58 @@
+/************************************************************************************************
+*							*file name : sgm3785_drv.h
+*							*Version : v1.0
+*							*Author : erick
+*							*Date : 2015.4.16
+*************************************************************************************************/
+#ifndef _SGM3785_DRV_H_
+#define _SGM3785_DRV_H_
+#include <linux/delay.h>
+#include <linux/xlog.h>
+#include <mach/mt_typedefs.h>
+#include <mach/mt_pwm.h>
+#include <mach/mt_pwm_hal.h>
+#include <mach/mt_gpio.h>
+#include <cust_gpio_usage.h>
+
+#if defined(CONFIG_T925_PROJ)
+	#define PWM_NO PWM3   	//HWpwm0 --> SWpwm1
+	#define F_DUTY 10		// 0,1,2,3,4,5,6,7,8,9,10
+	#define T_DUTY 6  		// 0,1,2,3,4,5,6,7,8,9,10
+#elif defined(CONFIG_T875_PROJ)
+	#define PWM_NO PWM3   	//HWpwm0 --> SWpwm1
+	#define F_DUTY 8		// 0,1,2,3,4,5,6,7,8,9,10
+	#define T_DUTY 6  		// 0,1,2,3,4,5,6,7,8,9,10
+#elif defined(CONFIG_T87_PROJ)
+	#define PWM_NO PWM3   	//HWpwm0 --> SWpwm1
+	#define F_DUTY 7		// 0,1,2,3,4,5,6,7,8,9,10
+	#define T_DUTY 6  		// 0,1,2,3,4,5,6,7,8,9,10
+#elif defined(CONFIG_T991_PROJ)
+	#define PWM_NO PWM4   	//HWpwm0 --> SWpwm1
+	#define F_DUTY 8		// 0,1,2,3,4,5,6,7,8,9,10
+	#define T_DUTY 10  		// 0,1,2,3,4,5,6,7,8,9,10
+#else
+	#define PWM_NO PWM4   	//HWpwm0 --> SWpwm1
+	#define F_DUTY 9		// 0,1,2,3,4,5,6,7,8,9,10
+	#define T_DUTY 8  		// 0,1,2,3,4,5,6,7,8,9,10
+#endif
+
+#define ENF		GPIO_CAMERA_FLASH_MODE_PIN
+#define ENM		GPIO_CAMERA_FLASH_EN_PIN
+#define ENM_PWM_MODE	GPIO_CAMERA_FLASH_EN_PIN_M_PWM
+
+#define SGM3138_DEBUG
+#ifdef SGM3138_DEBUG
+#define sgm3138_dbg printk
+#else
+#define sgm3138_dbg //
+#endif
+
+enum SGM3785_MODE{
+	MODE_MIN = 0,
+	PWD_M = MODE_MIN,
+	FLASH_M,
+	TORCH_M,
+	MODE_MAX
+};
+
+#endif
diff --git a/drivers/misc/mediatek/mach/mt6735/X5PRO_6735m/dct/dct/codegen.dws b/drivers/misc/mediatek/mach/mt6735/X5PRO_6735m/dct/dct/codegen.dws
index 16fd6e4f463ec8365094cb96c68c4a8578747f46..acbd1f6773447f0a5be7728eeedc12deda39c2e7 100755
GIT binary patch
delta 107
zcmX^7obmN@#tqyolP|CdOx|F`x><o`NrIF(0|SGvi(!1Qr>|kWhkr<XfKRA<ysM{Q
h$Ye(eQ5`OzbbzA^Sil0vW?(?lV1%h*Gf(PvJ^-kV9cTam

delta 53
zcmaF;obm8;#tqyolOM3KO!hJ30Mi?cST`%MEJ>KW(NBD$1Iy&kDMFLQd_m03CaK%`
E06#?(6951J

diff --git a/drivers/misc/mediatek/mach/mt6735/X5PRO_6735m/dct/dct/cust_eint.dtsi b/drivers/misc/mediatek/mach/mt6735/X5PRO_6735m/dct/dct/cust_eint.dtsi
deleted file mode 100644
index 859879d..0000000
--- a/drivers/misc/mediatek/mach/mt6735/X5PRO_6735m/dct/dct/cust_eint.dtsi
+++ /dev/null
@@ -1,68 +0,0 @@
-/*
- * Generated by MTK SP Drv_CodeGen Version 03.13.6  for MT6735M. Copyright MediaTek Inc. (C) 2013.
- * Mon Apr 25 22:47:33 2016
- * Do Not Modify the File.
- */
-
-/*************************
- * EINT DTSI File
-*************************/
-
-&eintc {
-	IRQ_NFC@2 {
-		compatible = "mediatek, IRQ_NFC-eint";
-		interrupt-parent = <&eintc>;
-		interrupts = <2 4>;
-		debounce = <2 0>;
-	};
-
-	MSDC1_INS@5 {
-		compatible = "mediatek, MSDC1_INS-eint";
-		interrupt-parent = <&eintc>;
-		interrupts = <5 8>;
-		debounce = <5 1000>;
-	};
-
-	ACCDET@6 {
-		compatible = "mediatek, ACCDET-eint";
-		interrupt-parent = <&eintc>;
-		interrupts = <6 8>;
-		debounce = <6 256000>;
-	};
-
-	TOUCH_PANEL@10 {
-		compatible = "mediatek, TOUCH_PANEL-eint";
-		interrupt-parent = <&eintc>;
-		interrupts = <10 2>;
-		debounce = <10 0>;
-	};
-
-	ALS@65 {
-		compatible = "mediatek, ALS-eint";
-		interrupt-parent = <&eintc>;
-		interrupts = <65 8>;
-		debounce = <65 0>;
-	};
-
-	GSE_1@66 {
-		compatible = "mediatek, GSE_1-eint";
-		interrupt-parent = <&eintc>;
-		interrupts = <66 8>;
-		debounce = <66 0>;
-	};
-
-	GYRO@67 {
-		compatible = "mediatek, GYRO-eint";
-		interrupt-parent = <&eintc>;
-		interrupts = <67 8>;
-		debounce = <67 0>;
-	};
-
-	EXT_BUCK_OC@78 {
-		compatible = "mediatek, EXT_BUCK_OC-eint";
-		interrupt-parent = <&eintc>;
-		interrupts = <78 4>;
-		debounce = <78 0>;
-	};
-
-};
diff --git a/drivers/misc/mediatek/mach/mt6735/X5PRO_6735m/dct/dct/cust_i2c.dtsi b/drivers/misc/mediatek/mach/mt6735/X5PRO_6735m/dct/dct/cust_i2c.dtsi
deleted file mode 100644
index 5c45dcf..0000000
--- a/drivers/misc/mediatek/mach/mt6735/X5PRO_6735m/dct/dct/cust_i2c.dtsi
+++ /dev/null
@@ -1,82 +0,0 @@
-/*
- * Generated by MTK SP Drv_CodeGen Version 03.13.6  for MT6735M. Copyright MediaTek Inc. (C) 2013.
- * Mon Apr 25 22:47:34 2016
- * Do Not Modify the File.
- */
-
-/*************************
- * I2C DTSI File
-*************************/
-
-&i2c0 {
-	CAMERA_MAIN@10 {
-		compatible = "mediatek,CAMERA_MAIN";
-		reg = <0x10>;
-	};
-
-	CAMERA_MAIN_AF@0C {
-		compatible = "mediatek,CAMERA_MAIN_AF";
-		reg = <0x0C>;
-	};
-
-	CAMERA_SUB@3C {
-		compatible = "mediatek,CAMERA_SUB";
-		reg = <0x3C>;
-	};
-
-};
-
-&i2c1 {
-	CAP_TOUCH@5D {
-		compatible = "mediatek,CAP_TOUCH";
-		reg = <0x5D>;
-	};
-
-	I2C_LCD_BIAS@3E {
-		compatible = "mediatek,I2C_LCD_BIAS";
-		reg = <0x3E>;
-	};
-
-};
-
-&i2c2 {
-	MSENSOR@0D {
-		compatible = "mediatek,MSENSOR";
-		reg = <0x0D>;
-	};
-
-	GYRO@68 {
-		compatible = "mediatek,GYRO";
-		reg = <0x68>;
-	};
-
-	GSENSOR@4C {
-		compatible = "mediatek,GSENSOR";
-		reg = <0x4C>;
-	};
-
-	ALSPS@60 {
-		compatible = "mediatek,ALSPS";
-		reg = <0x60>;
-	};
-
-	NFC@28 {
-		compatible = "mediatek,NFC";
-		reg = <0x28>;
-	};
-
-	STROBE_MAIN@63 {
-		compatible = "mediatek,STROBE_MAIN";
-		reg = <0x63>;
-	};
-
-};
-
-&i2c3 {
-	EXT_BUCK@6B {
-		compatible = "mediatek,EXT_BUCK";
-		reg = <0x6B>;
-	};
-
-};
-
diff --git a/drivers/misc/mediatek/mach/mt6735/X5PRO_6735m/touchpanel/FT6206_X2605/tpd_custom_fts.h b/drivers/misc/mediatek/mach/mt6735/X5PRO_6735m/touchpanel/FT6206_X2605/tpd_custom_fts.h
new file mode 100755
index 0000000..d9960f0
--- /dev/null
+++ b/drivers/misc/mediatek/mach/mt6735/X5PRO_6735m/touchpanel/FT6206_X2605/tpd_custom_fts.h
@@ -0,0 +1,196 @@
+#ifndef TOUCHPANEL_H__
+#define TOUCHPANEL_H__
+
+#include <linux/hrtimer.h>
+#include <linux/string.h>
+#include <linux/vmalloc.h>
+//#include <linux/io.h>
+
+#include <linux/init.h>
+#include <linux/module.h>
+#include <linux/delay.h>
+#include <linux/i2c.h>
+#include <linux/input.h>
+#include <linux/slab.h>
+#include <linux/gpio.h>
+#include <linux/sched.h>
+#include <linux/kthread.h>
+#include <linux/bitops.h>
+#include <linux/kernel.h>
+#include <linux/delay.h>
+#include <linux/byteorder/generic.h>
+#ifdef CONFIG_HAS_EARLYSUSPEND
+#include <linux/earlysuspend.h>
+#endif
+#include <linux/interrupt.h>
+#include <linux/time.h>
+#include <linux/rtpm_prio.h>
+
+#include <linux/proc_fs.h>
+#include <asm/uaccess.h>
+
+#include <mach/mt_pm_ldo.h>
+#include <mach/mt_typedefs.h>
+#include <mach/mt_boot.h>
+
+#include <cust_eint.h>
+#include <linux/jiffies.h>
+
+#include <pmic_drv.h>
+//#include <cust_i2c.h>
+
+struct Upgrade_Info {
+        u8 CHIP_ID;
+        u8 FTS_NAME[20];
+        u8 TPD_MAX_POINTS;
+        u8 AUTO_CLB;
+	u16 delay_aa;		/*delay of write FT_UPGRADE_AA */
+	u16 delay_55;		/*delay of write FT_UPGRADE_55 */
+	u8 upgrade_id_1;	/*upgrade id 1 */
+	u8 upgrade_id_2;	/*upgrade id 2 */
+	u16 delay_readid;	/*delay of read id */
+	u16 delay_earse_flash; /*delay of earse flash*/
+};
+
+extern struct Upgrade_Info fts_updateinfo_curr;
+
+extern int fts_i2c_Read(struct i2c_client *client, char *writebuf,int writelen, char *readbuf, int readlen);
+extern int fts_i2c_Write(struct i2c_client *client, char *writebuf, int writelen);
+extern int fts_write_reg(struct i2c_client *client, u8 regaddr, u8 regvalue);
+extern int fts_read_reg(struct i2c_client *client, u8 regaddr, u8 *regvalue);
+extern void focaltech_get_upgrade_array(void);
+extern void fts_reset_tp(int HighOrLow);
+
+/**********************Custom define begin**********************************************/
+
+
+#define TPD_POWER_SOURCE_CUSTOM         MT6328_POWER_LDO_VGP1
+#define IIC_PORT                   1	//MT6572: 1  MT6589:0 , Based on the I2C index you choose for TPM
+
+//#define FTS_GESTRUE                                  // if need the gesture funtion,enable this MACRO
+//#define TPD_PROXIMITY					// if need the PS funtion,enable this MACRO
+
+/*
+///// ***** virtual key  definition  ***** /////
+
+Below are the recommend  virtual key definition for different resolution TPM. 
+
+HVGA  320x480    2key ( (80,530);(240,530) )           3key  ( (80,530);(160;530);(240,530) )          4key   ( (40,530);(120;530);(200,530);(280,530)  ) 
+WVGA  480x800   2key ( (80,900);(400,900) )           3key  ( (80,900);(240,900);(400,900) )          4key   ( (60,900);(180;900);(300,900);(420,900)  ) 
+FWVGA 480x854  2key ( (80,900);(400,900) )           3key  ( (80,900);(240,900);(400,900) )          4key   ( (60,900);(180;900);(300,900);(420,900)  ) 
+QHD  540x960     2key ( (90,1080);(450,1080) )           3key  ( (90,1080);(270,1080);(450,1080) )          4key   ( (90,1080);(180;1080);(360,1080);(450,1080)  ) 
+HD    1280x720    2key ( (120,1350);(600,1350) )           3key  ( (120,1350);(360,1350);(600,1350) )          4key   ( (120,1080);(240;1080);(480,1080);(600,1080)  )
+FHD   1920x1080  2key ( (160,2100);(920,2100) )           3key  ( (160,2100);(540,2100);(920,2100) )          4key   ( (160,2100);(320;1080);(600,1080);(920,2100)  )
+*/
+#define TPD_HAVE_BUTTON	// if have virtual key,need define the MACRO
+#define TPD_BUTTON_HEIGH        (40)  //100
+
+#define TPD_KEY_COUNT           4
+#define TPD_KEYS                { KEY_MENU, KEY_BACK, KEY_SEARCH, KEY_HOMEPAGE }
+
+#define TPD_KEYS_DIM            {\
+	{160,	2000,	60,	TPD_BUTTON_HEIGH},\
+	{950,	2000,	60,	TPD_BUTTON_HEIGH},\
+	{200,	2000,	60,	TPD_BUTTON_HEIGH},\
+	{540,	2000,	60,	TPD_BUTTON_HEIGH}\
+}
+/*********************Custom Define end*************************************************/
+
+#define TPD_NAME    "FTS"
+
+/* Pre-defined definition */
+#define TPD_TYPE_CAPACITIVE
+#define TPD_TYPE_RESISTIVE
+#define TPD_POWER_SOURCE         
+#define TPD_I2C_NUMBER           		1
+#define TPD_WAKEUP_TRIAL         		60
+#define TPD_WAKEUP_DELAY         		100
+
+#define TPD_VELOCITY_CUSTOM_X 			15
+#define TPD_VELOCITY_CUSTOM_Y 			20
+
+#define CFG_MAX_TOUCH_POINTS	5
+#define MT_MAX_TOUCH_POINTS	10
+#define FT_MAX_ID	0x0F
+#define FT_TOUCH_STEP	6
+#define FT_FACE_DETECT_POS		1
+#define FT_TOUCH_X_H_POS		3
+#define FT_TOUCH_X_L_POS		4
+#define FT_TOUCH_Y_H_POS		5
+#define FT_TOUCH_Y_L_POS		6
+#define FT_TOUCH_EVENT_POS		3
+#define FT_TOUCH_ID_POS			5
+
+#define POINT_READ_BUF	(3 + FT_TOUCH_STEP * CFG_MAX_TOUCH_POINTS)
+
+
+#define TPD_DELAY                		(2*HZ/100)
+#define TPD_RES_X                		720
+#define TPD_RES_Y                		1280
+#define TPD_CALIBRATION_MATRIX  		{962,0,0,0,1600,0,0,0};
+
+//#define TPD_HAVE_CALIBRATION
+//#define TPD_HAVE_TREMBLE_ELIMINATION
+
+//#define TPD_CLOSE_POWER_IN_SLEEP
+
+
+/******************************************************************************/
+/*Chip Device Type*/
+#define IC_FT5X06						0	/*x=2,3,4*/
+#define IC_FT5606						1	/*ft5506/FT5606/FT5816*/
+#define IC_FT5316						2	/*ft5x16*/
+#define IC_FT6208						3  	/*ft6208*/
+#define IC_FT6x06     					4	/*ft6206/FT6306*/
+#define IC_FT5x06i     					5	/*ft5306i*/
+#define IC_FT5x36     					6	/*ft5336/ft5436/FT5436i*/
+
+
+
+/*register address*/
+#define FTS_REG_CHIP_ID				0xA3    //chip ID 
+#define FTS_REG_FW_VER				0xA6   //FW  version 
+#define FTS_REG_VENDOR_ID			0xA8   // TP vendor ID 
+#define FTS_REG_POINT_RATE			0x88   //report rate	
+
+
+#define TPD_MAX_POINTS_2                        2
+#define TPD_MAX_POINTS_5                        5
+#define TPD_MAXPOINTS_10                        10
+#define AUTO_CLB_NEED                           1
+#define AUTO_CLB_NONEED                         0
+
+
+#define FTS_DBG
+#ifdef FTS_DBG
+#define DBG(fmt, args...) 				printk("[FTS]" fmt, ## args)
+#else
+#define DBG(fmt, args...) 				do{}while(0)
+#endif
+/**************************add by yangjuwei*******************************/
+#define RGK_SAMPLE_VERSION 0x11
+#define MODULE_MAX_LEN 40
+#define MODULE_ID0 0x71
+#define MODULE_ID1 0x72
+#define MODULE_ID2 0x73
+#define MODULE_ID3 0x74
+#define MODULE_ID4 0x75
+static char tp_modules_name[][MODULE_MAX_LEN] ={
+	[0]="unkown",
+	[1]="HeLiTai",
+	[2]="DiJin",
+	[3]="unkown",
+	[4]="unkown",
+	[5]="unkown",
+	[6]="unkown",
+	[7]="unkown",
+	[8]="unkown",
+};
+//#define FTS_GESTRUE
+//#define TPD_AUTO_UPGRADE				//if need upgrade CTP FW when POWER ON,pls enable this MACRO
+#ifdef FTS_GESTRUE
+#define RGK_TP_GESTURE_ORBIT
+#endif
+
+#define USB_CHARGE_DETECT
+#endif /* TOUCHPANEL_H__ */
diff --git a/drivers/misc/mediatek/mach/mt6735/benefit_m7/touchpanel/FT6206_X2605/tpd_custom_fts.h b/drivers/misc/mediatek/mach/mt6735/benefit_m7/touchpanel/FT6206_X2605/tpd_custom_fts.h
new file mode 100755
index 0000000..f30512c
--- /dev/null
+++ b/drivers/misc/mediatek/mach/mt6735/benefit_m7/touchpanel/FT6206_X2605/tpd_custom_fts.h
@@ -0,0 +1,190 @@
+#ifndef TOUCHPANEL_H__
+#define TOUCHPANEL_H__
+
+#include <linux/hrtimer.h>
+#include <linux/string.h>
+#include <linux/vmalloc.h>
+//#include <linux/io.h>
+
+#include <linux/init.h>
+#include <linux/module.h>
+#include <linux/delay.h>
+#include <linux/i2c.h>
+#include <linux/input.h>
+#include <linux/slab.h>
+#include <linux/gpio.h>
+#include <linux/sched.h>
+#include <linux/kthread.h>
+#include <linux/bitops.h>
+#include <linux/kernel.h>
+#include <linux/delay.h>
+#include <linux/byteorder/generic.h>
+#ifdef CONFIG_HAS_EARLYSUSPEND
+#include <linux/earlysuspend.h>
+#endif
+#include <linux/interrupt.h>
+#include <linux/time.h>
+#include <linux/rtpm_prio.h>
+
+#include <linux/proc_fs.h>
+#include <asm/uaccess.h>
+
+#include <mach/mt_pm_ldo.h>
+#include <mach/mt_typedefs.h>
+#include <mach/mt_boot.h>
+
+#include <cust_eint.h>
+#include <linux/jiffies.h>
+
+#include <pmic_drv.h>
+//#include <cust_i2c.h>
+
+struct Upgrade_Info {
+        u8 CHIP_ID;
+        u8 FTS_NAME[20];
+        u8 TPD_MAX_POINTS;
+        u8 AUTO_CLB;
+	u16 delay_aa;		/*delay of write FT_UPGRADE_AA */
+	u16 delay_55;		/*delay of write FT_UPGRADE_55 */
+	u8 upgrade_id_1;	/*upgrade id 1 */
+	u8 upgrade_id_2;	/*upgrade id 2 */
+	u16 delay_readid;	/*delay of read id */
+	u16 delay_earse_flash; /*delay of earse flash*/
+};
+
+extern struct Upgrade_Info fts_updateinfo_curr;
+
+extern int fts_i2c_Read(struct i2c_client *client, char *writebuf,int writelen, char *readbuf, int readlen);
+extern int fts_i2c_Write(struct i2c_client *client, char *writebuf, int writelen);
+extern int fts_write_reg(struct i2c_client *client, u8 regaddr, u8 regvalue);
+extern int fts_read_reg(struct i2c_client *client, u8 regaddr, u8 *regvalue);
+extern void focaltech_get_upgrade_array(void);
+extern void fts_reset_tp(int HighOrLow);
+
+/**********************Custom define begin**********************************************/
+
+
+#define TPD_POWER_SOURCE_CUSTOM         MT6328_POWER_LDO_VGP1
+#define IIC_PORT                   1	//MT6572: 1  MT6589:0 , Based on the I2C index you choose for TPM
+
+//#define FTS_GESTRUE                                  // if need the gesture funtion,enable this MACRO
+//#define TPD_PROXIMITY					// if need the PS funtion,enable this MACRO
+
+/*
+///// ***** virtual key  definition  ***** /////
+
+Below are the recommend  virtual key definition for different resolution TPM. 
+
+HVGA  320x480    2key ( (80,530);(240,530) )           3key  ( (80,530);(160;530);(240,530) )          4key   ( (40,530);(120;530);(200,530);(280,530)  ) 
+WVGA  480x800   2key ( (80,900);(400,900) )           3key  ( (80,900);(240,900);(400,900) )          4key   ( (60,900);(180;900);(300,900);(420,900)  ) 
+FWVGA 480x854  2key ( (80,900);(400,900) )           3key  ( (80,900);(240,900);(400,900) )          4key   ( (60,900);(180;900);(300,900);(420,900)  ) 
+QHD  540x960     2key ( (90,1080);(450,1080) )           3key  ( (90,1080);(270,1080);(450,1080) )          4key   ( (90,1080);(180;1080);(360,1080);(450,1080)  ) 
+HD    1280x720    2key ( (120,1350);(600,1350) )           3key  ( (120,1350);(360,1350);(600,1350) )          4key   ( (120,1080);(240;1080);(480,1080);(600,1080)  )
+FHD   1920x1080  2key ( (160,2100);(920,2100) )           3key  ( (160,2100);(540,2100);(920,2100) )          4key   ( (160,2100);(320;1080);(600,1080);(920,2100)  )
+*/
+#define TPD_HAVE_BUTTON	// if have virtual key,need define the MACRO
+#define TPD_BUTTON_HEIGH        (40)  //100
+#define TPD_KEY_COUNT           3    //  4
+#define TPD_KEYS                { KEY_BACK, KEY_HOMEPAGE, KEY_MENU}
+#define TPD_KEYS_DIM            	{{80,900,20,TPD_BUTTON_HEIGH}, {240,900,20,TPD_BUTTON_HEIGH}, {400,900,20,TPD_BUTTON_HEIGH}}
+
+/*********************Custom Define end*************************************************/
+
+#define TPD_NAME    "FTS"
+
+/* Pre-defined definition */
+#define TPD_TYPE_CAPACITIVE
+#define TPD_TYPE_RESISTIVE
+#define TPD_POWER_SOURCE         
+#define TPD_I2C_NUMBER           		0
+#define TPD_WAKEUP_TRIAL         		60
+#define TPD_WAKEUP_DELAY         		100
+
+#define TPD_VELOCITY_CUSTOM_X 			15
+#define TPD_VELOCITY_CUSTOM_Y 			20
+
+#define CFG_MAX_TOUCH_POINTS	5
+#define MT_MAX_TOUCH_POINTS	10
+#define FT_MAX_ID	0x0F
+#define FT_TOUCH_STEP	6
+#define FT_FACE_DETECT_POS		1
+#define FT_TOUCH_X_H_POS		3
+#define FT_TOUCH_X_L_POS		4
+#define FT_TOUCH_Y_H_POS		5
+#define FT_TOUCH_Y_L_POS		6
+#define FT_TOUCH_EVENT_POS		3
+#define FT_TOUCH_ID_POS			5
+
+#define POINT_READ_BUF	(3 + FT_TOUCH_STEP * CFG_MAX_TOUCH_POINTS)
+
+
+#define TPD_DELAY                		(2*HZ/100)
+#define TPD_RES_X                		720
+#define TPD_RES_Y                		1280
+#define TPD_CALIBRATION_MATRIX  		{962,0,0,0,1600,0,0,0};
+
+//#define TPD_HAVE_CALIBRATION
+//#define TPD_HAVE_TREMBLE_ELIMINATION
+
+//#define TPD_CLOSE_POWER_IN_SLEEP
+
+
+/******************************************************************************/
+/*Chip Device Type*/
+#define IC_FT5X06						0	/*x=2,3,4*/
+#define IC_FT5606						1	/*ft5506/FT5606/FT5816*/
+#define IC_FT5316						2	/*ft5x16*/
+#define IC_FT6208						3  	/*ft6208*/
+#define IC_FT6x06     					4	/*ft6206/FT6306*/
+#define IC_FT5x06i     					5	/*ft5306i*/
+#define IC_FT5x36     					6	/*ft5336/ft5436/FT5436i*/
+
+
+
+/*register address*/
+#define FTS_REG_CHIP_ID				0xA3    //chip ID 
+#define FTS_REG_FW_VER				0xA6   //FW  version 
+#define FTS_REG_VENDOR_ID			0xA8   // TP vendor ID 
+#define FTS_REG_POINT_RATE			0x88   //report rate	
+
+
+#define TPD_MAX_POINTS_2                        2
+#define TPD_MAX_POINTS_5                        5
+#define TPD_MAXPOINTS_10                        10
+#define AUTO_CLB_NEED                           1
+#define AUTO_CLB_NONEED                         0
+
+
+#define FTS_DBG
+#ifdef FTS_DBG
+#define DBG(fmt, args...) 				printk("[FTS]" fmt, ## args)
+#else
+#define DBG(fmt, args...) 				do{}while(0)
+#endif
+/**************************add by yangjuwei*******************************/
+#define RGK_SAMPLE_VERSION 0x11
+#define MODULE_MAX_LEN 40
+#define MODULE_ID0 0x71
+#define MODULE_ID1 0x72
+#define MODULE_ID2 0x73
+#define MODULE_ID3 0x74
+#define MODULE_ID4 0x75
+static char tp_modules_name[][MODULE_MAX_LEN] ={
+	[0]="unkown",
+	[1]="HeLiTai",
+	[2]="DiJin",
+	[3]="unkown",
+	[4]="unkown",
+	[5]="unkown",
+	[6]="unkown",
+	[7]="unkown",
+	[8]="unkown",
+};
+//#define FTS_GESTRUE
+//#define TPD_AUTO_UPGRADE				//if need upgrade CTP FW when POWER ON,pls enable this MACRO
+#ifdef FTS_GESTRUE
+#define RGK_TP_GESTURE_ORBIT
+#endif
+
+#define USB_CHARGE_DETECT
+#endif /* TOUCHPANEL_H__ */
diff --git a/tools/dct/DCT.log b/tools/dct/DCT.log
new file mode 100644
index 0000000..e69de29
-- 
2.7.4

