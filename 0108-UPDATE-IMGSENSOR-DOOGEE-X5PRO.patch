From 3a815029b5db70cb2e889529f09ed2521640a3a2 Mon Sep 17 00:00:00 2001
From: SnowCatPDA <snowcat@vpro.ru>
Date: Sat, 28 May 2016 15:34:34 +0500
Subject: [PATCH 108/117] UPDATE IMGSENSOR DOOGEE X5PRO

---
 .../mediatek/imgsensor/src/mt6735m/kd_sensorlist.c |   22 +-
 .../mt6735/X5PRO_6735m/camera/camera/dummyds.c     |    0
 .../X5PRO_6735m/camera/camera/kd_camera_hw.c       | 2877 +++++++++-----------
 .../X5PRO_6735m/camera/camera/kd_camera_hw.c~      | 1089 --------
 .../X5PRO_6735m/camera/camera/kd_camera_hw.h       |   82 +-
 5 files changed, 1440 insertions(+), 2630 deletions(-)
 mode change 100755 => 100644 drivers/misc/mediatek/mach/mt6735/X5PRO_6735m/camera/camera/dummyds.c
 mode change 100755 => 100644 drivers/misc/mediatek/mach/mt6735/X5PRO_6735m/camera/camera/kd_camera_hw.c
 delete mode 100755 drivers/misc/mediatek/mach/mt6735/X5PRO_6735m/camera/camera/kd_camera_hw.c~
 mode change 100755 => 100644 drivers/misc/mediatek/mach/mt6735/X5PRO_6735m/camera/camera/kd_camera_hw.h

diff --git a/drivers/misc/mediatek/imgsensor/src/mt6735m/kd_sensorlist.c b/drivers/misc/mediatek/imgsensor/src/mt6735m/kd_sensorlist.c
index 0ebddf6..78e1c4a 100755
--- a/drivers/misc/mediatek/imgsensor/src/mt6735m/kd_sensorlist.c
+++ b/drivers/misc/mediatek/imgsensor/src/mt6735m/kd_sensorlist.c
@@ -137,7 +137,7 @@ inline static void KD_IMGSENSOR_PROFILE(char *tag) {}
 *
 ********************************************************************************/
 extern int kdCISModulePowerOn(CAMERA_DUAL_CAMERA_SENSOR_ENUM SensorIdx, char *currSensorName, BOOL On, char *mode_name);
-extern void checkPowerBeforClose( char* mode_name);
+//extern void checkPowerBeforClose( char* mode_name);
 /* extern ssize_t strobe_VDIrq(void);  //cotta : add for high current solution */
 
 /*******************************************************************************
@@ -177,7 +177,8 @@ static u32 gI2CBusNum = SUPPORT_I2C_BUS_NUM1;
 static DEFINE_MUTEX(kdCam_Mutex);
 static BOOL bSesnorVsyncFlag = FALSE;
 static ACDK_KD_SENSOR_SYNC_STRUCT g_NewSensorExpGain = {128, 128, 128, 128, 1000, 640, 0xFF, 0xFF, 0xFF, 0};
-
+char g_MainSensorName[32] = KDIMGSENSOR_NOSENSOR;
+char g_SubSensorName[32] = KDIMGSENSOR_NOSENSOR;
 
 extern MULTI_SENSOR_FUNCTION_STRUCT2 kd_MultiSensorFunc;
 static MULTI_SENSOR_FUNCTION_STRUCT2 *g_pSensorFunc = &kd_MultiSensorFunc;
@@ -1392,6 +1393,21 @@ inline static int adopt_CAMERA_HW_CheckIsAlive(void)
             PK_DBG(" Sensor found ID = 0x%x\n", sensorID);
             snprintf(mtk_ccm_name,sizeof(mtk_ccm_name),"%s CAM[%d]:%s;",mtk_ccm_name,g_invokeSocketIdx[i],g_invokeSensorNameStr[i]);
             err = ERROR_NONE;
+					if (DUAL_CAMERA_MAIN_SENSOR == g_invokeSocketIdx[i])
+					{
+						if(0==strcmp(g_MainSensorName,KDIMGSENSOR_NOSENSOR))
+						{
+							memcpy((char*)g_MainSensorName,(char*)g_invokeSensorNameStr[i],sizeof(g_invokeSensorNameStr[i]));  
+						}
+					}
+					else
+					{
+						if(0==strcmp(g_SubSensorName,KDIMGSENSOR_NOSENSOR))
+						{
+							memcpy((char*)g_SubSensorName,(char*)g_invokeSensorNameStr[i],sizeof(g_invokeSensorNameStr[i]));  
+						}
+	
+					}
         }
         if (ERROR_NONE != err)
         {
@@ -2761,7 +2777,7 @@ static int CAMERA_HW_Release(struct inode *a_pstInode, struct file *a_pstFile)
     atomic_dec(&g_CamDrvOpenCnt);
 //	PK_DBG("[CAMERA_HW_Release] g_CamDrvOpenCnt %d\n",g_CamDrvOpenCnt);
 	//if (atomic_read(&g_CamDrvOpenCnt) == 0)
-	checkPowerBeforClose( CAMERA_HW_DRVNAME1);
+//	checkPowerBeforClose( CAMERA_HW_DRVNAME1);
 
     return 0;
 }
diff --git a/drivers/misc/mediatek/mach/mt6735/X5PRO_6735m/camera/camera/dummyds.c b/drivers/misc/mediatek/mach/mt6735/X5PRO_6735m/camera/camera/dummyds.c
old mode 100755
new mode 100644
diff --git a/drivers/misc/mediatek/mach/mt6735/X5PRO_6735m/camera/camera/kd_camera_hw.c b/drivers/misc/mediatek/mach/mt6735/X5PRO_6735m/camera/camera/kd_camera_hw.c
old mode 100755
new mode 100644
index a732a4a..0152310
--- a/drivers/misc/mediatek/mach/mt6735/X5PRO_6735m/camera/camera/kd_camera_hw.c
+++ b/drivers/misc/mediatek/mach/mt6735/X5PRO_6735m/camera/camera/kd_camera_hw.c
@@ -8,26 +8,31 @@
 #include <asm/atomic.h>
 #include <linux/xlog.h>
 
+
 #include "kd_camera_hw.h"
 
+
 #include "kd_imgsensor.h"
 #include "kd_imgsensor_define.h"
 #include "kd_camera_feature.h"
 
+#include "cust_gpio_usage.h" 
+
+
 /******************************************************************************
  * Debug configuration
 ******************************************************************************/
 #define PFX "[kd_camera_hw]"
 #define PK_DBG_NONE(fmt, arg...)    do {} while (0)
-#define PK_DBG_FUNC(fmt, args...)    pr_debug(PFX  fmt, ##args)
+#define PK_DBG_FUNC(fmt, arg...)    xlog_printk(ANDROID_LOG_INFO, PFX , fmt, ##arg)
 
 #define DEBUG_CAMERA_HW_K
 #ifdef DEBUG_CAMERA_HW_K
 #define PK_DBG PK_DBG_FUNC
-#define PK_ERR(fmt, arg...)   pr_err(fmt, ##arg)
+#define PK_ERR(fmt, arg...)         xlog_printk(ANDROID_LOG_ERR, PFX , fmt, ##arg)
 #define PK_XLOG_INFO(fmt, args...) \
                 do {    \
-                   pr_debug(PFX  fmt, ##args); \
+                   xlog_printk(ANDROID_LOG_INFO, PFX , fmt, ##arg); \
                 } while(0)
 #else
 #define PK_DBG(a,...)
@@ -35,120 +40,33 @@
 #define PK_XLOG_INFO(fmt, args...)
 #endif
 
-#ifndef FALSE
-  #define FALSE 0
-#endif
-#ifndef TRUE
-  #define TRUE 1
-#endif
-
-/*
-#ifndef BOOL
-typedef unsigned char BOOL;
-#endif
-*/
-
-/* Mark: need to verify whether ISP_MCLK1_EN is required in here //Jessy @2014/06/04*/
-extern void ISP_MCLK1_EN(BOOL En);
-
-int cntVCAMD =0;
-int cntVCAMA =0;
-int cntVCAMIO =0;
-int cntVCAMAF =0;
-int cntVCAMD_SUB =0;
-
-static DEFINE_SPINLOCK(kdsensor_pw_cnt_lock);
-
-
-bool _hwPowerOn(MT65XX_POWER powerId, int powerVolt, char *mode_name){
-
-	if( hwPowerOn( powerId,  powerVolt, mode_name))
-	{
-	    spin_lock(&kdsensor_pw_cnt_lock);
-		if(powerId==CAMERA_POWER_VCAM_D)
-			cntVCAMD+= 1;
-		else if(powerId==CAMERA_POWER_VCAM_A)
-			cntVCAMA+= 1;
-		else if(powerId==CAMERA_POWER_VCAM_IO)
-			cntVCAMIO+= 1;
-		else if(powerId==CAMERA_POWER_VCAM_AF)
-			cntVCAMAF+= 1;
-		else if(powerId==SUB_CAMERA_POWER_VCAM_D)
-			cntVCAMD_SUB+= 1;
-		spin_unlock(&kdsensor_pw_cnt_lock);
-		return true;
-	}
-	return false;
-}
-
-bool _hwPowerDown(MT65XX_POWER powerId, char *mode_name){
-
-	if( hwPowerDown( powerId, mode_name))
-	{
-	    spin_lock(&kdsensor_pw_cnt_lock);
-		if(powerId==CAMERA_POWER_VCAM_D)
-			cntVCAMD-= 1;
-		else if(powerId==CAMERA_POWER_VCAM_A)
-			cntVCAMA-= 1;
-		else if(powerId==CAMERA_POWER_VCAM_IO)
-			cntVCAMIO-= 1;
-		else if(powerId==CAMERA_POWER_VCAM_AF)
-			cntVCAMAF-= 1;
-		else if(powerId==SUB_CAMERA_POWER_VCAM_D)
-			cntVCAMD_SUB-= 1;
-		spin_unlock(&kdsensor_pw_cnt_lock);
-		return true;
-	}
-	return false;
-}
-
-void checkPowerBeforClose( char* mode_name)
-{
-
-	int i= 0;
-
-	PK_DBG("[checkPowerBeforClose]cntVCAMD:%d, cntVCAMA:%d,cntVCAMIO:%d, cntVCAMAF:%d, cntVCAMD_SUB:%d,\n",
-		cntVCAMD, cntVCAMA,cntVCAMIO,cntVCAMAF,cntVCAMD_SUB);
 
+#define IDX_PS_MODE 1
+#define IDX_PS_ON   2
+#define IDX_PS_OFF  3
 
-	for(i=0;i<cntVCAMD;i++)
-		hwPowerDown(CAMERA_POWER_VCAM_D,mode_name);
-	for(i=0;i<cntVCAMA;i++)
-		hwPowerDown(CAMERA_POWER_VCAM_A,mode_name);
-	for(i=0;i<cntVCAMIO;i++)
-		hwPowerDown(CAMERA_POWER_VCAM_IO,mode_name);
-	for(i=0;i<cntVCAMAF;i++)
-		hwPowerDown(CAMERA_POWER_VCAM_AF,mode_name);
-	for(i=0;i<cntVCAMD_SUB;i++)
-		hwPowerDown(SUB_CAMERA_POWER_VCAM_D,mode_name);
 
-	 cntVCAMD =0;
-	 cntVCAMA =0;
-	 cntVCAMIO =0;
-	 cntVCAMAF =0;
-	 cntVCAMD_SUB =0;
+#define IDX_PS_CMRST 0
+#define IDX_PS_CMPDN 4
 
-}
 
+#ifndef BOOL
+typedef unsigned char BOOL;
+#endif
 
+extern void ISP_MCLK1_EN(BOOL En);
 
-int kdCISModulePowerOn(CAMERA_DUAL_CAMERA_SENSOR_ENUM SensorIdx, char *currSensorName, BOOL On, char* mode_name)
-{
+extern char 	g_MainSensorName[32];
+extern char 	g_SubSensorName[32];
+unsigned long	g_main_rst_output_when_sensor_disable 	= Vol_Low;
+unsigned long	g_main_pwd_output_when_sensor_disable 	= Vol_High;
+unsigned long	g_sub_rst_output_when_sensor_disable 	= Vol_Low;
+unsigned long	g_sub_pwd_output_when_sensor_disable	= Vol_High;
 
 u32 pinSetIdx = 0;//default main sensor
-bool camera_pdn_reverse = FALSE;
-bool camera_pdn1_reverse = FALSE;
-
-#define IDX_PS_CMRST 0
-#define IDX_PS_CMPDN 4
-#define IDX_PS_MODE 1
-#define IDX_PS_ON   2
-#define IDX_PS_OFF  3
-
-
 u32 pinSet[3][8] = {
                         //for main sensor
-                     {  CAMERA_CMRST_PIN, // The reset pin of main sensor uses GPIO10 of mt6306, please call mt6306 API to set
+                     {  CAMERA_CMRST_PIN,
                         CAMERA_CMRST_PIN_M_GPIO,   /* mode */
                         GPIO_OUT_ONE,              /* ON state */
                         GPIO_OUT_ZERO,             /* OFF state */
@@ -167,19 +85,1153 @@ u32 pinSet[3][8] = {
                         GPIO_OUT_ONE,
                         GPIO_OUT_ZERO,
                      },
-                     //for main_2 sensor
-                     {  GPIO_CAMERA_INVALID,
-                        GPIO_CAMERA_INVALID,   /* mode */
-                        GPIO_OUT_ONE,               /* ON state */
-                        GPIO_OUT_ZERO,              /* OFF state */
-                        GPIO_CAMERA_INVALID,
-                        GPIO_CAMERA_INVALID,
-                        GPIO_OUT_ONE,
-                        GPIO_OUT_ZERO,
-                     }
                    };
 
+PowerCust PowerCustList={
+	{
+	{GPIO_UNSUPPORTED,GPIO_MODE_GPIO,Vol_Low},   //for AVDD;
+	{GPIO_UNSUPPORTED,GPIO_MODE_GPIO,Vol_Low},   //for DVDD;
+	{GPIO_UNSUPPORTED,GPIO_MODE_GPIO,Vol_Low},   //for DOVDD;
+	{GPIO_UNSUPPORTED,GPIO_MODE_GPIO,Vol_Low},   //for AFVDD;
+	{GPIO_UNSUPPORTED,GPIO_MODE_GPIO,Vol_Low},   //for AFEN;
+	}
+};
+
+PowerUp PowerOnList={
+	{
+#if defined(OV9760_MIPI_RAW)
+		{SENSOR_DRVNAME_OV9760_MIPI_RAW,
+			{
+				{SensorMCLK,Vol_High, 0},
+				{DOVDD, Vol_1800, 10},
+				{AVDD,  Vol_2800, 10},
+				{DVDD,  Vol_1200, 10},
+				{AFVDD, Vol_2800, 15},
+				{PDN,   Vol_Low,  10},
+				{RST,   Vol_Low,  10},
+				{PDN,   Vol_High, 10},
+				{RST,   Vol_High, 10}
+			},
+		},
+#endif
+#if defined(OV13850_MIPI_RAW)
+		{SENSOR_DRVNAME_OV13850_MIPI_RAW,
+			{
+				{SensorMCLK,Vol_High, 0},
+				{DOVDD, Vol_1800, 1},
+				{AVDD,  Vol_2800, 1},
+				{DVDD,  Vol_1200, 1},
+				{AFVDD, Vol_2800, 5},
+				{PDN,   Vol_Low,  1},
+				{RST,   Vol_Low,  1},
+				{PDN,   Vol_High, 0},
+				{RST,   Vol_High, 0}
+			},
+		},
+#endif
+#if defined(OV8865_MIPI_RAW)
+		{SENSOR_DRVNAME_OV8865_MIPI_RAW,
+			{
+				{SensorMCLK,Vol_High, 0},
+				{DOVDD, Vol_1800, 1},
+				{AVDD,  Vol_2800, 1},
+				{DVDD,  Vol_1200, 1},
+				{AFVDD, Vol_2800, 5},
+				{PDN,   Vol_Low,  1},
+				{RST,   Vol_Low,  1},
+				{PDN,   Vol_High, 0},
+				{RST,   Vol_High, 0}
+			},
+		},
+#endif
+#if defined(OV8858R2A_MIPI_RAW)
+		{SENSOR_DRVNAME_OV8858_MIPI_RAW,
+			{
+				{SensorMCLK,Vol_High, 0},
+				{AVDD,  Vol_2800, 1},
+				{DOVDD, Vol_1800, 1},
+				{DVDD,  Vol_1200, 1},
+				{AFVDD, Vol_2800, 5},
+				{PDN,   Vol_Low,  1},
+				{RST,   Vol_Low,  1},
+				{PDN,   Vol_High, 0},
+				{RST,   Vol_High, 0}
+			},
+		},
+#endif
+#if defined(S5K5E2YA_MIPI_RAW)
+		{SENSOR_DRVNAME_S5K5E2YA_MIPI_RAW,
+			{
+				{SensorMCLK,Vol_High, 0},
+				{DOVDD, Vol_1800, 0},
+				{AVDD,  Vol_2800, 0},
+				{DVDD,  Vol_1200, 0},
+				{AFVDD, Vol_2800, 5},
+				{PDN,   Vol_Low,  4},
+				{PDN,   Vol_High, 0},
+				{RST,   Vol_Low,  1},
+				{RST,   Vol_High, 0},
+			},
+		},
+#endif
+#if defined(S5K2P8_MIPI_RAW)
+		{SENSOR_DRVNAME_S5K2P8_MIPI_RAW,
+			{
+				{SensorMCLK,Vol_High, 0},
+				{DOVDD, Vol_1800, 0},
+				{AVDD,  Vol_2800, 0},
+				{DVDD,  Vol_1200, 0},
+				{AFVDD, Vol_2800, 5},
+				{PDN,   Vol_Low,  4},
+				{PDN,   Vol_High, 0},
+				{RST,   Vol_Low,  1},
+				{RST,   Vol_High, 0},
+			},
+		},
+#endif
+#if defined(OV5648_MIPI_RAW)
+		{SENSOR_DRVNAME_OV5648_MIPI_RAW,
+			{
+				{SensorMCLK,Vol_High, 0},
+				{DOVDD, Vol_1800, 1},
+				{AVDD,  Vol_2800, 1},
+				{DVDD,  Vol_1500, 1},
+				{AFVDD, Vol_2800, 5},
+				{PDN,   Vol_Low,  1},
+				{RST,   Vol_Low,  1},
+				{PDN,   Vol_High, 0},
+				{RST,   Vol_High, 0}
+			},
+		},
+#endif
+#if defined(OV2680_MIPI_RAW)
+		{SENSOR_DRVNAME_OV2680_MIPI_RAW,
+			{
+				{SensorMCLK,Vol_High, 0},
+				{DOVDD, Vol_1800, 1},
+				{AVDD,  Vol_2800, 1},
+				{DVDD,  Vol_1500, 1},
+				{AFVDD, Vol_2800, 5},
+				{PDN,   Vol_Low,  1},
+				{RST,   Vol_Low,  1},
+				{PDN,   Vol_High, 0},
+				{RST,   Vol_High, 0}
+			},
+		},
+#endif
+#if defined(OV16825_MIPI_RAW)
+		{SENSOR_DRVNAME_OV16825_MIPI_RAW,
+			{
+				{SensorMCLK,Vol_High, 0},
+				{DOVDD, Vol_1800, 0},
+				{AVDD,  Vol_2800, 0},
+				{DVDD,  Vol_1200, 0},
+				{AFVDD, Vol_2800, 5},
+				{PDN,   Vol_Low,  0},
+				{RST,   Vol_Low,  0},
+				{RST,   Vol_High, 0},
+			},
+		},
+#endif
+#if defined(IMX135_MIPI_RAW)
+		{SENSOR_DRVNAME_IMX135_MIPI_RAW,
+			{
+				{SensorMCLK,Vol_High, 0},
+				{AVDD,	Vol_2800, 10},
+				{DOVDD, Vol_1800, 10},
+				{DVDD,	Vol_1100, 10},
+				{AFVDD, Vol_2800, 5},
+                {PDN,	Vol_Low, 0},
+                {PDN,	Vol_High, 0},
+                {RST,   Vol_Low,  0},
+				{RST,	Vol_High, 0}
+			},
+		},
+#endif
+#if defined(IMX175_MIPI_RAW)
+		{SENSOR_DRVNAME_IMX175_MIPI_RAW,
+			{
+				{AVDD, Vol_2800, 1},
+				{DOVDD,	Vol_1800, 1},
+				{SensorMCLK,Vol_High, 1},
+				{AFVDD, Vol_2800, 5},
+				{PDN,	Vol_Low,  1},
+				{RST,	Vol_Low,  1},
+				{PDN,	Vol_High, 1},
+				{RST,	Vol_High, 1},
+				{DVDD,	Vol_1200, 1}
+
+			},
+		},
+#endif
+#if defined(IMX166_MIPI_RAW)
+		{SENSOR_DRVNAME_IMX166_MIPI_RAW,
+			{
+				{AVDD, Vol_2800, 1},
+				{DOVDD,	Vol_1800, 1},
+				{SensorMCLK,Vol_High, 1},
+				{AFVDD, Vol_2800, 5},
+				{PDN,	Vol_Low,  1},
+				{RST,	Vol_Low,  1},
+				{PDN,	Vol_High, 1},
+				{RST,	Vol_High, 1},
+				{DVDD,	Vol_1200, 1}
+
+			},
+		},
+#endif
+#if defined(IMX164_MIPI_RAW)
+		{SENSOR_DRVNAME_IMX164_MIPI_RAW,
+			{
+				{AVDD, Vol_2800, 1},
+				{DOVDD,	Vol_1800, 1},
+				{SensorMCLK,Vol_High, 1},
+				{AFVDD, Vol_2800, 5},
+				{PDN,	Vol_Low,  1},
+				{RST,	Vol_Low,  1},
+				{PDN,	Vol_High, 1},
+				{RST,	Vol_High, 1},
+				{DVDD,	Vol_1200, 1}
+			},
+		},
+#endif
+#if defined(IMX145_MIPI_RAW)
+		{SENSOR_DRVNAME_IMX145_MIPI_RAW,
+			{
+				{AVDD, Vol_2800, 1},
+				{DOVDD,	Vol_1800, 1},
+				{SensorMCLK,Vol_High, 1},
+				{AFVDD, Vol_2800, 5},
+				{PDN,	Vol_Low,  1},
+				{RST,	Vol_Low,  1},
+				{PDN,	Vol_High, 1},
+				{RST,	Vol_High, 1},
+				{DVDD,	Vol_1200, 1}
+			},
+		},
+#endif
+#if defined(IMX179_MIPI_RAW)
+		{SENSOR_DRVNAME_IMX179_MIPI_RAW,
+			{
+				{AVDD, Vol_2800, 1},
+				{DOVDD,	Vol_1800, 1},
+
+				{SensorMCLK,Vol_High, 1},
+				{AFVDD, Vol_2800, 5},
+				{PDN,	Vol_Low,  1},
+				{RST,	Vol_Low,  1},
+				{PDN,	Vol_High, 1},
+				{RST,	Vol_High, 1},
+				{DVDD,	Vol_1200, 1}
+
+			},
+		},
+#endif
+#if defined(HI545_MIPI_RAW)
+		{SENSOR_DRVNAME_HI545_MIPI_RAW,
+			{
+				{SensorMCLK,Vol_High, 0},
+				{DOVDD, Vol_1800, 1},
+				{AVDD,  Vol_2800, 1},
+				{DVDD,  Vol_1200, 1},
+				{AFVDD, Vol_2800, 5},
+				{PDN,   Vol_Low,  1},
+				{RST,   Vol_Low,  1},
+				{PDN,   Vol_High, 0},
+				{RST,   Vol_High, 0}
+			},
+		},
+#endif
+#if defined(HI544_MIPI_RAW)
+		{SENSOR_DRVNAME_HI544_MIPI_RAW,
+			{
+				{SensorMCLK,Vol_High, 0},
+				{DOVDD, Vol_1800, 1},
+				{AVDD,  Vol_2800, 1},
+				{DVDD,  Vol_1200, 1},
+				{AFVDD, Vol_2800, 5},
+				{PDN,   Vol_Low,  1},
+				{RST,   Vol_Low,  1},
+				{PDN,   Vol_High, 0},
+				{RST,   Vol_High, 0}
+			},
+		},
+#endif
+#if defined(GC0310_MIPI_YUV)
+		{SENSOR_DRVNAME_GC0310_MIPI_YUV,
+			{
+				{DOVDD,	Vol_1800, 1},
+				{DVDD,	Vol_1500, 1},
+				{PDN,	Vol_High, 1},
+				{RST,   Vol_Low,  1},
+				{AVDD,	Vol_2800, 1},
+				{PDN,	Vol_High, 1},
+				{RST,   Vol_Low,  1},
+				{SensorMCLK,Vol_High, 0},
+				{PDN,	Vol_Low, 0},
+				{RST,	Vol_High, 0}
+			},
+		},
+#endif
+#if defined(GC2355_MIPI_RAW)
+		{SENSOR_DRVNAME_GC2355_MIPI_RAW,
+			{
+				{PDN,	Vol_High, 1},
+				{RST,   Vol_Low,  1},
+				{DOVDD,	Vol_1800, 1},
+				{DVDD,	Vol_1500, 1},
+				{AVDD,	Vol_2800, 1},
+				{AFVDD, Vol_2800, 5},
+				{SensorMCLK,Vol_High, 0},
+				{PDN,	Vol_Low, 0},
+				{RST,	Vol_High, 0}
+			},
+		},
+#endif
+#if defined(GC0409_MIPI_RAW)
+		{SENSOR_DRVNAME_GC0409MIPI_RAW,
+			{
+				{PDN,	Vol_High, 1},
+				{RST,   Vol_Low,  1},
+				{DOVDD,	Vol_1800, 1},
+				{DVDD,	Vol_1800, 1},
+				{AVDD,	Vol_2800, 1},
+				{AFVDD, Vol_2800, 5},
+				{SensorMCLK,Vol_High, 0},
+				{PDN,	Vol_Low, 0},
+				{RST,	Vol_High, 0}
+			},
+		},
+#endif
+#if defined(GC5004_MIPI_RAW)
+		{SENSOR_DRVNAME_GC5004MIPI_RAW,
+			{
+				{PDN,	Vol_High, 1},
+				{RST,   Vol_Low,  1},
+				{DOVDD,	Vol_1800, 1},
+				{DVDD,	Vol_1500, 1},
+				{AVDD,	Vol_2800, 1},
+				{AFVDD, Vol_2800, 5},
+				{SensorMCLK,Vol_High, 0},
+				{PDN,	Vol_Low, 0},
+				{RST,	Vol_High, 0}
+			},
+		},
+#endif
+
+#if defined(GC5024_MIPI_RAW)
+		{SENSOR_DRVNAME_GC5024MIPI_RAW,
+			{
+				{PDN,	Vol_High, 1},
+				{RST,   Vol_Low,  1},
+				{DOVDD,	Vol_1800, 1},
+				{DVDD,	Vol_1500, 1},
+				{AVDD,	Vol_2800, 1},
+				{AFVDD, Vol_2800, 5},
+				{SensorMCLK,Vol_High, 0},
+				{PDN,	Vol_Low, 0},
+				{RST,	Vol_High, 0}
+			},
+		},
+#endif
+#if defined(GC2355_RAW)
+		{SENSOR_DRVNAME_GC2355_RAW,
+			{
+				{PDN,	Vol_High, 1},
+				{RST,   Vol_Low,  1},
+				{DOVDD,	Vol_1800, 1},
+				{DVDD,	Vol_1500, 1},
+				{AVDD,	Vol_2800, 1},
+				{SensorMCLK,Vol_High, 0},
+				{PDN,	Vol_Low, 0},
+				{RST,	Vol_High, 0}
+			},
+		},
+#endif
+
+#if defined(GC2145_YUV)
+		{SENSOR_DRVNAME_GC2145_YUV,
+			{
+				{PDN,	Vol_High, 1},
+				{RST,   Vol_Low,  1},
+				{DOVDD,	Vol_1800, 1},
+				{DVDD,	Vol_1500, 1},//no used
+				{AVDD,	Vol_2800, 1},
+				{SensorMCLK,Vol_High, 0},
+				{PDN,	Vol_Low, 0},
+				{RST,	Vol_High, 0}
+			},
+		},
+#endif
+
+#if defined(GC0329_YUV)
+		{SENSOR_DRVNAME_GC0329_YUV,
+			{
+				{PDN,	Vol_High, 1},
+				{RST,   Vol_Low,  1},
+				{DOVDD,	Vol_1800, 1},
+				{DVDD,	Vol_1500, 1},//no used
+				{AVDD,	Vol_2800, 1},
+				{SensorMCLK,Vol_High, 0},
+				{PDN,	Vol_Low, 0},
+				{RST,	Vol_High, 0}
+			},
+		},
+#endif
+
+#if defined(GC0312_YUV)
+		{SENSOR_DRVNAME_GC0312_YUV,
+			{
+				{PDN,	Vol_High, 1},
+				{RST,   Vol_Low,  1},
+				{DOVDD,	Vol_1800, 1},
+				{DVDD,	Vol_1500, 1},
+				{AVDD,	Vol_2800, 1},
+				{SensorMCLK,Vol_High, 0},
+				{PDN,	Vol_Low, 0},
+				{RST,	Vol_High, 0}
+			},
+		},
+#endif
+
+#if defined(HM8131_MIPI_RAW)
+				{SENSOR_DRVNAME_HM8131_MIPI_RAW,
+					{
+						{AVDD,  Vol_2800, 1},
+						{DVDD,	Vol_1500, 1},
+						{DOVDD,	Vol_1800, 1},
+						{AFVDD, Vol_2800, 5},
+						{PDN,	Vol_Low,  1},
+						{RST,	Vol_Low,  1},
+						{SensorMCLK,Vol_High, 0},
+						{PDN,	Vol_High, 0},
+						{RST,	Vol_High, 0}
+					},
+				},
+#endif
+#if defined(HM5040_MIPI_RAW)
+				{SENSOR_DRVNAME_HM5040_MIPI_RAW,
+					{
+						{AVDD,  Vol_2800, 1},
+						{DVDD,	Vol_1500, 1},
+						{DOVDD,	Vol_1800, 1},
+						{AFVDD, Vol_2800, 5},
+						{PDN,	Vol_Low,  1},
+						{RST,	Vol_Low,  1},
+						{SensorMCLK,Vol_High, 0},
+						{PDN,	Vol_High, 0},
+						{RST,	Vol_High, 0}
+					},
+				},
+#endif
+#if defined(GC2755_MIPI_RAW)
+		{SENSOR_DRVNAME_GC2755_MIPI_RAW,
+			{
+				{DOVDD,	Vol_1800, 1},
+				{AVDD,	Vol_2800, 1},
+				{DVDD,	Vol_1500, 1},//no used
+				{AFVDD, Vol_2800, 5},
+				{PDN,	Vol_High, 1},
+				{RST,   Vol_Low,  1},
+				{SensorMCLK,Vol_High, 0},
+				{PDN,	Vol_Low, 0},
+				{RST,	Vol_High, 0}
+			},
+		},
+#endif
+#if defined(SP5409_MIPI_RAW)
+		{SENSOR_DRVNAME_SP5409_MIPI_RAW,
+			{
+				{AVDD, Vol_2800, 1},
+				{DOVDD,	Vol_1800, 1},
+#if defined(CONFIG_T93A_PROJ)
+				{DVDD,	Vol_1800, 1},  // this voltage need check with fae , every module may different
+#else
+				{DVDD,	Vol_1500, 1},  // this voltage need check with fae , every module may different
+#endif
+				{SensorMCLK,Vol_High, 0},
+				{AFVDD, Vol_2800, 5},
+				{PDN,	Vol_Low,  1},
+				{RST,	Vol_Low,  1},
+				{PDN,	Vol_High, 1},
+				{PDN,	Vol_Low,  0},
+				{RST,	Vol_High, 0}
+			},
+		},
+#endif
+#if defined(SP2508_MIPI_RAW)
+		{SENSOR_DRVNAME_SP2508_MIPI_RAW,
+			{
+				{AVDD, Vol_2800, 1},
+				{DOVDD,	Vol_1800, 1},
+				{DVDD,	Vol_1500, 1},  // this voltage need check with fae , every module may different
+				{SensorMCLK,Vol_High, 0},
+				{PDN,	Vol_Low,  5},
+				{PDN,	Vol_High, 5},
+				{PDN,	Vol_Low,  5},
+				{RST,	Vol_Low,  5},
+				{RST,	Vol_High, 5}
+			},
+		},
+#endif
+#if defined(SP8408_MIPI_RAW)
+               {SENSOR_DRVNAME_SP8408_MIPI_RAW,
+                      	{
+							   {DVDD,  Vol_1200, 1},
+                               {AVDD, Vol_2800, 1},
+                               {DOVDD, Vol_1800, 1},
+                               {SensorMCLK,Vol_High, 0},
+                               {AFVDD, Vol_2800, 5},
+                               {PDN,   Vol_Low,  1},
+                               {RST,   Vol_Low,  1},
+                               {PDN,   Vol_High, 1},
+                               {RST,   Vol_High, 0}
+						},
+		},
+#endif
+#if defined(IMX219_MIPI_RAW)
+		{SENSOR_DRVNAME_IMX219_MIPI_RAW,
+			{
+				{AVDD, Vol_2800, 1},
+				{DVDD,	Vol_1200, 1},
+				{DOVDD,	Vol_1800, 1},
+				{SensorMCLK,Vol_High, 1},
+				{AFVDD, Vol_2800, 5},
+				{PDN,	Vol_Low,  1},
+				{RST,	Vol_Low,  1},
+				{PDN,	Vol_High, 1},
+				{RST,	Vol_High, 1}
+			},
+		},
+#endif
+#if defined(OV5670_MIPI_RAW)
+		{SENSOR_DRVNAME_OV5670_MIPI_RAW,
+			{
+				{SensorMCLK,Vol_High, 0},
+				{DOVDD, Vol_1800, 1},
+				{AVDD,  Vol_2800, 1},
+				{DVDD,  Vol_1200, 1},
+				{AFVDD, Vol_2800, 5},
+				{PDN,   Vol_Low,  1},
+				{RST,   Vol_Low,  1},
+				{PDN,   Vol_High, 0},
+				{RST,   Vol_High, 0}
+			},
+		},
+#endif
+#if defined(OV5693_MIPI_RAW)
+		{SENSOR_DRVNAME_OV5693_MIPI_RAW,
+			{
+				{SensorMCLK,Vol_High, 0},
+				{DOVDD, Vol_1800, 1},
+				{AVDD,  Vol_2800, 1},
+				{DVDD,  Vol_1500, 1},
+				{AFVDD, Vol_2800, 5},
+				{PDN,   Vol_Low,  1},
+				{RST,   Vol_Low,  1},
+				{PDN,   Vol_High, 0},
+				{RST,   Vol_High, 0}
+			},
+		},
+#endif
+#if defined(SP0A19_YUV)
+		{SENSOR_DRVNAME_SP0A19_YUV,
+			{
+				{PDN,	Vol_High, 1},
+				{RST,   Vol_Low,  1},
+				{DOVDD,	Vol_1800, 1},
+				{DVDD,	Vol_1500, 1},//no used
+				{AVDD,	Vol_2800, 1},
+				{SensorMCLK,Vol_High, 0},
+				{PDN,	Vol_Low, 0},
+				{RST,	Vol_High, 0}
+			},
+		},
+#endif
+#if defined(HI551_MIPI_RAW)
+		{SENSOR_DRVNAME_HI551_MIPI_RAW,
+			{
+				{PDN, Vol_Low, 1},
+				{RST, Vol_Low, 1},
+				{DOVDD, Vol_1800, 1},
+				{AVDD, Vol_2800, 1},
+				{DVDD, Vol_1200, 1},
+				{AFVDD, Vol_2800, 5},
+				{PDN, Vol_High, 0},
+				{SensorMCLK, Vol_High, 0},
+				{RST, Vol_High, 0}
+			},
+		},
+#endif
+#if defined(S5K4H5YC_MIPI_RAW)
+		{SENSOR_DRVNAME_S5K4H5YC_MIPI_RAW,
+			{
+				{SensorMCLK,Vol_High, 0},
+				{DOVDD, Vol_1800, 0},
+				{AVDD,  Vol_2800, 0},
+				{DVDD,  Vol_1200, 0},
+				{AFVDD, Vol_2800, 5},
+				{PDN,   Vol_Low,  4},
+				{PDN,   Vol_High, 0},
+				{RST,   Vol_Low,  1},
+				{RST,   Vol_High, 0},
+			},
+		},
+#endif
+#if defined(S5K3H7YX_MIPI_RAW)
+		{SENSOR_DRVNAME_S5K3H7YX_MIPI_RAW,
+			{
+				{SensorMCLK,Vol_High, 0},
+				{DOVDD, Vol_1800, 0},
+				{AVDD,  Vol_2800, 0},
+				{DVDD,  Vol_1200, 0},
+				{AFVDD, Vol_2800, 5},
+				{PDN,   Vol_Low,  4},
+				{PDN,   Vol_High, 0},
+				{RST,   Vol_Low,  1},
+				{RST,   Vol_High, 0},
+			},
+		},
+#endif
+#if defined(GS8604_MIPI_RAW)
+		{SENSOR_DRVNAME_GS8604MIPI_RAW,
+			{
+				{SensorMCLK,Vol_High, 1},
+				{DOVDD, Vol_1800, 1},
+				{AVDD,  Vol_2800, 1},
+				{DVDD,  Vol_1200, 1},
+				{AFVDD, Vol_2800, 5},
+				{PDN,   Vol_Low,  4},
+				{PDN,   Vol_High, 1},
+				{RST,   Vol_Low,  1},
+				{RST,   Vol_High, 1},
+			},
+		},
+#endif
+#if defined(JX507_MIPI_RAW)
+		{SENSOR_DRVNAME_JX507_MIPI_RAW,
+			{
+				{AVDD,  Vol_2800, 1},
+				{DOVDD, Vol_1800, 1},
+				{SensorMCLK,Vol_High, 0},
+				{DVDD,  Vol_1200, 1},
+				{AFVDD, Vol_2800, 5},
+				{PDN,   Vol_High,  1},
+				{RST,   Vol_Low,  1},
+				{PDN,   Vol_Low, 0},
+				{RST,   Vol_High, 0}
+			},
+		},
+#endif
+		//add new sensor before this line
+		{NULL,},
+	}
+};
+
+static void config_sensor_rst_pwd(char *currSensorName)
+{
+	int pwListIdx,pwIdx;
+	for(pwListIdx=0 ; pwListIdx<16; pwListIdx++)
+	{
+		//currSensorName
+		if(currSensorName && (PowerOnList.PowerSeq[pwListIdx].SensorName!=NULL) && (0 == strcmp(PowerOnList.PowerSeq[pwListIdx].SensorName,currSensorName)))
+		{
+			for(pwIdx=0;pwIdx<12;pwIdx++)
+			{  
+				if(PowerOnList.PowerSeq[pwListIdx].PowerInfo[pwIdx].PowerType == RST)
+				{
+					if(pinSetIdx==0)
+						g_main_rst_output_when_sensor_disable = PowerOnList.PowerSeq[pwListIdx].PowerInfo[pwIdx].Voltage;
+					else
+						g_sub_rst_output_when_sensor_disable = PowerOnList.PowerSeq[pwListIdx].PowerInfo[pwIdx].Voltage;
+					break;
+				}
+			}
+			for(pwIdx=0;pwIdx<12;pwIdx++)
+			{  
+				if(PowerOnList.PowerSeq[pwListIdx].PowerInfo[pwIdx].PowerType == PDN)
+				{
+					if(pinSetIdx==0)
+						g_main_pwd_output_when_sensor_disable = PowerOnList.PowerSeq[pwListIdx].PowerInfo[pwIdx].Voltage;
+					else
+						g_sub_pwd_output_when_sensor_disable = PowerOnList.PowerSeq[pwListIdx].PowerInfo[pwIdx].Voltage;
+					break;
+				}
+			}
+		}
+	}
+
+	for(pwListIdx=0 ; pwListIdx<16; pwListIdx++)
+	{
+		//g_MainSensorName
+		if(g_MainSensorName && (PowerOnList.PowerSeq[pwListIdx].SensorName!=NULL) && (0 == strcmp(PowerOnList.PowerSeq[pwListIdx].SensorName,g_MainSensorName)))
+		{
+			for(pwIdx=0;pwIdx<12;pwIdx++)
+			{  
+				if(PowerOnList.PowerSeq[pwListIdx].PowerInfo[pwIdx].PowerType == RST)
+				{
+					g_main_rst_output_when_sensor_disable = PowerOnList.PowerSeq[pwListIdx].PowerInfo[pwIdx].Voltage;
+					break;
+				}
+			}
+			for(pwIdx=0;pwIdx<12;pwIdx++)
+			{  
+				if(PowerOnList.PowerSeq[pwListIdx].PowerInfo[pwIdx].PowerType == PDN)
+				{
+					g_main_pwd_output_when_sensor_disable = PowerOnList.PowerSeq[pwListIdx].PowerInfo[pwIdx].Voltage;
+					break;
+				}
+			}
+		}
+		//g_SubSensorName
+		if(g_SubSensorName && (PowerOnList.PowerSeq[pwListIdx].SensorName!=NULL) && (0 == strcmp(PowerOnList.PowerSeq[pwListIdx].SensorName,g_SubSensorName)))
+		{
+			for(pwIdx=0;pwIdx<12;pwIdx++)
+			{  
+				if(PowerOnList.PowerSeq[pwListIdx].PowerInfo[pwIdx].PowerType == RST)
+				{
+					g_sub_rst_output_when_sensor_disable = PowerOnList.PowerSeq[pwListIdx].PowerInfo[pwIdx].Voltage;
+					break;
+				}
+			}
+			for(pwIdx=0;pwIdx<12;pwIdx++)
+			{  
+				if(PowerOnList.PowerSeq[pwListIdx].PowerInfo[pwIdx].PowerType == PDN)
+				{
+					g_sub_pwd_output_when_sensor_disable = PowerOnList.PowerSeq[pwListIdx].PowerInfo[pwIdx].Voltage;
+					break;
+				}
+			}
+		}
+	}
+	PK_DBG("[imgsensor_poweron] config_sensor_rst_pwd mainrst=%d, mainpwd=%d, subrst=%d, subpwd=%d\n",g_main_rst_output_when_sensor_disable, g_main_pwd_output_when_sensor_disable, g_sub_rst_output_when_sensor_disable, g_sub_pwd_output_when_sensor_disable);	
+	
+	if(mt_set_gpio_mode(pinSet[0][IDX_PS_CMRST],pinSet[0][IDX_PS_CMRST+IDX_PS_MODE])){PK_DBG("[CAMERA SENSOR] set gpio mode failed!! (CMRST)\n");}
+	if(mt_set_gpio_dir(pinSet[0][IDX_PS_CMRST],GPIO_DIR_OUT)){PK_DBG("[CAMERA SENSOR] set gpio dir failed!! (CMRST)\n");}
+	if(mt_set_gpio_mode(pinSet[1][IDX_PS_CMRST],pinSet[1][IDX_PS_CMRST+IDX_PS_MODE])){PK_DBG("[CAMERA SENSOR] set gpio mode failed!! (CMRST)\n");}
+	if(mt_set_gpio_dir(pinSet[1][IDX_PS_CMRST],GPIO_DIR_OUT)){PK_DBG("[CAMERA SENSOR] set gpio dir failed!! (CMRST)\n");}
+	if(mt_set_gpio_mode(pinSet[0][IDX_PS_CMPDN],pinSet[0][IDX_PS_CMPDN+IDX_PS_MODE])){PK_DBG("[CAMERA LENS] set gpio mode failed!! \n");}
+	if(mt_set_gpio_dir(pinSet[0][IDX_PS_CMPDN],GPIO_DIR_OUT)){PK_DBG("[CAMERA LENS] set gpio dir failed!! \n");}
+	if(mt_set_gpio_mode(pinSet[1][IDX_PS_CMPDN],pinSet[1][IDX_PS_CMPDN+IDX_PS_MODE])){PK_DBG("[CAMERA LENS] set gpio mode failed!! \n");}
+	if(mt_set_gpio_dir(pinSet[1][IDX_PS_CMPDN],GPIO_DIR_OUT)){PK_DBG("[CAMERA LENS] set gpio dir failed!! \n");}
+
+	if(mt_set_gpio_out(pinSet[0][IDX_PS_CMRST], g_main_rst_output_when_sensor_disable)){PK_DBG("[CAMERA main CMRST] set gpio failed!! \n");}
+	if(mt_set_gpio_out(pinSet[0][IDX_PS_CMPDN], g_main_pwd_output_when_sensor_disable)){PK_DBG("[CAMERA main CMPDN] set gpio failed!! \n");}
+
+	if(mt_set_gpio_out(pinSet[1][IDX_PS_CMRST], g_sub_rst_output_when_sensor_disable)){PK_DBG("[CAMERA sub CMRST] set gpio failed!! \n");}
+	if(mt_set_gpio_out(pinSet[1][IDX_PS_CMPDN], g_sub_pwd_output_when_sensor_disable)){PK_DBG("[CAMERA sub CMPDN] set gpio failed!! \n");}
+}
+
+static void config_subsensor_rst_pwd_when_nosub(char *currSensorName)
+{
+	int pwListIdx,pwIdx;
+	if((0==strcmp(g_SubSensorName,KDIMGSENSOR_NOSENSOR)) && (pinSetIdx==0))
+	{
+		for(pwListIdx=0 ; pwListIdx<16; pwListIdx++)
+		{
+			//currSensorName
+			if(currSensorName && (PowerOnList.PowerSeq[pwListIdx].SensorName!=NULL) && (0 == strcmp(PowerOnList.PowerSeq[pwListIdx].SensorName,currSensorName)))
+			{
+				for(pwIdx=0;pwIdx<12;pwIdx++)
+				{  
+					if(PowerOnList.PowerSeq[pwListIdx].PowerInfo[pwIdx].PowerType == RST)
+					{
+						g_sub_rst_output_when_sensor_disable = PowerOnList.PowerSeq[pwListIdx].PowerInfo[pwIdx].Voltage;
+						break;
+					}
+				}
+				for(pwIdx=0;pwIdx<12;pwIdx++)
+				{  
+					if(PowerOnList.PowerSeq[pwListIdx].PowerInfo[pwIdx].PowerType == PDN)
+					{
+						g_sub_pwd_output_when_sensor_disable = PowerOnList.PowerSeq[pwListIdx].PowerInfo[pwIdx].Voltage;
+						break;
+					}
+				}
+			}
+		
+		}
+		PK_DBG("[imgsensor_poweron] config_subsensor_rst_pwd_when_nosub subrst=%d, subpwd=%d\n",g_sub_rst_output_when_sensor_disable, g_sub_pwd_output_when_sensor_disable);	
+	
+		if(mt_set_gpio_mode(pinSet[1][IDX_PS_CMRST],pinSet[1][IDX_PS_CMRST+IDX_PS_MODE])){PK_DBG("[CAMERA SENSOR] set gpio mode failed!! (CMRST)\n");}
+		if(mt_set_gpio_dir(pinSet[1][IDX_PS_CMRST],GPIO_DIR_OUT)){PK_DBG("[CAMERA SENSOR] set gpio dir failed!! (CMRST)\n");}
+		if(mt_set_gpio_out(pinSet[1][IDX_PS_CMRST], g_sub_rst_output_when_sensor_disable)){PK_DBG("[CAMERA sub CMRST] set gpio failed!! \n");}
+
+		if(mt_set_gpio_mode(pinSet[1][IDX_PS_CMPDN],pinSet[1][IDX_PS_CMPDN+IDX_PS_MODE])){PK_DBG("[CAMERA LENS] set gpio mode failed!! \n");}
+		if(mt_set_gpio_dir(pinSet[1][IDX_PS_CMPDN],GPIO_DIR_OUT)){PK_DBG("[CAMERA LENS] set gpio dir failed!! \n");}
+		if(mt_set_gpio_out(pinSet[1][IDX_PS_CMPDN], g_sub_pwd_output_when_sensor_disable)){PK_DBG("[CAMERA sub CMPDN] set gpio failed!! \n");}
+	}
+}
+
+BOOL hwpoweron(PowerInformation pwInfo, char* mode_name)
+{
+	if(pwInfo.PowerType == AVDD)
+	{
+		if(PowerCustList.PowerCustInfo[0].Gpio_Pin == GPIO_UNSUPPORTED)
+		{
+			if(pinSetIdx == 1)
+			{
+				PK_DBG("[CAMERA SENSOR] Sub camera VCAM_A power on");
+				if(TRUE != hwPowerOn(SUB_CAMERA_POWER_VCAM_A,pwInfo.Voltage,mode_name))
+       	 		{
+            		PK_DBG("[CAMERA SENSOR] Fail to enable digital power\n");
+            		return FALSE;
+        		}
+#ifdef GPIO_CAMERA_SUB_AVDD_EN_PIN
+				PK_DBG("[CAMERA SENSOR] Sub camera VAM_A=GPIO-0x%x power on",GPIO_CAMERA_SUB_AVDD_EN_PIN);
+				if(mt_set_gpio_mode(GPIO_CAMERA_SUB_AVDD_EN_PIN,PowerCustList.PowerCustInfo[1].Gpio_Mode)){PK_DBG("[CAMERA LENS] set gpio mode failed!! \n");}
+				if(mt_set_gpio_dir(GPIO_CAMERA_SUB_AVDD_EN_PIN,GPIO_DIR_OUT)){PK_DBG("[CAMERA LENS] set gpio dir failed!! \n");} 					
+				if(mt_set_gpio_out(GPIO_CAMERA_SUB_AVDD_EN_PIN,Vol_High)){PK_DBG("[CAMERA LENS] set gpio failed!! \n");}
+#endif
+			}	
+			else
+			{
+				PK_DBG("[CAMERA SENSOR] Main camera VAM_A power on");
+				if(TRUE != hwPowerOn(pwInfo.PowerType,pwInfo.Voltage,mode_name))
+	       	 	{
+	            		PK_DBG("[CAMERA SENSOR] Fail to enable digital power\n");
+	            		return FALSE;
+	        	}
+#ifdef GPIO_CAMERA_MIAN_AVDD_EN_PIN
+				PK_DBG("[CAMERA SENSOR] Main camera VAM_A=GPIO-0x%x power on",GPIO_CAMERA_MIAN_AVDD_EN_PIN);
+				if(mt_set_gpio_mode(GPIO_CAMERA_MIAN_AVDD_EN_PIN,PowerCustList.PowerCustInfo[1].Gpio_Mode)){PK_DBG("[CAMERA LENS] set gpio mode failed!! \n");}
+				if(mt_set_gpio_dir(GPIO_CAMERA_MIAN_AVDD_EN_PIN,GPIO_DIR_OUT)){PK_DBG("[CAMERA LENS] set gpio dir failed!! \n");}					
+				if(mt_set_gpio_out(GPIO_CAMERA_MIAN_AVDD_EN_PIN,Vol_High)){PK_DBG("[CAMERA LENS] set gpio failed!! \n");}
+#endif				
+        	}
+		}
+		else{
+			if(mt_set_gpio_mode(PowerCustList.PowerCustInfo[0].Gpio_Pin,PowerCustList.PowerCustInfo[0].Gpio_Mode)){PK_DBG("[CAMERA LENS] set gpio mode failed!! \n");}
+			if(mt_set_gpio_dir(PowerCustList.PowerCustInfo[0].Gpio_Pin,GPIO_DIR_OUT)){PK_DBG("[CAMERA LENS] set gpio dir failed!! \n");}						
+			if(mt_set_gpio_out(PowerCustList.PowerCustInfo[0].Gpio_Pin,PowerCustList.PowerCustInfo[0].Voltage)){PK_DBG("[CAMERA LENS] set gpio failed!! \n");}
+			}			
+	}
+	else if(pwInfo.PowerType == DVDD)
+	{
+		if(PowerCustList.PowerCustInfo[1].Gpio_Pin == GPIO_UNSUPPORTED)
+		{
+			if(pinSetIdx == 1)
+			{
+				PK_DBG("[CAMERA SENSOR] Sub camera VCAM_D power on");
+				if(TRUE != hwPowerOn(SUB_CAMERA_POWER_VCAM_D,pwInfo.Voltage,mode_name))
+       	 		{
+            		PK_DBG("[CAMERA SENSOR] Fail to enable digital power\n");
+            		return FALSE;
+        		}
+#ifdef GPIO_CAMERA_SUB_DVDD_EN_PIN
+				PK_DBG("[CAMERA SENSOR] Sub camera VAM_D=GPIO-0x%x power on",GPIO_CAMERA_SUB_DVDD_EN_PIN);
+				if(mt_set_gpio_mode(GPIO_CAMERA_SUB_DVDD_EN_PIN,PowerCustList.PowerCustInfo[1].Gpio_Mode)){PK_DBG("[CAMERA LENS] set gpio mode failed!! \n");}
+				if(mt_set_gpio_dir(GPIO_CAMERA_SUB_DVDD_EN_PIN,GPIO_DIR_OUT)){PK_DBG("[CAMERA LENS] set gpio dir failed!! \n");}					
+				if(mt_set_gpio_out(GPIO_CAMERA_SUB_DVDD_EN_PIN,Vol_High)){PK_DBG("[CAMERA LENS] set gpio failed!! \n");}
+#endif								
+			}	
+			else
+			{
+				PK_DBG("[CAMERA SENSOR] Main camera VAM_D power on");
+				if(TRUE != hwPowerOn(pwInfo.PowerType,pwInfo.Voltage,mode_name))
+	       	 	{
+	            		PK_DBG("[CAMERA SENSOR] Fail to enable digital power\n");
+	            		return FALSE;
+	        	}
+#ifdef GPIO_CAMERA_MIAN_DVDD_EN_PIN
+				PK_DBG("[CAMERA SENSOR] Main camera VAM_D=GPIO-0x%x power on",GPIO_CAMERA_MIAN_DVDD_EN_PIN);
+				if(mt_set_gpio_mode(GPIO_CAMERA_MIAN_DVDD_EN_PIN,PowerCustList.PowerCustInfo[1].Gpio_Mode)){PK_DBG("[CAMERA LENS] set gpio mode failed!! \n");}
+				if(mt_set_gpio_dir(GPIO_CAMERA_MIAN_DVDD_EN_PIN,GPIO_DIR_OUT)){PK_DBG("[CAMERA LENS] set gpio dir failed!! \n");}					
+				if(mt_set_gpio_out(GPIO_CAMERA_MIAN_DVDD_EN_PIN,Vol_High)){PK_DBG("[CAMERA LENS] set gpio failed!! \n");}
+#endif				
+#ifdef GPIO_CAMERA_IMX135_DVDD_EN_PIN
+				PK_DBG("[CAMERA SENSOR] Main camera VAM_D=GPIO-0x%x power on",GPIO_CAMERA_IMX135_DVDD_EN_PIN);
+				if(mt_set_gpio_mode(GPIO_CAMERA_IMX135_DVDD_EN_PIN,PowerCustList.PowerCustInfo[1].Gpio_Mode)){PK_DBG("[CAMERA LENS] set gpio mode failed!! \n");}
+				if(mt_set_gpio_dir(GPIO_CAMERA_IMX135_DVDD_EN_PIN,GPIO_DIR_OUT)){PK_DBG("[CAMERA LENS] set gpio dir failed!! \n");}						
+				if(mt_set_gpio_out(GPIO_CAMERA_IMX135_DVDD_EN_PIN,Vol_High)){PK_DBG("[CAMERA LENS] set gpio failed!! \n");}
+#endif
+			}
+		}
+		else{
+			if(mt_set_gpio_mode(PowerCustList.PowerCustInfo[1].Gpio_Pin,PowerCustList.PowerCustInfo[1].Gpio_Mode)){PK_DBG("[CAMERA LENS] set gpio mode failed!! \n");}
+			if(mt_set_gpio_dir(PowerCustList.PowerCustInfo[1].Gpio_Pin,GPIO_DIR_OUT)){PK_DBG("[CAMERA LENS] set gpio dir failed!! \n");}						
+			if(mt_set_gpio_out(PowerCustList.PowerCustInfo[1].Gpio_Pin,PowerCustList.PowerCustInfo[1].Voltage)){PK_DBG("[CAMERA LENS] set gpio failed!! \n");}
+			}			
+	}
+	else if(pwInfo.PowerType == DOVDD)
+	{
+		if(PowerCustList.PowerCustInfo[2].Gpio_Pin == GPIO_UNSUPPORTED)
+		{
+			if(TRUE != hwPowerOn(pwInfo.PowerType,pwInfo.Voltage,mode_name))
+       	 	{
+            		PK_DBG("[CAMERA SENSOR] Fail to enable digital power\n");
+            		return FALSE;
+        	}
+		}
+		else{
+			if(mt_set_gpio_mode(PowerCustList.PowerCustInfo[2].Gpio_Pin,PowerCustList.PowerCustInfo[2].Gpio_Mode)){PK_DBG("[CAMERA LENS] set gpio mode failed!! \n");}
+			if(mt_set_gpio_dir(PowerCustList.PowerCustInfo[2].Gpio_Pin,GPIO_DIR_OUT)){PK_DBG("[CAMERA LENS] set gpio dir failed!! \n");}						
+			if(mt_set_gpio_out(PowerCustList.PowerCustInfo[2].Gpio_Pin,PowerCustList.PowerCustInfo[2].Voltage)){PK_DBG("[CAMERA LENS] set gpio failed!! \n");}
+			}			
+	}
+#ifndef CONFIG_HCT_AF_POWER_ON_NOISE
+	else if(pwInfo.PowerType == AFVDD)
+	{
+		if(PowerCustList.PowerCustInfo[3].Gpio_Pin == GPIO_UNSUPPORTED)
+		{
+			if(TRUE != hwPowerOn(pwInfo.PowerType,pwInfo.Voltage,mode_name))
+       	 	{
+            		PK_DBG("[CAMERA SENSOR] Fail to enable digital power\n");
+            		return FALSE;
+        	}
+		}
+		else{
+			if(mt_set_gpio_mode(PowerCustList.PowerCustInfo[3].Gpio_Pin,PowerCustList.PowerCustInfo[3].Gpio_Mode)){PK_DBG("[CAMERA LENS] set gpio mode failed!! \n");}
+			if(mt_set_gpio_dir(PowerCustList.PowerCustInfo[3].Gpio_Pin,GPIO_DIR_OUT)){PK_DBG("[CAMERA LENS] set gpio dir failed!! \n");}						
+			if(mt_set_gpio_out(PowerCustList.PowerCustInfo[3].Gpio_Pin,PowerCustList.PowerCustInfo[3].Voltage)){PK_DBG("[CAMERA LENS] set gpio failed!! \n");}
+			
+			if(PowerCustList.PowerCustInfo[4].Gpio_Pin != GPIO_UNSUPPORTED)
+			{
+				mdelay(5);
+				if(mt_set_gpio_mode(PowerCustList.PowerCustInfo[3].Gpio_Pin,PowerCustList.PowerCustInfo[3].Gpio_Mode)){PK_DBG("[CAMERA LENS] set gpio mode failed!! \n");}
+				if(mt_set_gpio_dir(PowerCustList.PowerCustInfo[3].Gpio_Pin,GPIO_DIR_OUT)){PK_DBG("[CAMERA LENS] set gpio dir failed!! \n");}						
+				if(mt_set_gpio_out(PowerCustList.PowerCustInfo[3].Gpio_Pin,PowerCustList.PowerCustInfo[3].Voltage)){PK_DBG("[CAMERA LENS] set gpio failed!! \n");}
+			}	
+		}			
+	}
+#endif
+	else if(pwInfo.PowerType==PDN)
+	{
+		PK_DBG("hwPowerOn: PDN %d \n",pwInfo.Voltage);
+		
+		if(mt_set_gpio_mode(pinSet[pinSetIdx][IDX_PS_CMPDN],pinSet[pinSetIdx][IDX_PS_CMPDN+IDX_PS_MODE])){PK_DBG("[CAMERA LENS] set gpio mode failed!! \n");}
+		if(mt_set_gpio_dir(pinSet[pinSetIdx][IDX_PS_CMPDN],GPIO_DIR_OUT)){PK_DBG("[CAMERA LENS] set gpio dir failed!! \n");}
+		if(mt_set_gpio_out(pinSet[pinSetIdx][IDX_PS_CMPDN], pwInfo.Voltage)){PK_DBG("[CAMERA LENS] set gpio failed!! \n");}
+	}
+	else if(pwInfo.PowerType==RST)
+	{
+		PK_DBG("hwPowerOn: RST %d \n",pwInfo.Voltage);
+
+		if(pinSetIdx==0)
+		{
+#ifndef MTK_MT6306_SUPPORT
+        if(mt_set_gpio_mode(pinSet[pinSetIdx][IDX_PS_CMRST],pinSet[pinSetIdx][IDX_PS_CMRST+IDX_PS_MODE])){PK_DBG("[CAMERA SENSOR] set gpio mode failed!! (CMRST)\n");}
+        if(mt_set_gpio_dir(pinSet[pinSetIdx][IDX_PS_CMRST],GPIO_DIR_OUT)){PK_DBG("[CAMERA SENSOR] set gpio dir failed!! (CMRST)\n");}
+        if(mt_set_gpio_out(pinSet[pinSetIdx][IDX_PS_CMRST],pinSet[pinSetIdx][IDX_PS_CMRST+IDX_PS_OFF])){PK_DBG("[CAMERA SENSOR] set gpio failed!! (CMRST)\n");}
+		if(mt_set_gpio_out(pinSet[pinSetIdx][IDX_PS_CMRST], pwInfo.Voltage)){PK_DBG("[CAMERA LENS] set gpio failed!! \n");}
+#else
+		if(mt6306_set_gpio_dir(pinSet[pinSetIdx][IDX_PS_CMRST],GPIO_DIR_OUT)){PK_DBG("[CAMERA SENSOR] set gpio dir failed!! (CMRST)\n");}
+		if(mt6306_set_gpio_out(pinSet[pinSetIdx][IDX_PS_CMRST],pwInfo.Voltage)){PK_DBG("[CAMERA SENSOR] set gpio failed!! (CMRST)\n");} 				 
+
+#endif 
+		}
+		else if(pinSetIdx==1)
+		{
+			if(mt_set_gpio_mode(pinSet[pinSetIdx][IDX_PS_CMRST],pinSet[pinSetIdx][IDX_PS_CMRST+IDX_PS_MODE])){PK_DBG("[CAMERA SENSOR] set gpio mode failed!! (CMRST)\n");}
+	        if(mt_set_gpio_dir(pinSet[pinSetIdx][IDX_PS_CMRST],GPIO_DIR_OUT)){PK_DBG("[CAMERA SENSOR] set gpio dir failed!! (CMRST)\n");}
+	        if(mt_set_gpio_out(pinSet[pinSetIdx][IDX_PS_CMRST],pinSet[pinSetIdx][IDX_PS_CMRST+IDX_PS_OFF])){PK_DBG("[CAMERA SENSOR] set gpio failed!! (CMRST)\n");}
+			if(mt_set_gpio_out(pinSet[pinSetIdx][IDX_PS_CMRST], pwInfo.Voltage)){PK_DBG("[CAMERA LENS] set gpio failed!! \n");}
+		}
+
+		
+	}
+	else if(pwInfo.PowerType==SensorMCLK)
+	{
+		if(pinSetIdx==0)
+		{
+			PK_DBG("Sensor MCLK1 On");
+			ISP_MCLK1_EN(TRUE);
+		}
+		else if(pinSetIdx==1)
+		{
+			PK_DBG("Sensor MCLK1 On");
+			ISP_MCLK1_EN(TRUE);
+		}
+	}
+	else{}
+	if(pwInfo.Delay>0)
+		mdelay(pwInfo.Delay);
+	return TRUE;
+}
+	
+
+
+BOOL hwpowerdown(PowerInformation pwInfo, char* mode_name)
+{
+	if(pwInfo.PowerType == AVDD)
+	{
+		if(PowerCustList.PowerCustInfo[0].Gpio_Pin == GPIO_UNSUPPORTED)
+		{
+			if(pinSetIdx==1)
+			{
+				if(TRUE != hwPowerDown(SUB_CAMERA_POWER_VCAM_A,mode_name))
+       	 		{
+            		PK_DBG("[CAMERA SENSOR] Fail to enable digital power\n");
+            		return FALSE;
+        		}
+#ifdef GPIO_CAMERA_SUB_AVDD_EN_PIN
+				if(mt_set_gpio_mode(GPIO_CAMERA_SUB_AVDD_EN_PIN,PowerCustList.PowerCustInfo[1].Gpio_Mode)){PK_DBG("[CAMERA LENS] set gpio mode failed!! \n");}
+				if(mt_set_gpio_dir(GPIO_CAMERA_SUB_AVDD_EN_PIN,GPIO_DIR_OUT)){PK_DBG("[CAMERA LENS] set gpio dir failed!! \n");} 					
+				if(mt_set_gpio_out(GPIO_CAMERA_SUB_AVDD_EN_PIN,Vol_Low)){PK_DBG("[CAMERA LENS] set gpio failed!! \n");}
+#endif			
+			}
+			else
+			{
+#ifdef GPIO_CAMERA_MIAN_AVDD_EN_PIN
+				if(mt_set_gpio_mode(GPIO_CAMERA_MIAN_AVDD_EN_PIN,PowerCustList.PowerCustInfo[1].Gpio_Mode)){PK_DBG("[CAMERA LENS] set gpio mode failed!! \n");}
+				if(mt_set_gpio_dir(GPIO_CAMERA_MIAN_AVDD_EN_PIN,GPIO_DIR_OUT)){PK_DBG("[CAMERA LENS] set gpio dir failed!! \n");}					
+				if(mt_set_gpio_out(GPIO_CAMERA_MIAN_AVDD_EN_PIN,Vol_Low)){PK_DBG("[CAMERA LENS] set gpio failed!! \n");}
+#endif					
+			if(TRUE != hwPowerDown(pwInfo.PowerType,mode_name))
+       	 	{
+            		PK_DBG("[CAMERA SENSOR] Fail to enable digital power\n");
+            		return FALSE;
+        	}
+			else{}
+			}
+		}
+		else{
+			if(mt_set_gpio_mode(PowerCustList.PowerCustInfo[0].Gpio_Pin,PowerCustList.PowerCustInfo[0].Gpio_Mode)){PK_DBG("[CAMERA LENS] set gpio mode failed!! \n");}
+			if(mt_set_gpio_dir(PowerCustList.PowerCustInfo[0].Gpio_Pin,GPIO_DIR_OUT)){PK_DBG("[CAMERA LENS] set gpio dir failed!! \n");}						
+			if(mt_set_gpio_out(PowerCustList.PowerCustInfo[0].Gpio_Pin,PowerCustList.PowerCustInfo[0].Voltage)){PK_DBG("[CAMERA LENS] set gpio failed!! \n");}
+			}			
+	}
+	else if(pwInfo.PowerType == DVDD)
+	{
+		if(PowerCustList.PowerCustInfo[1].Gpio_Pin == GPIO_UNSUPPORTED)
+		{
+			if(pinSetIdx==1)
+			{
+				if(TRUE != hwPowerDown(SUB_CAMERA_POWER_VCAM_D,mode_name))
+       	 		{
+            		PK_DBG("[CAMERA SENSOR] Fail to enable digital power\n");
+            		return FALSE;
+        		}
+#ifdef GPIO_CAMERA_SUB_DVDD_EN_PIN
+				if(mt_set_gpio_mode(GPIO_CAMERA_SUB_DVDD_EN_PIN,PowerCustList.PowerCustInfo[1].Gpio_Mode)){PK_DBG("[CAMERA LENS] set gpio mode failed!! \n");}
+				if(mt_set_gpio_dir(GPIO_CAMERA_SUB_DVDD_EN_PIN,GPIO_DIR_OUT)){PK_DBG("[CAMERA LENS] set gpio dir failed!! \n");}					
+				if(mt_set_gpio_out(GPIO_CAMERA_SUB_DVDD_EN_PIN,Vol_Low)){PK_DBG("[CAMERA LENS] set gpio failed!! \n");}
+#endif									
+			}
+			else
+			{
+#ifdef GPIO_CAMERA_MIAN_DVDD_EN_PIN
+				if(mt_set_gpio_mode(GPIO_CAMERA_MIAN_DVDD_EN_PIN,PowerCustList.PowerCustInfo[1].Gpio_Mode)){PK_DBG("[CAMERA LENS] set gpio mode failed!! \n");}
+				if(mt_set_gpio_dir(GPIO_CAMERA_MIAN_DVDD_EN_PIN,GPIO_DIR_OUT)){PK_DBG("[CAMERA LENS] set gpio dir failed!! \n");}					
+				if(mt_set_gpio_out(GPIO_CAMERA_MIAN_DVDD_EN_PIN,Vol_Low)){PK_DBG("[CAMERA LENS] set gpio failed!! \n");}
+#endif									
+#ifdef GPIO_CAMERA_IMX135_DVDD_EN_PIN
+				if(mt_set_gpio_mode(GPIO_CAMERA_IMX135_DVDD_EN_PIN,PowerCustList.PowerCustInfo[1].Gpio_Mode)){PK_DBG("[CAMERA LENS] set gpio mode failed!! \n");}
+				if(mt_set_gpio_dir(GPIO_CAMERA_IMX135_DVDD_EN_PIN,GPIO_DIR_OUT)){PK_DBG("[CAMERA LENS] set gpio dir failed!! \n");}						
+				if(mt_set_gpio_out(GPIO_CAMERA_IMX135_DVDD_EN_PIN,Vol_Low)){PK_DBG("[CAMERA LENS] set gpio failed!! \n");}
+#endif
+				if(TRUE != hwPowerDown(pwInfo.PowerType,mode_name))
+       	 	{
+            		PK_DBG("[CAMERA SENSOR] Fail to enable digital power\n");
+            		return FALSE;
+        	}
+			else{}
+			}
+		}
+		else{
+			if(mt_set_gpio_mode(PowerCustList.PowerCustInfo[1].Gpio_Pin,PowerCustList.PowerCustInfo[1].Gpio_Mode)){PK_DBG("[CAMERA LENS] set gpio mode failed!! \n");}
+			if(mt_set_gpio_dir(PowerCustList.PowerCustInfo[1].Gpio_Pin,GPIO_DIR_OUT)){PK_DBG("[CAMERA LENS] set gpio dir failed!! \n");}						
+			if(mt_set_gpio_out(PowerCustList.PowerCustInfo[1].Gpio_Pin,PowerCustList.PowerCustInfo[1].Voltage)){PK_DBG("[CAMERA LENS] set gpio failed!! \n");}
+			}			
+	}
+	else if(pwInfo.PowerType == DOVDD)
+	{
+		if(PowerCustList.PowerCustInfo[2].Gpio_Pin == GPIO_UNSUPPORTED)
+		{
+			if(TRUE != hwPowerDown(pwInfo.PowerType,mode_name))
+       	 	{
+            		PK_DBG("[CAMERA SENSOR] Fail to enable digital power\n");
+            		return FALSE;
+        	}
+		}
+		else{
+			if(mt_set_gpio_mode(PowerCustList.PowerCustInfo[2].Gpio_Pin,PowerCustList.PowerCustInfo[2].Gpio_Mode)){PK_DBG("[CAMERA LENS] set gpio mode failed!! \n");}
+			if(mt_set_gpio_dir(PowerCustList.PowerCustInfo[2].Gpio_Pin,GPIO_DIR_OUT)){PK_DBG("[CAMERA LENS] set gpio dir failed!! \n");}						
+			if(mt_set_gpio_out(PowerCustList.PowerCustInfo[2].Gpio_Pin,PowerCustList.PowerCustInfo[2].Voltage)){PK_DBG("[CAMERA LENS] set gpio failed!! \n");}
+			}			
+	}
+#ifndef CONFIG_HCT_AF_POWER_ON_NOISE
+	else if(pwInfo.PowerType == AFVDD)
+	{
+		if(PowerCustList.PowerCustInfo[3].Gpio_Pin == GPIO_UNSUPPORTED)
+		{
+			if(TRUE != hwPowerDown(pwInfo.PowerType,mode_name))
+       	 	{
+            		PK_DBG("[CAMERA SENSOR] Fail to enable digital power\n");
+            		return FALSE;
+        	}
+		}
+		else{
+			if(mt_set_gpio_mode(PowerCustList.PowerCustInfo[3].Gpio_Pin,PowerCustList.PowerCustInfo[3].Gpio_Mode)){PK_DBG("[CAMERA LENS] set gpio mode failed!! \n");}
+			if(mt_set_gpio_dir(PowerCustList.PowerCustInfo[3].Gpio_Pin,GPIO_DIR_OUT)){PK_DBG("[CAMERA LENS] set gpio dir failed!! \n");}						
+			if(mt_set_gpio_out(PowerCustList.PowerCustInfo[3].Gpio_Pin,PowerCustList.PowerCustInfo[3].Voltage)){PK_DBG("[CAMERA LENS] set gpio failed!! \n");}
+			
+			if(PowerCustList.PowerCustInfo[4].Gpio_Pin != GPIO_UNSUPPORTED)
+			{
+				mdelay(5);
+				if(mt_set_gpio_mode(PowerCustList.PowerCustInfo[3].Gpio_Pin,PowerCustList.PowerCustInfo[3].Gpio_Mode)){PK_DBG("[CAMERA LENS] set gpio mode failed!! \n");}
+				if(mt_set_gpio_dir(PowerCustList.PowerCustInfo[3].Gpio_Pin,GPIO_DIR_OUT)){PK_DBG("[CAMERA LENS] set gpio dir failed!! \n");}						
+				if(mt_set_gpio_out(PowerCustList.PowerCustInfo[3].Gpio_Pin,PowerCustList.PowerCustInfo[3].Voltage)){PK_DBG("[CAMERA LENS] set gpio failed!! \n");}
+			}	
+		}			
+	}
+#endif
+	else if(pwInfo.PowerType==PDN)
+	{
+		PK_DBG("hwPowerDown: PDN %d \n",pwInfo.Voltage);
+
+		if(mt_set_gpio_mode(pinSet[pinSetIdx][IDX_PS_CMPDN],pinSet[pinSetIdx][IDX_PS_CMPDN+IDX_PS_MODE])){PK_DBG("[CAMERA LENS] set gpio mode failed!! \n");}
+		if(mt_set_gpio_dir(pinSet[pinSetIdx][IDX_PS_CMPDN],GPIO_DIR_OUT)){PK_DBG("[CAMERA LENS] set gpio dir failed!! \n");}
+		if(mt_set_gpio_out(pinSet[pinSetIdx][IDX_PS_CMPDN], pwInfo.Voltage)){PK_DBG("[CAMERA LENS] set gpio failed!! \n");}
+		msleep(1);
+	}
+	else if(pwInfo.PowerType==RST)
+	{
+		PK_DBG("hwPowerDown: RST %d \n",pwInfo.Voltage);
+		if(pinSetIdx==0)
+		{
+#ifndef MTK_MT6306_SUPPORT
+		if(mt_set_gpio_mode(pinSet[pinSetIdx][IDX_PS_CMRST],pinSet[pinSetIdx][IDX_PS_CMRST+IDX_PS_MODE])){PK_DBG("[CAMERA SENSOR] set gpio mode failed!! (CMRST)\n");}
+		if(mt_set_gpio_dir(pinSet[pinSetIdx][IDX_PS_CMRST],GPIO_DIR_OUT)){PK_DBG("[CAMERA SENSOR] set gpio dir failed!! (CMRST)\n");}
+		if(mt_set_gpio_out(pinSet[pinSetIdx][IDX_PS_CMRST],pinSet[pinSetIdx][IDX_PS_CMRST+IDX_PS_OFF])){PK_DBG("[CAMERA SENSOR] set gpio failed!! (CMRST)\n");}
+		if(mt_set_gpio_out(pinSet[pinSetIdx][IDX_PS_CMRST], pwInfo.Voltage)){PK_DBG("[CAMERA LENS] set gpio failed!! \n");}
+#else
+		if(mt6306_set_gpio_dir(pinSet[pinSetIdx][IDX_PS_CMRST],GPIO_DIR_OUT)){PK_DBG("[CAMERA SENSOR] set gpio dir failed!! (CMRST)\n");}
+		if(mt6306_set_gpio_out(pinSet[pinSetIdx][IDX_PS_CMRST], pwInfo.Voltage)){PK_DBG("[CAMERA SENSOR] set gpio failed!! (CMRST)\n");}				 
+#endif 
+		}
+		else if(pinSetIdx==1)
+		{
+			if(mt_set_gpio_mode(pinSet[pinSetIdx][IDX_PS_CMRST],pinSet[pinSetIdx][IDX_PS_CMRST+IDX_PS_MODE])){PK_DBG("[CAMERA SENSOR] set gpio mode failed!! (CMRST)\n");}
+			if(mt_set_gpio_dir(pinSet[pinSetIdx][IDX_PS_CMRST],GPIO_DIR_OUT)){PK_DBG("[CAMERA SENSOR] set gpio dir failed!! (CMRST)\n");}
+			if(mt_set_gpio_out(pinSet[pinSetIdx][IDX_PS_CMRST],pinSet[pinSetIdx][IDX_PS_CMRST+IDX_PS_OFF])){PK_DBG("[CAMERA SENSOR] set gpio failed!! (CMRST)\n");}
+			if(mt_set_gpio_out(pinSet[pinSetIdx][IDX_PS_CMRST], pwInfo.Voltage)){PK_DBG("[CAMERA LENS] set gpio failed!! \n");}
+		}
+
+	}
+	else if(pwInfo.PowerType==SensorMCLK)
+	{
+		if(pinSetIdx==0)
+		{
+			ISP_MCLK1_EN(FALSE);
+		}
+		else if(pinSetIdx==1)
+		{
+			ISP_MCLK1_EN(FALSE);
+		}
+	}
+	else{}
+	return TRUE;
+}
+
+
+
 
+int kdCISModulePowerOn(CAMERA_DUAL_CAMERA_SENSOR_ENUM SensorIdx, char *currSensorName, BOOL On, char* mode_name)
+{
+
+	int pwListIdx,pwIdx;
+    BOOL sensorInPowerList = KAL_FALSE;
 
     if (DUAL_CAMERA_MAIN_SENSOR == SensorIdx){
         pinSetIdx = 0;
@@ -190,61 +1242,57 @@ u32 pinSet[3][8] = {
     else if (DUAL_CAMERA_MAIN_2_SENSOR == SensorIdx) {
         pinSetIdx = 2;
     }
-
-    if((pinSetIdx == 0) &&
-       currSensorName &&
-       ((0 == strcmp(SENSOR_DRVNAME_GC2755_MIPI_RAW, currSensorName)) ||
-		(0 == strcmp(SENSOR_DRVNAME_GC2355_MIPI_RAW, currSensorName)) ||
-		(0 == strcmp(SENSOR_DRVNAME_GC2235_MIPI_RAW, currSensorName)) ||
-		(0 == strcmp(SENSOR_DRVNAME_GC2145_MIPI_YUV, currSensorName)) ||
-        (0 == strcmp(SENSOR_DRVNAME_SP2508_MIPI_RAW, currSensorName)) ||
-        (0 == strcmp(SENSOR_DRVNAME_SP5409_MIPI_RAW, currSensorName)) ||
-		(0 == strcmp(SENSOR_DRVNAME_GC2155_MIPI_YUV, currSensorName))))
-    {
-        camera_pdn_reverse = TRUE;
-    }
-
-    if((pinSetIdx == 1) &&
-       currSensorName &&
-       ((0 == strcmp(SENSOR_DRVNAME_GC2755_MIPI_RAW, currSensorName)) ||
-        (0 == strcmp(SENSOR_DRVNAME_GC2355_MIPI_RAW, currSensorName)) ||
-        (0 == strcmp(SENSOR_DRVNAME_GC2235_MIPI_RAW, currSensorName)) ||
-		(0 == strcmp(SENSOR_DRVNAME_GC2145_MIPI_YUV, currSensorName)) ||
-		(0 == strcmp(SENSOR_DRVNAME_GC2155_MIPI_YUV, currSensorName)) ||
-        (0 == strcmp(SENSOR_DRVNAME_SP2508_MIPI_RAW, currSensorName)) ||
-		(0 == strcmp(SENSOR_DRVNAME_GC0310_MIPI_YUV, currSensorName))))
-    {
-        camera_pdn1_reverse = TRUE;
-    }
-
-    if(camera_pdn_reverse)
-    {
-        pinSet[0][IDX_PS_CMPDN+IDX_PS_ON] = GPIO_OUT_ZERO;
-        pinSet[0][IDX_PS_CMPDN+IDX_PS_OFF] = GPIO_OUT_ONE;
-    }
-
-    if(camera_pdn1_reverse)
-    {
-        pinSet[1][IDX_PS_CMPDN+IDX_PS_ON] = GPIO_OUT_ZERO;
-        pinSet[1][IDX_PS_CMPDN+IDX_PS_OFF] = GPIO_OUT_ONE;
-    }
-
+	
     //power ON
     if (On) {
-
-            ISP_MCLK1_EN(1);
-
-        PK_DBG("[PowerON]pinSetIdx:%d, currSensorName: %s\n", pinSetIdx, currSensorName);
-#ifdef GPIO_CAMERA_AF_EN_PIN
-		mt_set_gpio_mode(GPIO_CAMERA_AF_EN_PIN,GPIO_MODE_00);
-		mt_set_gpio_dir(GPIO_CAMERA_AF_EN_PIN,GPIO_DIR_OUT);
-		mt_set_gpio_out(GPIO_CAMERA_AF_EN_PIN,GPIO_OUT_ONE);
-#endif
-
-
-        if ((currSensorName && (0 == strcmp(currSensorName,"imx135mipiraw")))||
-            (currSensorName && (0 == strcmp(currSensorName,"imx220mipiraw"))))
+		PK_DBG("kdCISModulePowerOn -on:currSensorName=%s\n",currSensorName);
+		PK_DBG("kdCISModulePowerOn -on:pinSetIdx=%d\n",pinSetIdx);
+		#if defined(CONFIG_T925C_LG) || defined(CONFIG_T925U_YS_T925) || defined(CONFIG_T825_PROJ) || defined(CONFIG_T985D_HD_PROJ) || defined(OV9760_MIPI_RAW)
+			config_subsensor_rst_pwd_when_nosub(currSensorName);
+		#endif
+		for(pwListIdx=0 ; pwListIdx<16; pwListIdx++)
+		{
+			if(currSensorName && (PowerOnList.PowerSeq[pwListIdx].SensorName!=NULL) && (0 == strcmp(PowerOnList.PowerSeq[pwListIdx].SensorName,currSensorName)))
+			{
+				PK_DBG("kdCISModulePowerOn get in--- \n");
+				PK_DBG("sensorIdx:%d \n",SensorIdx);
+
+                sensorInPowerList = KAL_TRUE;
+
+				for(pwIdx=0;pwIdx<10;pwIdx++)
+				{  
+					if(PowerOnList.PowerSeq[pwListIdx].PowerInfo[pwIdx].PowerType != VDD_None)
+					{
+						if(hwpoweron(PowerOnList.PowerSeq[pwListIdx].PowerInfo[pwIdx],mode_name)==FALSE)
+							goto _kdCISModulePowerOn_exit_;
+					}					
+					else
+					{
+						PK_DBG("pwIdx=%d \n",pwIdx);
+						break;
+					}
+				}
+				break;
+			}
+			else if(PowerOnList.PowerSeq[pwListIdx].SensorName == NULL)
+			{	
+				break;
+			}
+			else{}
+		}
+
+        // Temp solution: default power on/off sequence
+        if(KAL_FALSE == sensorInPowerList)
         {
+            PK_DBG("Default power on sequence");
+            
+            if(pinSetIdx == 0 ) {
+                ISP_MCLK1_EN(1);
+            }
+            else if (pinSetIdx == 1) {
+                ISP_MCLK1_EN(1);
+            }
+
             //First Power Pin low and Reset Pin Low
             if (GPIO_CAMERA_INVALID != pinSet[pinSetIdx][IDX_PS_CMPDN]) {
                 if(mt_set_gpio_mode(pinSet[pinSetIdx][IDX_PS_CMPDN],pinSet[pinSetIdx][IDX_PS_CMPDN+IDX_PS_MODE])){PK_DBG("[CAMERA LENS] set gpio mode failed!! (CMPDN)\n");}
@@ -252,1425 +1300,206 @@ u32 pinSet[3][8] = {
                 if(mt_set_gpio_out(pinSet[pinSetIdx][IDX_PS_CMPDN],pinSet[pinSetIdx][IDX_PS_CMPDN+IDX_PS_OFF])){PK_DBG("[CAMERA LENS] set gpio failed!! (CMPDN)\n");}
             }
 
-
             if (GPIO_CAMERA_INVALID != pinSet[pinSetIdx][IDX_PS_CMRST]) {
-                if(mt_set_gpio_mode(pinSet[pinSetIdx][IDX_PS_CMRST],pinSet[pinSetIdx][IDX_PS_CMRST+IDX_PS_MODE])){PK_DBG("[CAMERA SENSOR] set gpio mode failed!! (CMRST)\n");}
-                if(mt_set_gpio_dir(pinSet[pinSetIdx][IDX_PS_CMRST],GPIO_DIR_OUT)){PK_DBG("[CAMERA SENSOR] set gpio dir failed!! (CMRST)\n");}
-                if(mt_set_gpio_out(pinSet[pinSetIdx][IDX_PS_CMRST],pinSet[pinSetIdx][IDX_PS_CMRST+IDX_PS_OFF])){PK_DBG("[CAMERA SENSOR] set gpio failed!! (CMRST)\n");}
+                if(0 == pinSetIdx) {
+#ifndef MTK_MT6306_SUPPORT
+                    if(mt_set_gpio_mode(pinSet[pinSetIdx][IDX_PS_CMRST],pinSet[pinSetIdx][IDX_PS_CMRST+IDX_PS_MODE])){PK_DBG("[CAMERA SENSOR] set gpio mode failed!! (CMRST)\n");}
+                    if(mt_set_gpio_dir(pinSet[pinSetIdx][IDX_PS_CMRST],GPIO_DIR_OUT)){PK_DBG("[CAMERA SENSOR] set gpio dir failed!! (CMRST)\n");}
+                    if(mt_set_gpio_out(pinSet[pinSetIdx][IDX_PS_CMRST],pinSet[pinSetIdx][IDX_PS_CMRST+IDX_PS_OFF])){PK_DBG("[CAMERA SENSOR] set gpio failed!! (CMRST)\n");}
+#else
+                    if(mt6306_set_gpio_dir(pinSet[pinSetIdx][IDX_PS_CMRST],GPIO_DIR_OUT)){PK_DBG("[CAMERA SENSOR] set gpio dir failed!! (CMRST)\n");}
+                    if(mt6306_set_gpio_out(pinSet[pinSetIdx][IDX_PS_CMRST],pinSet[pinSetIdx][IDX_PS_CMRST+IDX_PS_OFF])){PK_DBG("[CAMERA SENSOR] set gpio failed!! (CMRST)\n");}                                   
+#endif                    
+                }
+                else {
+                    if(mt_set_gpio_mode(pinSet[pinSetIdx][IDX_PS_CMRST],pinSet[pinSetIdx][IDX_PS_CMRST+IDX_PS_MODE])){PK_DBG("[CAMERA SENSOR] set gpio mode failed!! (CMRST)\n");}
+                    if(mt_set_gpio_dir(pinSet[pinSetIdx][IDX_PS_CMRST],GPIO_DIR_OUT)){PK_DBG("[CAMERA SENSOR] set gpio dir failed!! (CMRST)\n");}
+                    if(mt_set_gpio_out(pinSet[pinSetIdx][IDX_PS_CMRST],pinSet[pinSetIdx][IDX_PS_CMRST+IDX_PS_OFF])){PK_DBG("[CAMERA SENSOR] set gpio failed!! (CMRST)\n");}
+                }                
             }
 
-            //AF_VCC
-            if(TRUE != _hwPowerOn(CAMERA_POWER_VCAM_AF, VOL_2800,mode_name))
+            //VCAM_IO
+            if(TRUE != hwPowerOn(CAMERA_POWER_VCAM_IO, VOL_1800, mode_name))
             {
-                PK_DBG("[CAMERA SENSOR] Fail to enable analog power (VCAM_AF), power id = %d \n", CAMERA_POWER_VCAM_AF);
+                PK_DBG("[CAMERA SENSOR] Fail to enable digital power (VCAM_IO), power id = %d \n", CAMERA_POWER_VCAM_IO);
                 goto _kdCISModulePowerOn_exit_;
             }
 
-            mdelay(1);
-
             //VCAM_A
-            if(TRUE != _hwPowerOn(CAMERA_POWER_VCAM_A, VOL_2800,mode_name))
+            if(TRUE != hwPowerOn(CAMERA_POWER_VCAM_A, VOL_2800,mode_name))
             {
                 PK_DBG("[CAMERA SENSOR] Fail to enable analog power (VCAM_A), power id = %d\n", CAMERA_POWER_VCAM_A);
                 goto _kdCISModulePowerOn_exit_;
             }
 
-            mdelay(1);
-
-            if(TRUE != _hwPowerOn(CAMERA_POWER_VCAM_D, VOL_1000,mode_name))
+            if(TRUE != hwPowerOn(CAMERA_POWER_VCAM_D, VOL_1800,mode_name))
             {
                  PK_DBG("[CAMERA SENSOR] Fail to enable digital power (VCAM_D), power id = %d \n", CAMERA_POWER_VCAM_D);
                  goto _kdCISModulePowerOn_exit_;
             }
-
-            mdelay(1);
-
-            //VCAM_IO
-            if(TRUE != _hwPowerOn(CAMERA_POWER_VCAM_IO, VOL_1800, mode_name))
+#ifndef CONFIG_HCT_AF_POWER_ON_NOISE
+             //AF_VCC
+            if(TRUE != hwPowerOn(CAMERA_POWER_VCAM_AF, VOL_2800,mode_name))
             {
-                PK_DBG("[CAMERA SENSOR] Fail to enable digital power (VCAM_IO), power id = %d \n", CAMERA_POWER_VCAM_IO);
+                PK_DBG("[CAMERA SENSOR] Fail to enable analog power (VCAM_AF), power id = %d \n", CAMERA_POWER_VCAM_AF);
                 goto _kdCISModulePowerOn_exit_;
             }
 
-            mdelay(2);
+            mdelay(5);
+#endif
+            //enable active sensor
+            if (GPIO_CAMERA_INVALID != pinSet[pinSetIdx][IDX_PS_CMPDN]) {
+                if(mt_set_gpio_mode(pinSet[pinSetIdx][IDX_PS_CMPDN],pinSet[pinSetIdx][IDX_PS_CMPDN+IDX_PS_MODE])){PK_DBG("[CAMERA LENS] set gpio mode failed!! (CMPDN)\n");}
+                if(mt_set_gpio_dir(pinSet[pinSetIdx][IDX_PS_CMPDN],GPIO_DIR_OUT)){PK_DBG("[CAMERA LENS] set gpio dir failed!! (CMPDN)\n");}
+                if(mt_set_gpio_out(pinSet[pinSetIdx][IDX_PS_CMPDN],pinSet[pinSetIdx][IDX_PS_CMPDN+IDX_PS_ON])){PK_DBG("[CAMERA LENS] set gpio failed!! (CMPDN)\n");}
+            }
 
+            mdelay(1);
 
-            //enable active sensor
             if (GPIO_CAMERA_INVALID != pinSet[pinSetIdx][IDX_PS_CMRST]) {
-                if(mt_set_gpio_mode(pinSet[pinSetIdx][IDX_PS_CMRST],pinSet[pinSetIdx][IDX_PS_CMRST+IDX_PS_MODE])){PK_DBG("[CAMERA SENSOR] set gpio mode failed!! (CMRST)\n");}
-                if(mt_set_gpio_dir(pinSet[pinSetIdx][IDX_PS_CMRST],GPIO_DIR_OUT)){PK_DBG("[CAMERA SENSOR] set gpio dir failed!! (CMRST)\n");}
-                if(mt_set_gpio_out(pinSet[pinSetIdx][IDX_PS_CMRST],pinSet[pinSetIdx][IDX_PS_CMRST+IDX_PS_ON])){PK_DBG("[CAMERA SENSOR] set gpio failed!! (CMRST)\n");}
-            }
+                 if(0 == pinSetIdx) {
+#ifndef MTK_MT6306_SUPPORT
+                    if(mt_set_gpio_mode(pinSet[pinSetIdx][IDX_PS_CMRST],pinSet[pinSetIdx][IDX_PS_CMRST+IDX_PS_MODE])){PK_DBG("[CAMERA SENSOR] set gpio mode failed!! (CMRST)\n");}
+                    if(mt_set_gpio_dir(pinSet[pinSetIdx][IDX_PS_CMRST],GPIO_DIR_OUT)){PK_DBG("[CAMERA SENSOR] set gpio dir failed!! (CMRST)\n");}
+                    if(mt_set_gpio_out(pinSet[pinSetIdx][IDX_PS_CMRST],pinSet[pinSetIdx][IDX_PS_CMRST+IDX_PS_ON])){PK_DBG("[CAMERA SENSOR] set gpio failed!! (CMRST)\n");}
+#else
+                    if(mt6306_set_gpio_dir(pinSet[pinSetIdx][IDX_PS_CMRST],GPIO_DIR_OUT)){PK_DBG("[CAMERA SENSOR] set gpio dir failed!! (CMRST)\n");}
+                    if(mt6306_set_gpio_out(pinSet[pinSetIdx][IDX_PS_CMRST],pinSet[pinSetIdx][IDX_PS_CMRST+IDX_PS_ON])){PK_DBG("[CAMERA SENSOR] set gpio failed!! (CMRST)\n");}                
+#endif 
 
-            if (GPIO_CAMERA_INVALID != pinSet[pinSetIdx][IDX_PS_CMPDN]) {
-                if(mt_set_gpio_out(pinSet[pinSetIdx][IDX_PS_CMPDN],pinSet[pinSetIdx][IDX_PS_CMPDN+IDX_PS_ON])){PK_DBG("[CAMERA LENS] set gpio failed!! (CMPDN)\n");}
+                }
+                else {  
+                    if(mt_set_gpio_mode(pinSet[pinSetIdx][IDX_PS_CMRST],pinSet[pinSetIdx][IDX_PS_CMRST+IDX_PS_MODE])){PK_DBG("[CAMERA SENSOR] set gpio mode failed!! (CMRST)\n");}
+                    if(mt_set_gpio_dir(pinSet[pinSetIdx][IDX_PS_CMRST],GPIO_DIR_OUT)){PK_DBG("[CAMERA SENSOR] set gpio dir failed!! (CMRST)\n");}
+                    if(mt_set_gpio_out(pinSet[pinSetIdx][IDX_PS_CMRST],pinSet[pinSetIdx][IDX_PS_CMRST+IDX_PS_ON])){PK_DBG("[CAMERA SENSOR] set gpio failed!! (CMRST)\n");}         
+                }
             }
 
+            
+        
+
         }
-        else if ((currSensorName && (0 == strcmp(SENSOR_DRVNAME_OV2680_MIPI_RAW, currSensorName))) \
-                                                                                                      )
+		/*
+		if(pinSetIdx==0)
+			for(;;)
+				{}
+		*/
+		/*
+		if(pinSetIdx==1)
+			for(;;)
+				{}
+ 		*/
+		}
+    else {//power OFF
+	for(pwListIdx=0 ; pwListIdx<16; pwListIdx++)
+		{
+			if(currSensorName && (PowerOnList.PowerSeq[pwListIdx].SensorName!=NULL) && (0 == strcmp(PowerOnList.PowerSeq[pwListIdx].SensorName,currSensorName)))
+			{
+				PK_DBG("kdCISModulePowerOn get in--- \n");
+				PK_DBG("sensorIdx:%d \n",SensorIdx);
+
+                sensorInPowerList = KAL_TRUE;
+
+				for(pwIdx=9;pwIdx>=0;pwIdx--)
+				{  
+					if(PowerOnList.PowerSeq[pwListIdx].PowerInfo[pwIdx].PowerType != VDD_None)
+					{
+						if(hwpowerdown(PowerOnList.PowerSeq[pwListIdx].PowerInfo[pwIdx],mode_name)==FALSE)
+							goto _kdCISModulePowerOn_exit_;
+						if(pwIdx>0)
+						{
+							if(PowerOnList.PowerSeq[pwListIdx].PowerInfo[pwIdx-1].Delay > 0)
+								mdelay(PowerOnList.PowerSeq[pwListIdx].PowerInfo[pwIdx-1].Delay);
+						}
+					}					
+					else
+					{
+						PK_DBG("pwIdx=%d \n",pwIdx);
+					}
+				}
+			}
+			else if(PowerOnList.PowerSeq[pwListIdx].SensorName == NULL)
+			{	
+				break;
+			}
+			else{}
+		}
+
+        // Temp solution: default power on/off sequence
+        if(KAL_FALSE == sensorInPowerList)
         {
-      #ifdef GPIO_CAMERA_LDO_EN_PIN
-            mt_set_gpio_mode(GPIO_CAMERA_LDO_EN_PIN,GPIO_MODE_00);
-            mt_set_gpio_dir(GPIO_CAMERA_LDO_EN_PIN,GPIO_DIR_OUT);
-            mt_set_gpio_out(GPIO_CAMERA_LDO_EN_PIN,GPIO_OUT_ONE);
-#endif
-            //First Power Pin low and Reset Pin Low
+            PK_DBG("Default power off sequence");
+            
+            if(pinSetIdx == 0 ) {
+                ISP_MCLK1_EN(0);
+            }
+            else if (pinSetIdx == 1) {
+                ISP_MCLK1_EN(0);
+            }
+
+            //Set Power Pin low and Reset Pin Low
             if (GPIO_CAMERA_INVALID != pinSet[pinSetIdx][IDX_PS_CMPDN]) {
                 if(mt_set_gpio_mode(pinSet[pinSetIdx][IDX_PS_CMPDN],pinSet[pinSetIdx][IDX_PS_CMPDN+IDX_PS_MODE])){PK_DBG("[CAMERA LENS] set gpio mode failed!! (CMPDN)\n");}
                 if(mt_set_gpio_dir(pinSet[pinSetIdx][IDX_PS_CMPDN],GPIO_DIR_OUT)){PK_DBG("[CAMERA LENS] set gpio dir failed!! (CMPDN)\n");}
                 if(mt_set_gpio_out(pinSet[pinSetIdx][IDX_PS_CMPDN],pinSet[pinSetIdx][IDX_PS_CMPDN+IDX_PS_OFF])){PK_DBG("[CAMERA LENS] set gpio failed!! (CMPDN)\n");}
             }
 
+            
             if (GPIO_CAMERA_INVALID != pinSet[pinSetIdx][IDX_PS_CMRST]) {
-                if(mt_set_gpio_mode(pinSet[pinSetIdx][IDX_PS_CMRST],pinSet[pinSetIdx][IDX_PS_CMRST+IDX_PS_MODE])){PK_DBG("[CAMERA SENSOR] set gpio mode failed!! (CMRST)\n");}
-                if(mt_set_gpio_dir(pinSet[pinSetIdx][IDX_PS_CMRST],GPIO_DIR_OUT)){PK_DBG("[CAMERA SENSOR] set gpio dir failed!! (CMRST)\n");}
-                if(mt_set_gpio_out(pinSet[pinSetIdx][IDX_PS_CMRST],pinSet[pinSetIdx][IDX_PS_CMRST+IDX_PS_OFF])){PK_DBG("[CAMERA SENSOR] set gpio failed!! (CMRST)\n");}
+                if(0 == pinSetIdx) {
+#ifndef MTK_MT6306_SUPPORT
+                    if(mt_set_gpio_mode(pinSet[pinSetIdx][IDX_PS_CMRST],pinSet[pinSetIdx][IDX_PS_CMRST+IDX_PS_MODE])){PK_DBG("[CAMERA SENSOR] set gpio mode failed!! (CMRST)\n");}
+                    if(mt_set_gpio_dir(pinSet[pinSetIdx][IDX_PS_CMRST],GPIO_DIR_OUT)){PK_DBG("[CAMERA SENSOR] set gpio dir failed!! (CMRST)\n");}
+                    if(mt_set_gpio_out(pinSet[pinSetIdx][IDX_PS_CMRST],pinSet[pinSetIdx][IDX_PS_CMRST+IDX_PS_OFF])){PK_DBG("[CAMERA SENSOR] set gpio failed!! (CMRST)\n");}
+#else
+                    if(mt6306_set_gpio_dir(pinSet[pinSetIdx][IDX_PS_CMRST],GPIO_DIR_OUT)){PK_DBG("[CAMERA SENSOR] set gpio dir failed!! (CMRST)\n");}
+                    if(mt6306_set_gpio_out(pinSet[pinSetIdx][IDX_PS_CMRST],pinSet[pinSetIdx][IDX_PS_CMRST+IDX_PS_OFF])){PK_DBG("[CAMERA SENSOR] set gpio failed!! (CMRST)\n");}                  
+#endif
+                }
+                else {
+                    if(mt_set_gpio_mode(pinSet[pinSetIdx][IDX_PS_CMRST],pinSet[pinSetIdx][IDX_PS_CMRST+IDX_PS_MODE])){PK_DBG("[CAMERA SENSOR] set gpio mode failed!! (CMRST)\n");}
+                    if(mt_set_gpio_dir(pinSet[pinSetIdx][IDX_PS_CMRST],GPIO_DIR_OUT)){PK_DBG("[CAMERA SENSOR] set gpio dir failed!! (CMRST)\n");}
+                    if(mt_set_gpio_out(pinSet[pinSetIdx][IDX_PS_CMRST],pinSet[pinSetIdx][IDX_PS_CMRST+IDX_PS_OFF])){PK_DBG("[CAMERA SENSOR] set gpio failed!! (CMRST)\n");}               
+                }               
             }
+            
 
-
-            //VCAM_IO
-            if(TRUE != _hwPowerOn(CAMERA_POWER_VCAM_IO, VOL_1800, mode_name))
+            if(TRUE != hwPowerDown(CAMERA_POWER_VCAM_D,mode_name))
             {
-                PK_DBG("[CAMERA SENSOR] Fail to enable digital power (VCAM_IO), power id = %d \n", CAMERA_POWER_VCAM_IO);
-        //        goto _kdCISModulePowerOn_exit_;
+                 PK_DBG("[CAMERA SENSOR] Fail to OFF core power (VCAM_D), power id = %d \n",CAMERA_POWER_VCAM_D);
+                 goto _kdCISModulePowerOn_exit_;
             }
 
-            mdelay(1);
-
             //VCAM_A
-            if(TRUE != _hwPowerOn(CAMERA_POWER_VCAM_A, VOL_2800,mode_name))
-            {
-                PK_DBG("[CAMERA SENSOR] Fail to enable analog power (VCAM_A), power id = %d\n", CAMERA_POWER_VCAM_A);
-       //         goto _kdCISModulePowerOn_exit_;
-            }
-
-            mdelay(1);
-            if(TRUE != _hwPowerOn(SUB_CAMERA_POWER_VCAM_D, VOL_1600,mode_name))
-            {
-                 PK_DBG("[CAMERA SENSOR] Fail to enable digital power (VCAM_D), power id = %d \n", SUB_CAMERA_POWER_VCAM_D);
-                 goto _kdCISModulePowerOn_exit_;
-            }
-
-            mdelay(5);
-            if(TRUE != _hwPowerOn(CAMERA_POWER_VCAM_D, VOL_1600,mode_name))
-            {
-                 PK_DBG("[CAMERA SENSOR] Fail to enable digital power (VCAM_D), power id = %d \n", CAMERA_POWER_VCAM_D);
-     //            goto _kdCISModulePowerOn_exit_;
-            }
-
-            mdelay(1);
-
-            //AF_VCC
-            if(TRUE != _hwPowerOn(CAMERA_POWER_VCAM_AF, VOL_2800,mode_name))
-            {
-                PK_DBG("[CAMERA SENSOR] Fail to enable analog power (VCAM_AF), power id = %d \n", CAMERA_POWER_VCAM_AF);
-      //          goto _kdCISModulePowerOn_exit_;
-            }
-
-
-            mdelay(1);
-
-
-            //enable active sensor
-            if (GPIO_CAMERA_INVALID != pinSet[pinSetIdx][IDX_PS_CMPDN]) {
-                if(mt_set_gpio_mode(pinSet[pinSetIdx][IDX_PS_CMPDN],pinSet[pinSetIdx][IDX_PS_CMPDN+IDX_PS_MODE])){PK_DBG("[CAMERA LENS] set gpio mode failed!! (CMPDN)\n");}
-                if(mt_set_gpio_dir(pinSet[pinSetIdx][IDX_PS_CMPDN],GPIO_DIR_OUT)){PK_DBG("[CAMERA LENS] set gpio dir failed!! (CMPDN)\n");}
-                if(mt_set_gpio_out(pinSet[pinSetIdx][IDX_PS_CMPDN],pinSet[pinSetIdx][IDX_PS_CMPDN+IDX_PS_ON])){PK_DBG("[CAMERA LENS] set gpio failed!! (CMPDN)\n");}
-            }
-
-
-            mdelay(2);
-
-
-            if (GPIO_CAMERA_INVALID != pinSet[pinSetIdx][IDX_PS_CMRST]) {
-                if(mt_set_gpio_mode(pinSet[pinSetIdx][IDX_PS_CMRST],pinSet[pinSetIdx][IDX_PS_CMRST+IDX_PS_MODE])){PK_DBG("[CAMERA SENSOR] set gpio mode failed!! (CMRST)\n");}
-                if(mt_set_gpio_dir(pinSet[pinSetIdx][IDX_PS_CMRST],GPIO_DIR_OUT)){PK_DBG("[CAMERA SENSOR] set gpio dir failed!! (CMRST)\n");}
-                if(mt_set_gpio_out(pinSet[pinSetIdx][IDX_PS_CMRST],pinSet[pinSetIdx][IDX_PS_CMRST+IDX_PS_ON])){PK_DBG("[CAMERA SENSOR] set gpio failed!! (CMRST)\n");}
-
-            }
-
-            mdelay(20);
-        }
-        else if (currSensorName && (0 == strcmp(SENSOR_DRVNAME_S5K3M2_MIPI_RAW, currSensorName))){
-        #ifdef GPIO_CAMERA_LDO_EN_PIN
-            mt_set_gpio_mode(GPIO_CAMERA_LDO_EN_PIN,GPIO_MODE_00);
-            mt_set_gpio_dir(GPIO_CAMERA_LDO_EN_PIN,GPIO_DIR_OUT);
-            mt_set_gpio_out(GPIO_CAMERA_LDO_EN_PIN,GPIO_OUT_ONE);
-        #endif
-            //First Power Pin low and Reset Pin Low
-            if (GPIO_CAMERA_INVALID != pinSet[pinSetIdx][IDX_PS_CMPDN]) {
-                if(mt_set_gpio_mode(pinSet[pinSetIdx][IDX_PS_CMPDN],pinSet[pinSetIdx][IDX_PS_CMPDN+IDX_PS_MODE])){
-                    PK_DBG("[CAMERA LENS] set gpio mode  failed!! (CMPDN)\n");
-                }
-                if(mt_set_gpio_dir(pinSet[pinSetIdx][IDX_PS_CMPDN],GPIO_DIR_OUT)){
-                    PK_DBG("[CAMERA LENS] set gpio dir failed!! (CMPDN)\n");
-                }
-                if(mt_set_gpio_out(pinSet[pinSetIdx][IDX_PS_CMPDN],pinSet[pinSetIdx][IDX_PS_CMPDN+IDX_PS_OFF])){
-                    PK_DBG("[CAMERA LENS] set gpio         failed!! (CMPDN)\n");
-                }
-            }
-            if (GPIO_CAMERA_INVALID != pinSet[pinSetIdx][IDX_PS_CMRST]) {
-                if(mt_set_gpio_mode(pinSet[pinSetIdx][IDX_PS_CMRST],pinSet[pinSetIdx][IDX_PS_CMRST+IDX_PS_MODE])){
-                    PK_DBG("[CAMERA SENSOR] set gpio     mode failed!! (CMRST)\n");
-                }
-                if(mt_set_gpio_dir(pinSet[pinSetIdx][IDX_PS_CMRST],GPIO_DIR_OUT)){
-                    PK_DBG("[CAMERA SENSOR] set gpio dir failed!! (CMRST)\n");
-                }
-                if(mt_set_gpio_out(pinSet[pinSetIdx][IDX_PS_CMRST],pinSet[pinSetIdx][IDX_PS_CMRST+IDX_PS_OFF])){
-                    PK_DBG("[CAMERA SENSOR] set gpio       failed!! (CMRST)\n");
-                }
-            }
-            //VCAM_D
-            if(TRUE != _hwPowerOn(CAMERA_POWER_VCAM_D, VOL_1100,mode_name))
-            {
-                PK_DBG("[CAMERA SENSOR] Fail to enable digital power\n");
-                goto _kdCISModulePowerOn_exit_;
-            }
-            //VCAM_A
-            if(TRUE != _hwPowerOn(CAMERA_POWER_VCAM_A, VOL_2800,mode_name)){
-                PK_DBG("[CAMERA SENSOR] Fail to enable analog power (VCAM_A), power id = %d\n", CAMERA_POWER_VCAM_A);
-                 goto _kdCISModulePowerOn_exit_;
-            }
-            //VCAM_IO
-            if(TRUE != _hwPowerOn(CAMERA_POWER_VCAM_IO, VOL_1800, mode_name)){
-                 PK_DBG("[CAMERA SENSOR] Fail to enable digital power (VCAM_IO), power id = %d \n", CAMERA_POWER_VCAM_IO);
-                 goto _kdCISModulePowerOn_exit_;
-            }
-            //AF_VCC
-            if(TRUE != _hwPowerOn(CAMERA_POWER_VCAM_AF, VOL_2800,mode_name)){
-                PK_DBG("[CAMERA SENSOR] Fail to enable analog power (VCAM_AF), power id = %d \n", CAMERA_POWER_VCAM_AF);
-                goto _kdCISModulePowerOn_exit_;
-            }
-
-            if (GPIO_CAMERA_INVALID != pinSet[pinSetIdx][IDX_PS_CMPDN]) {
-                if(mt_set_gpio_mode(pinSet[pinSetIdx][IDX_PS_CMPDN],pinSet[pinSetIdx][IDX_PS_CMPDN+IDX_PS_MODE])){
-                    PK_DBG("[CAMERA LENS] set gpio mode  failed!! (CMPDN)\n");
-                }
-                if(mt_set_gpio_dir(pinSet[pinSetIdx][IDX_PS_CMPDN],GPIO_DIR_OUT)){
-                    PK_DBG("[CAMERA LENS] set gpio dir failed!! (CMPDN)\n");
-                }
-                if(mt_set_gpio_out(pinSet[pinSetIdx][IDX_PS_CMPDN],pinSet[pinSetIdx][IDX_PS_CMPDN+IDX_PS_ON])){
-                    PK_DBG("[CAMERA LENS] set gpio failed!! (CMPDN)\n");
-                }
-            }
-            mdelay(2);
-            if (GPIO_CAMERA_INVALID != pinSet[pinSetIdx][IDX_PS_CMRST]) {
-                if(mt_set_gpio_mode(pinSet[pinSetIdx][IDX_PS_CMRST],pinSet[pinSetIdx][IDX_PS_CMRST+IDX_PS_MODE])){
-                    PK_DBG("[CAMERA SENSOR] set gpio     mode failed!! (CMRST)\n");
-                }
-                if(mt_set_gpio_dir(pinSet[pinSetIdx][IDX_PS_CMRST],GPIO_DIR_OUT)){
-                    PK_DBG("[CAMERA SENSOR] set gpio dir failed!! (CMRST)\n");
-                }
-                if(mt_set_gpio_out(pinSet[pinSetIdx][IDX_PS_CMRST],pinSet[pinSetIdx][IDX_PS_CMRST+IDX_PS_ON])){
-                    PK_DBG("[CAMERA SENSOR] set gpio        failed!! (CMRST)\n");
-                }
-            }
-       }
-        else if(currSensorName && (0 == strcmp(SENSOR_DRVNAME_GC2035_YUV, currSensorName)))
-        {
-
-        #ifdef GPIO_CAMERA_LDO_EN_PIN
-            mt_set_gpio_mode(GPIO_CAMERA_LDO_EN_PIN,GPIO_MODE_00);
-            mt_set_gpio_dir(GPIO_CAMERA_LDO_EN_PIN,GPIO_DIR_OUT);
-            mt_set_gpio_out(GPIO_CAMERA_LDO_EN_PIN,GPIO_OUT_ONE);
-        #endif
-                mdelay(5); 
-            //First Power Pin low and Reset Pin Low
-            if (GPIO_CAMERA_INVALID != pinSet[pinSetIdx][IDX_PS_CMPDN]) {
-                if(mt_set_gpio_mode(pinSet[pinSetIdx][IDX_PS_CMPDN],pinSet[pinSetIdx][IDX_PS_CMPDN+IDX_PS_MODE])){
-                      PK_DBG("[CAMERA LENS] set gpio mode  failed!! (CMPDN)\n");
-                }
-                if(mt_set_gpio_dir(pinSet[pinSetIdx][IDX_PS_CMPDN],GPIO_DIR_OUT)){
-                      PK_DBG("[CAMERA LENS] set gpio dir failed!! (CMPDN)\n");
-                }
-                if(mt_set_gpio_out(pinSet[pinSetIdx][IDX_PS_CMPDN],pinSet[pinSetIdx][IDX_PS_CMPDN+IDX_PS_OFF])){
-                      PK_DBG("[CAMERA LENS] set gpio         failed!! (CMPDN)\n");
-                }
-            }    
-
-            if (GPIO_CAMERA_INVALID != pinSet[pinSetIdx][IDX_PS_CMRST]) {
-                if(mt_set_gpio_mode(pinSet[pinSetIdx][IDX_PS_CMRST],pinSet[pinSetIdx][IDX_PS_CMRST+IDX_PS_MODE])){
-                      PK_DBG("[CAMERA SENSOR] set gpio     mode failed!! (CMRST)\n");
-                }
-                if(mt_set_gpio_dir(pinSet[pinSetIdx][IDX_PS_CMRST],GPIO_DIR_OUT)){
-                      PK_DBG("[CAMERA SENSOR] set gpio dir failed!! (CMRST)\n");
-                }
-                if(mt_set_gpio_out(pinSet[pinSetIdx][IDX_PS_CMRST],pinSet[pinSetIdx][IDX_PS_CMRST+IDX_PS_OFF])){
-                      PK_DBG("[CAMERA SENSOR] set gpio       failed!! (CMRST)\n");
-                }
-            } 
-
-            //VCAM_D        
-            if(TRUE != _hwPowerOn(CAMERA_POWER_VCAM_D, VOL_1200,mode_name))
-            {
-                     PK_DBG("[CAMERA SENSOR] Fail to enable digital power\n");
-                     goto _kdCISModulePowerOn_exit_;
-            }
-            mdelay(5);
-            //VCAM_A
-            if(TRUE != _hwPowerOn(CAMERA_POWER_VCAM_A, VOL_2800,mode_name))
-            {
-                PK_DBG("[CAMERA SENSOR] Fail to enable analog power (VCAM_A), power id = %d\n", CAMERA_POWER_VCAM_A);
-                goto _kdCISModulePowerOn_exit_;
-            }
-            mdelay(5);
-            //VCAM_IO
-            if(TRUE != _hwPowerOn(CAMERA_POWER_VCAM_IO, VOL_1800, mode_name))
-            {
-                PK_DBG("[CAMERA SENSOR] Fail to enable digital power (VCAM_IO), power id = %d \n", CAMERA_POWER_VCAM_IO);
-                goto _kdCISModulePowerOn_exit_;
-            }
-            mdelay(5);
-             //AF_VCC
-            if(TRUE != _hwPowerOn(CAMERA_POWER_VCAM_AF, VOL_2800,mode_name))
-            {
-                PK_DBG("[CAMERA SENSOR] Fail to enable analog power (VCAM_AF), power id = %d \n", CAMERA_POWER_VCAM_AF);
-                goto _kdCISModulePowerOn_exit_;
-            }
-            mdelay(5);
-
-            if (GPIO_CAMERA_INVALID != pinSet[pinSetIdx][IDX_PS_CMPDN]) {
-                if(mt_set_gpio_mode(pinSet[pinSetIdx][IDX_PS_CMPDN],pinSet[pinSetIdx][IDX_PS_CMPDN+IDX_PS_MODE])){
-                      PK_DBG("[CAMERA LENS] set gpio mode  failed!! (CMPDN)\n");
-                }
-                if(mt_set_gpio_dir(pinSet[pinSetIdx][IDX_PS_CMPDN],GPIO_DIR_OUT)){
-                      PK_DBG("[CAMERA LENS] set gpio dir failed!! (CMPDN)\n");
-                }
-                if(mt_set_gpio_out(pinSet[pinSetIdx][IDX_PS_CMPDN],pinSet[pinSetIdx][IDX_PS_CMPDN+IDX_PS_ON])){
-                      PK_DBG("[CAMERA LENS] set gpio failed!! (CMPDN)\n");
-                }
-            }
-            mdelay(2);
-            if (GPIO_CAMERA_INVALID != pinSet[pinSetIdx][IDX_PS_CMRST]) {
-                if(mt_set_gpio_mode(pinSet[pinSetIdx][IDX_PS_CMRST],pinSet[pinSetIdx][IDX_PS_CMRST+IDX_PS_MODE])){
-                        PK_DBG("[CAMERA SENSOR] set gpio     mode failed!! (CMRST)\n");
-                }
-                if(mt_set_gpio_dir(pinSet[pinSetIdx][IDX_PS_CMRST],GPIO_DIR_OUT)){
-                        PK_DBG("[CAMERA SENSOR] set gpio dir failed!! (CMRST)\n");
-                }
-                if(mt_set_gpio_out(pinSet[pinSetIdx][IDX_PS_CMRST],pinSet[pinSetIdx][IDX_PS_CMRST+IDX_PS_ON])){
-                        PK_DBG("[CAMERA SENSOR] set gpio        failed!! (CMRST)\n");
-                }
-
-            }
-        }
-        else if(currSensorName && (0 == strcmp(SENSOR_DRVNAME_S5K4H5YC_MIPI_RAW, currSensorName)))
-        {
-
-        #ifdef GPIO_CAMERA_LDO_EN_PIN
-            mt_set_gpio_mode(GPIO_CAMERA_LDO_EN_PIN,GPIO_MODE_00);
-            mt_set_gpio_dir(GPIO_CAMERA_LDO_EN_PIN,GPIO_DIR_OUT);
-            mt_set_gpio_out(GPIO_CAMERA_LDO_EN_PIN,GPIO_OUT_ONE);
-        #endif
-                 
-            //First Power Pin low and Reset Pin Low
-            if (GPIO_CAMERA_INVALID != pinSet[pinSetIdx][IDX_PS_CMPDN]) {
-                if(mt_set_gpio_mode(pinSet[pinSetIdx][IDX_PS_CMPDN],pinSet[pinSetIdx][IDX_PS_CMPDN+IDX_PS_MODE])){
-                      PK_DBG("[CAMERA LENS] set gpio mode  failed!! (CMPDN)\n");
-                }
-                if(mt_set_gpio_dir(pinSet[pinSetIdx][IDX_PS_CMPDN],GPIO_DIR_OUT)){
-                      PK_DBG("[CAMERA LENS] set gpio dir failed!! (CMPDN)\n");
-                }
-                if(mt_set_gpio_out(pinSet[pinSetIdx][IDX_PS_CMPDN],pinSet[pinSetIdx][IDX_PS_CMPDN+IDX_PS_OFF])){
-                      PK_DBG("[CAMERA LENS] set gpio         failed!! (CMPDN)\n");
-                }
-            }    
-
-            if (GPIO_CAMERA_INVALID != pinSet[pinSetIdx][IDX_PS_CMRST]) {
-                if(mt_set_gpio_mode(pinSet[pinSetIdx][IDX_PS_CMRST],pinSet[pinSetIdx][IDX_PS_CMRST+IDX_PS_MODE])){
-                      PK_DBG("[CAMERA SENSOR] set gpio     mode failed!! (CMRST)\n");
-                }
-                if(mt_set_gpio_dir(pinSet[pinSetIdx][IDX_PS_CMRST],GPIO_DIR_OUT)){
-                      PK_DBG("[CAMERA SENSOR] set gpio dir failed!! (CMRST)\n");
-                }
-                if(mt_set_gpio_out(pinSet[pinSetIdx][IDX_PS_CMRST],pinSet[pinSetIdx][IDX_PS_CMRST+IDX_PS_OFF])){
-                      PK_DBG("[CAMERA SENSOR] set gpio       failed!! (CMRST)\n");
-                }
-            } 
-
-            //VCAM_D        
-            if(TRUE != _hwPowerOn(CAMERA_POWER_VCAM_D, VOL_1200,mode_name))
-            {
-                     PK_DBG("[CAMERA SENSOR] Fail to enable digital power\n");
-                     goto _kdCISModulePowerOn_exit_;
-            }
-            //VCAM_A
-            if(TRUE != _hwPowerOn(CAMERA_POWER_VCAM_A, VOL_2800,mode_name))
-            {
-                PK_DBG("[CAMERA SENSOR] Fail to enable analog power (VCAM_A), power id = %d\n", CAMERA_POWER_VCAM_A);
-                goto _kdCISModulePowerOn_exit_;
-            }
-            //VCAM_IO
-            if(TRUE != _hwPowerOn(CAMERA_POWER_VCAM_IO, VOL_1800, mode_name))
-            {
-                PK_DBG("[CAMERA SENSOR] Fail to enable digital power (VCAM_IO), power id = %d \n", CAMERA_POWER_VCAM_IO);
-                goto _kdCISModulePowerOn_exit_;
-            }
-             //AF_VCC
-            if(TRUE != _hwPowerOn(CAMERA_POWER_VCAM_AF, VOL_2800,mode_name))
-            {
-                PK_DBG("[CAMERA SENSOR] Fail to enable analog power (VCAM_AF), power id = %d \n", CAMERA_POWER_VCAM_AF);
-                goto _kdCISModulePowerOn_exit_;
-            }
-
-
-            if (GPIO_CAMERA_INVALID != pinSet[pinSetIdx][IDX_PS_CMPDN]) {
-                if(mt_set_gpio_mode(pinSet[pinSetIdx][IDX_PS_CMPDN],pinSet[pinSetIdx][IDX_PS_CMPDN+IDX_PS_MODE])){
-                      PK_DBG("[CAMERA LENS] set gpio mode  failed!! (CMPDN)\n");
-                }
-                if(mt_set_gpio_dir(pinSet[pinSetIdx][IDX_PS_CMPDN],GPIO_DIR_OUT)){
-                      PK_DBG("[CAMERA LENS] set gpio dir failed!! (CMPDN)\n");
-                }
-                if(mt_set_gpio_out(pinSet[pinSetIdx][IDX_PS_CMPDN],pinSet[pinSetIdx][IDX_PS_CMPDN+IDX_PS_ON])){
-                      PK_DBG("[CAMERA LENS] set gpio failed!! (CMPDN)\n");
-                }
-            }
-            mdelay(2);
-            if (GPIO_CAMERA_INVALID != pinSet[pinSetIdx][IDX_PS_CMRST]) {
-                if(mt_set_gpio_mode(pinSet[pinSetIdx][IDX_PS_CMRST],pinSet[pinSetIdx][IDX_PS_CMRST+IDX_PS_MODE])){
-                        PK_DBG("[CAMERA SENSOR] set gpio     mode failed!! (CMRST)\n");
-                }
-                if(mt_set_gpio_dir(pinSet[pinSetIdx][IDX_PS_CMRST],GPIO_DIR_OUT)){
-                        PK_DBG("[CAMERA SENSOR] set gpio dir failed!! (CMRST)\n");
-                }
-                if(mt_set_gpio_out(pinSet[pinSetIdx][IDX_PS_CMRST],pinSet[pinSetIdx][IDX_PS_CMRST+IDX_PS_ON])){
-                        PK_DBG("[CAMERA SENSOR] set gpio        failed!! (CMRST)\n");
-                }
-
-            }
-        }
-        else if(currSensorName && (0 == strcmp(SENSOR_DRVNAME_S5K5E2YA_MIPI_RAW, currSensorName))){
-        #ifdef GPIO_CAMERA_LDO_EN_PIN
-            mt_set_gpio_mode(GPIO_CAMERA_LDO_EN_PIN,GPIO_MODE_00);
-            mt_set_gpio_dir(GPIO_CAMERA_LDO_EN_PIN,GPIO_DIR_OUT);
-            mt_set_gpio_out(GPIO_CAMERA_LDO_EN_PIN,GPIO_OUT_ONE);
-        #endif
-     
-            //First Power Pin low and Reset Pin Low
-            if (GPIO_CAMERA_INVALID != pinSet[pinSetIdx][IDX_PS_CMPDN]) {
-                if(mt_set_gpio_mode(pinSet[pinSetIdx][IDX_PS_CMPDN],pinSet[pinSetIdx][IDX_PS_CMPDN+IDX_PS_MODE])){
-                      PK_DBG("[CAMERA LENS] set gpio mode  failed!! (CMPDN)\n");
-                }    
-                if(mt_set_gpio_dir(pinSet[pinSetIdx][IDX_PS_CMPDN],GPIO_DIR_OUT)){
-                      PK_DBG("[CAMERA LENS] set gpio dir failed!! (CMPDN)\n");
-                }    
-                if(mt_set_gpio_out(pinSet[pinSetIdx][IDX_PS_CMPDN],pinSet[pinSetIdx][IDX_PS_CMPDN+IDX_PS_OFF])){
-                      PK_DBG("[CAMERA LENS] set gpio         failed!! (CMPDN)\n");
-                }    
-            }    
-
-            if (GPIO_CAMERA_INVALID != pinSet[pinSetIdx][IDX_PS_CMRST]) {
-                if(mt_set_gpio_mode(pinSet[pinSetIdx][IDX_PS_CMRST],pinSet[pinSetIdx][IDX_PS_CMRST+IDX_PS_MODE])){
-                      PK_DBG("[CAMERA SENSOR] set gpio     mode failed!! (CMRST)\n");
-                }    
-                if(mt_set_gpio_dir(pinSet[pinSetIdx][IDX_PS_CMRST],GPIO_DIR_OUT)){
-                      PK_DBG("[CAMERA SENSOR] set gpio dir failed!! (CMRST)\n");
-                }    
-                if(mt_set_gpio_out(pinSet[pinSetIdx][IDX_PS_CMRST],pinSet[pinSetIdx][IDX_PS_CMRST+IDX_PS_OFF])){
-                      PK_DBG("[CAMERA SENSOR] set gpio       failed!! (CMRST)\n");
-                }    
-            }    
-            mdelay(1);
-
-            //VCAM_D        
-#if 1
-            if(TRUE != _hwPowerOn(SUB_CAMERA_POWER_VCAM_D, VOL_1200,mode_name))
-                {
-                     PK_DBG("[CAMERA SENSOR] Fail to enable digital power\n");
-                     goto _kdCISModulePowerOn_exit_;
-                }
-            mdelay(1);
-#endif
-            if(TRUE != _hwPowerOn(CAMERA_POWER_VCAM_D, VOL_1200,mode_name))
-                {
-                     PK_DBG("[CAMERA SENSOR] Fail to enable digital power\n");
-                     goto _kdCISModulePowerOn_exit_;
-                }
-            mdelay(1);
-            //VCAM_A
-            if(TRUE != _hwPowerOn(CAMERA_POWER_VCAM_A, VOL_2800,mode_name))
-            {
-                PK_DBG("[CAMERA SENSOR] Fail to enable analog power (VCAM_A), power id = %d\n", CAMERA_POWER_VCAM_A);
-                goto _kdCISModulePowerOn_exit_;
-            }
-            mdelay(1);
-            //VCAM_IO
-            if(TRUE != _hwPowerOn(CAMERA_POWER_VCAM_IO, VOL_1800, mode_name))
-            {
-                PK_DBG("[CAMERA SENSOR] Fail to enable digital power (VCAM_IO), power id = %d \n", CAMERA_POWER_VCAM_IO);
-                goto _kdCISModulePowerOn_exit_;
-            }
-            mdelay(1);
-
-            //AF_VCC
-            if(TRUE != _hwPowerOn(CAMERA_POWER_VCAM_AF, VOL_2800,mode_name))
-            {
-                PK_DBG("[CAMERA SENSOR] Fail to enable analog power (VCAM_AF), power id = %d \n", CAMERA_POWER_VCAM_AF);
-      //          goto _kdCISModulePowerOn_exit_;
-            }
-
-
-            mdelay(1);
-
-
-           if (GPIO_CAMERA_INVALID != pinSet[pinSetIdx][IDX_PS_CMPDN]) {
-                if(mt_set_gpio_mode(pinSet[pinSetIdx][IDX_PS_CMPDN],pinSet[pinSetIdx][IDX_PS_CMPDN+IDX_PS_MODE])){
-                      PK_DBG("[CAMERA LENS] set gpio mode  failed!! (CMPDN)\n");
-                }
-                if(mt_set_gpio_dir(pinSet[pinSetIdx][IDX_PS_CMPDN],GPIO_DIR_OUT)){
-                      PK_DBG("[CAMERA LENS] set gpio dir failed!! (CMPDN)\n");
-                }
-                if(mt_set_gpio_out(pinSet[pinSetIdx][IDX_PS_CMPDN],pinSet[pinSetIdx][IDX_PS_CMPDN+IDX_PS_ON])){
-                      PK_DBG("[CAMERA LENS] set gpio failed!! (CMPDN)\n");
-                }
-            }
-
-
-            mdelay(2);
-
-
-            if (GPIO_CAMERA_INVALID != pinSet[pinSetIdx][IDX_PS_CMRST]) {
-                if(mt_set_gpio_mode(pinSet[pinSetIdx][IDX_PS_CMRST],pinSet[pinSetIdx][IDX_PS_CMRST+IDX_PS_MODE])){
-                        PK_DBG("[CAMERA SENSOR] set gpio     mode failed!! (CMRST)\n");
-                }
-                if(mt_set_gpio_dir(pinSet[pinSetIdx][IDX_PS_CMRST],GPIO_DIR_OUT)){
-                        PK_DBG("[CAMERA SENSOR] set gpio dir failed!! (CMRST)\n");
-                }
-                if(mt_set_gpio_out(pinSet[pinSetIdx][IDX_PS_CMRST],pinSet[pinSetIdx][IDX_PS_CMRST+IDX_PS_ON])){
-                        PK_DBG("[CAMERA SENSOR] set gpio        failed!! (CMRST)\n");
-                }
-
-            }
-        }
-
-        else if ((currSensorName && (0 == strcmp(SENSOR_DRVNAME_OV5648_MIPI_RAW, currSensorName))) \
-			||(currSensorName && (0 == strcmp(SENSOR_DRVNAME_OV9760_MIPI_RAW, currSensorName)))\
-                                                                                                      )
-        {
-		#ifdef GPIO_CAMERA_LDO_EN_PIN
-            mt_set_gpio_mode(GPIO_CAMERA_LDO_EN_PIN,GPIO_MODE_00);
-            mt_set_gpio_dir(GPIO_CAMERA_LDO_EN_PIN,GPIO_DIR_OUT);
-            mt_set_gpio_out(GPIO_CAMERA_LDO_EN_PIN,GPIO_OUT_ONE);
-		#endif
-		
-            //First Power Pin low and Reset Pin Low
-            if (GPIO_CAMERA_INVALID != pinSet[pinSetIdx][IDX_PS_CMPDN]) {
-                if(mt_set_gpio_mode(pinSet[pinSetIdx][IDX_PS_CMPDN],pinSet[pinSetIdx][IDX_PS_CMPDN+IDX_PS_MODE])){PK_DBG("[CAMERA LENS] set gpio mode failed!! (CMPDN)\n");}
-                if(mt_set_gpio_dir(pinSet[pinSetIdx][IDX_PS_CMPDN],GPIO_DIR_OUT)){PK_DBG("[CAMERA LENS] set gpio dir failed!! (CMPDN)\n");}
-                if(mt_set_gpio_out(pinSet[pinSetIdx][IDX_PS_CMPDN],pinSet[pinSetIdx][IDX_PS_CMPDN+IDX_PS_OFF])){PK_DBG("[CAMERA LENS] set gpio failed!! (CMPDN)\n");}
-            }
-
-            if (GPIO_CAMERA_INVALID != pinSet[pinSetIdx][IDX_PS_CMRST]) {
-                if(mt_set_gpio_mode(pinSet[pinSetIdx][IDX_PS_CMRST],pinSet[pinSetIdx][IDX_PS_CMRST+IDX_PS_MODE])){PK_DBG("[CAMERA SENSOR] set gpio mode failed!! (CMRST)\n");}
-                if(mt_set_gpio_dir(pinSet[pinSetIdx][IDX_PS_CMRST],GPIO_DIR_OUT)){PK_DBG("[CAMERA SENSOR] set gpio dir failed!! (CMRST)\n");}
-                if(mt_set_gpio_out(pinSet[pinSetIdx][IDX_PS_CMRST],pinSet[pinSetIdx][IDX_PS_CMRST+IDX_PS_OFF])){PK_DBG("[CAMERA SENSOR] set gpio failed!! (CMRST)\n");}
-            }
-
-
-            //VCAM_IO
-            if(TRUE != _hwPowerOn(CAMERA_POWER_VCAM_IO, VOL_1800, mode_name))
-            {
-                PK_DBG("[CAMERA SENSOR] Fail to enable digital power (VCAM_IO), power id = %d \n", CAMERA_POWER_VCAM_IO);
-        //        goto _kdCISModulePowerOn_exit_;
-            }
-
-            mdelay(1);
-
-            //VCAM_A
-            if(TRUE != _hwPowerOn(CAMERA_POWER_VCAM_A, VOL_2800,mode_name))
-            {
-                PK_DBG("[CAMERA SENSOR] Fail to enable analog power (VCAM_A), power id = %d\n", CAMERA_POWER_VCAM_A);
-       //         goto _kdCISModulePowerOn_exit_;
-            }
-
-            mdelay(1);
-#if 1
-            if(TRUE != _hwPowerOn(SUB_CAMERA_POWER_VCAM_D, VOL_1500,mode_name))
-            {
-                 PK_DBG("[CAMERA SENSOR] Fail to enable digital power (VCAM_D), power id = %d \n", SUB_CAMERA_POWER_VCAM_D);
-                 goto _kdCISModulePowerOn_exit_;
-            }
-#endif
-
-            mdelay(5);
-            if(TRUE != _hwPowerOn(CAMERA_POWER_VCAM_D, VOL_1500,mode_name))
-            {
-                 PK_DBG("[CAMERA SENSOR] Fail to enable digital power (VCAM_D), power id = %d \n", CAMERA_POWER_VCAM_D);
-     //            goto _kdCISModulePowerOn_exit_;
-            }
-
-            mdelay(1);
-
-            //AF_VCC
-            if(TRUE != _hwPowerOn(CAMERA_POWER_VCAM_AF, VOL_2800,mode_name))
-            {
-                PK_DBG("[CAMERA SENSOR] Fail to enable analog power (VCAM_AF), power id = %d \n", CAMERA_POWER_VCAM_AF);
-      //          goto _kdCISModulePowerOn_exit_;
-            }
-
-
-            mdelay(1);
-
-
-            //enable active sensor
-            if (GPIO_CAMERA_INVALID != pinSet[pinSetIdx][IDX_PS_CMPDN]) {
-                if(mt_set_gpio_mode(pinSet[pinSetIdx][IDX_PS_CMPDN],pinSet[pinSetIdx][IDX_PS_CMPDN+IDX_PS_MODE])){PK_DBG("[CAMERA LENS] set gpio mode failed!! (CMPDN)\n");}
-                if(mt_set_gpio_dir(pinSet[pinSetIdx][IDX_PS_CMPDN],GPIO_DIR_OUT)){PK_DBG("[CAMERA LENS] set gpio dir failed!! (CMPDN)\n");}
-                if(mt_set_gpio_out(pinSet[pinSetIdx][IDX_PS_CMPDN],pinSet[pinSetIdx][IDX_PS_CMPDN+IDX_PS_ON])){PK_DBG("[CAMERA LENS] set gpio failed!! (CMPDN)\n");}
-            }
-
-
-            mdelay(2);
-
-
-            if (GPIO_CAMERA_INVALID != pinSet[pinSetIdx][IDX_PS_CMRST]) {
-                if(mt_set_gpio_mode(pinSet[pinSetIdx][IDX_PS_CMRST],pinSet[pinSetIdx][IDX_PS_CMRST+IDX_PS_MODE])){PK_DBG("[CAMERA SENSOR] set gpio mode failed!! (CMRST)\n");}
-                if(mt_set_gpio_dir(pinSet[pinSetIdx][IDX_PS_CMRST],GPIO_DIR_OUT)){PK_DBG("[CAMERA SENSOR] set gpio dir failed!! (CMRST)\n");}
-                if(mt_set_gpio_out(pinSet[pinSetIdx][IDX_PS_CMRST],pinSet[pinSetIdx][IDX_PS_CMRST+IDX_PS_ON])){PK_DBG("[CAMERA SENSOR] set gpio failed!! (CMRST)\n");}
-
-            }
-
-            mdelay(20);
-        }
-        else if ((currSensorName && (0 == strcmp(SENSOR_DRVNAME_HI551_MIPI_RAW, currSensorName))) ||\
-                 (currSensorName && (0 == strcmp(SENSOR_DRVNAME_HI545_MIPI_RAW, currSensorName))) ||\
-                 (currSensorName && (0 == strcmp(SENSOR_DRVNAME_OV8858_MIPI_RAW, currSensorName))) ||\
-                 (currSensorName && (0 == strcmp(SENSOR_DRVNAME_OV5670_MIPI_RAW, currSensorName))) ||\
-                 (currSensorName && (0 == strcmp(SENSOR_DRVNAME_OV5693_MIPI_RAW, currSensorName))) ||\
-                 (currSensorName && (0 == strcmp(SENSOR_DRVNAME_OV8865_MIPI_RAW, currSensorName)))   \
-                                                                                                      )
-        {
-		#ifdef GPIO_CAMERA_LDO_EN_PIN
-            mt_set_gpio_mode(GPIO_CAMERA_LDO_EN_PIN,GPIO_MODE_00);
-            mt_set_gpio_dir(GPIO_CAMERA_LDO_EN_PIN,GPIO_DIR_OUT);
-            mt_set_gpio_out(GPIO_CAMERA_LDO_EN_PIN,GPIO_OUT_ONE);
-		#endif
-		
-            //First Power Pin low and Reset Pin Low
-            if (GPIO_CAMERA_INVALID != pinSet[pinSetIdx][IDX_PS_CMPDN]) {
-                if(mt_set_gpio_mode(pinSet[pinSetIdx][IDX_PS_CMPDN],pinSet[pinSetIdx][IDX_PS_CMPDN+IDX_PS_MODE])){PK_DBG("[CAMERA LENS] set gpio mode failed!! (CMPDN)\n");}
-                if(mt_set_gpio_dir(pinSet[pinSetIdx][IDX_PS_CMPDN],GPIO_DIR_OUT)){PK_DBG("[CAMERA LENS] set gpio dir failed!! (CMPDN)\n");}
-                if(mt_set_gpio_out(pinSet[pinSetIdx][IDX_PS_CMPDN],pinSet[pinSetIdx][IDX_PS_CMPDN+IDX_PS_OFF])){PK_DBG("[CAMERA LENS] set gpio failed!! (CMPDN)\n");}
-            }
-
-            if (GPIO_CAMERA_INVALID != pinSet[pinSetIdx][IDX_PS_CMRST]) {
-                if(mt_set_gpio_mode(pinSet[pinSetIdx][IDX_PS_CMRST],pinSet[pinSetIdx][IDX_PS_CMRST+IDX_PS_MODE])){PK_DBG("[CAMERA SENSOR] set gpio mode failed!! (CMRST)\n");}
-                if(mt_set_gpio_dir(pinSet[pinSetIdx][IDX_PS_CMRST],GPIO_DIR_OUT)){PK_DBG("[CAMERA SENSOR] set gpio dir failed!! (CMRST)\n");}
-                if(mt_set_gpio_out(pinSet[pinSetIdx][IDX_PS_CMRST],pinSet[pinSetIdx][IDX_PS_CMRST+IDX_PS_OFF])){PK_DBG("[CAMERA SENSOR] set gpio failed!! (CMRST)\n");}
-            }
-
-
-            //VCAM_IO
-            if(TRUE != _hwPowerOn(CAMERA_POWER_VCAM_IO, VOL_1800, mode_name))
-            {
-                PK_DBG("[CAMERA SENSOR] Fail to enable digital power (VCAM_IO), power id = %d \n", CAMERA_POWER_VCAM_IO);
-        //        goto _kdCISModulePowerOn_exit_;
-            }
-
-            mdelay(1);
-
-            //VCAM_A
-            if(TRUE != _hwPowerOn(CAMERA_POWER_VCAM_A, VOL_2800,mode_name))
-            {
-                PK_DBG("[CAMERA SENSOR] Fail to enable analog power (VCAM_A), power id = %d\n", CAMERA_POWER_VCAM_A);
-       //         goto _kdCISModulePowerOn_exit_;
-            }
-
-            mdelay(1);
-#if 1
-            if(TRUE != _hwPowerOn(SUB_CAMERA_POWER_VCAM_D, VOL_1200,mode_name))
-            {
-                 PK_DBG("[CAMERA SENSOR] Fail to enable digital power (VCAM_D), power id = %d \n", SUB_CAMERA_POWER_VCAM_D);
-                 goto _kdCISModulePowerOn_exit_;
-            }
-#endif
-
-            mdelay(5);
-            if(TRUE != _hwPowerOn(CAMERA_POWER_VCAM_D, VOL_1200,mode_name))
-            {
-                 PK_DBG("[CAMERA SENSOR] Fail to enable digital power (VCAM_D), power id = %d \n", CAMERA_POWER_VCAM_D);
-     //            goto _kdCISModulePowerOn_exit_;
-            }
-
-            mdelay(1);
-
-            //AF_VCC
-            if(TRUE != _hwPowerOn(CAMERA_POWER_VCAM_AF, VOL_2800,mode_name))
-            {
-                PK_DBG("[CAMERA SENSOR] Fail to enable analog power (VCAM_AF), power id = %d \n", CAMERA_POWER_VCAM_AF);
-      //          goto _kdCISModulePowerOn_exit_;
-            }
-
-
-            mdelay(1);
-
-
-            //enable active sensor
-            if (GPIO_CAMERA_INVALID != pinSet[pinSetIdx][IDX_PS_CMPDN]) {
-                if(mt_set_gpio_mode(pinSet[pinSetIdx][IDX_PS_CMPDN],pinSet[pinSetIdx][IDX_PS_CMPDN+IDX_PS_MODE])){PK_DBG("[CAMERA LENS] set gpio mode failed!! (CMPDN)\n");}
-                if(mt_set_gpio_dir(pinSet[pinSetIdx][IDX_PS_CMPDN],GPIO_DIR_OUT)){PK_DBG("[CAMERA LENS] set gpio dir failed!! (CMPDN)\n");}
-                if(mt_set_gpio_out(pinSet[pinSetIdx][IDX_PS_CMPDN],pinSet[pinSetIdx][IDX_PS_CMPDN+IDX_PS_ON])){PK_DBG("[CAMERA LENS] set gpio failed!! (CMPDN)\n");}
-            }
-
-
-            mdelay(2);
-
-
-            if (GPIO_CAMERA_INVALID != pinSet[pinSetIdx][IDX_PS_CMRST]) {
-                if(mt_set_gpio_mode(pinSet[pinSetIdx][IDX_PS_CMRST],pinSet[pinSetIdx][IDX_PS_CMRST+IDX_PS_MODE])){PK_DBG("[CAMERA SENSOR] set gpio mode failed!! (CMRST)\n");}
-                if(mt_set_gpio_dir(pinSet[pinSetIdx][IDX_PS_CMRST],GPIO_DIR_OUT)){PK_DBG("[CAMERA SENSOR] set gpio dir failed!! (CMRST)\n");}
-                if(mt_set_gpio_out(pinSet[pinSetIdx][IDX_PS_CMRST],pinSet[pinSetIdx][IDX_PS_CMRST+IDX_PS_ON])){PK_DBG("[CAMERA SENSOR] set gpio failed!! (CMRST)\n");}
-
-            }
-
-            mdelay(20);
-        }
-        else  if ((currSensorName &&(0 == strcmp(SENSOR_DRVNAME_GC0310_MIPI_YUV, currSensorName))) ||\
-                  (currSensorName &&(0 == strcmp(SENSOR_DRVNAME_SP2508_MIPI_RAW, currSensorName)))      ||\
-                  (currSensorName &&(0 == strcmp(SENSOR_DRVNAME_SP5409_MIPI_RAW, currSensorName)))      ||\ 
-                  (currSensorName &&(0 == strcmp(SENSOR_DRVNAME_GC2755_MIPI_RAW, currSensorName))) ||\
-                  (currSensorName &&(0 == strcmp(SENSOR_DRVNAME_GC2145_MIPI_YUV, currSensorName))) ||\
-                  (currSensorName &&(0 == strcmp(SENSOR_DRVNAME_GC2235_MIPI_RAW, currSensorName))) ||\
-                  (currSensorName &&(0 == strcmp(SENSOR_DRVNAME_GC2355_MIPI_RAW, currSensorName))) \
-                                                                                                  )
-        {
-		#ifdef GPIO_CAMERA_LDO_EN_PIN
-           mt_set_gpio_mode(GPIO_CAMERA_LDO_EN_PIN,GPIO_MODE_00);
-           mt_set_gpio_dir(GPIO_CAMERA_LDO_EN_PIN,GPIO_DIR_OUT);
-           mt_set_gpio_out(GPIO_CAMERA_LDO_EN_PIN,GPIO_OUT_ONE);
-		#endif
-		#ifdef GPIO_CAMERASUB_LDO_EN_PIN
-           mt_set_gpio_mode(GPIO_CAMERASUB_LDO_EN_PIN,GPIO_MODE_00);
-           mt_set_gpio_dir(GPIO_CAMERASUB_LDO_EN_PIN,GPIO_DIR_OUT);
-           mt_set_gpio_out(GPIO_CAMERASUB_LDO_EN_PIN,GPIO_OUT_ONE);
-		#endif
-#if 0
-            //First Power Pin low and Reset Pin Low
-            if (GPIO_CAMERA_INVALID != pinSet[pinSetIdx][IDX_PS_CMPDN]) {
-                if(mt_set_gpio_mode(pinSet[pinSetIdx][IDX_PS_CMPDN],pinSet[pinSetIdx][IDX_PS_CMPDN+IDX_PS_MODE])){PK_DBG("[CAMERA LENS] set gpio mode failed!! (CMPDN)\n");}
-                if(mt_set_gpio_dir(pinSet[pinSetIdx][IDX_PS_CMPDN],GPIO_DIR_OUT)){PK_DBG("[CAMERA LENS] set gpio dir failed!! (CMPDN)\n");}
-                if(mt_set_gpio_out(pinSet[pinSetIdx][IDX_PS_CMPDN],pinSet[pinSetIdx][IDX_PS_CMPDN+IDX_PS_OFF])){PK_DBG("[CAMERA LENS] set gpio failed!! (CMPDN)\n");}
-            }
-
-            if (GPIO_CAMERA_INVALID != pinSet[pinSetIdx][IDX_PS_CMRST]) {
-                if(mt_set_gpio_mode(pinSet[pinSetIdx][IDX_PS_CMRST],pinSet[pinSetIdx][IDX_PS_CMRST+IDX_PS_MODE])){PK_DBG("[CAMERA SENSOR] set gpio mode failed!! (CMRST)\n");}
-                if(mt_set_gpio_dir(pinSet[pinSetIdx][IDX_PS_CMRST],GPIO_DIR_OUT)){PK_DBG("[CAMERA SENSOR] set gpio dir failed!! (CMRST)\n");}
-                if(mt_set_gpio_out(pinSet[pinSetIdx][IDX_PS_CMRST],pinSet[pinSetIdx][IDX_PS_CMRST+IDX_PS_OFF])){PK_DBG("[CAMERA SENSOR] set gpio failed!! (CMRST)\n");}
-            }
-
-            mdelay(50);
-#endif
-            //VCAM_A
-            if(TRUE != _hwPowerOn(CAMERA_POWER_VCAM_A, VOL_2800,mode_name))
-            {
-                PK_DBG("[CAMERA SENSOR] Fail to enable analog power (VCAM_A), power id = %d\n", CAMERA_POWER_VCAM_A);
-         //       goto _kdCISModulePowerOn_exit_;
-            }
-
-            mdelay(10);
-
-            //VCAM_IO
-            if(TRUE != _hwPowerOn(CAMERA_POWER_VCAM_IO, VOL_1800, mode_name))
-            {
-                PK_DBG("[CAMERA SENSOR] Fail to enable digital power (VCAM_IO), power id = %d \n", CAMERA_POWER_VCAM_IO);
-          //      goto _kdCISModulePowerOn_exit_;
-            }
-#if 1
-            mdelay(10);
-            if(TRUE != _hwPowerOn(CAMERA_POWER_VCAM_D, VOL_1800,mode_name))
-            {
-                 PK_DBG("[CAMERA SENSOR] Fail to enable digital power (VCAM_D), power id = %d \n", CAMERA_POWER_VCAM_D);
-           //      goto _kdCISModulePowerOn_exit_;
-            }
-#endif
-            mdelay(1);
-
-            if(TRUE != _hwPowerOn(SUB_CAMERA_POWER_VCAM_D, VOL_1800,mode_name))
-            {
-                 PK_DBG("[CAMERA SENSOR] Fail to enable digital power (VCAM_D), power id = %d \n", SUB_CAMERA_POWER_VCAM_D);
-     //            goto _kdCISModulePowerOn_exit_;
-            }
-
-            mdelay(10);
-#if 1//def VANZO_FEATURE_GC2755MIPIRAW_FOCUS_EN
-            //AF_VCC
-            if(TRUE != _hwPowerOn(CAMERA_POWER_VCAM_AF, VOL_2800,mode_name))
-            {
-                PK_DBG("[CAMERA SENSOR] Fail to enable analog power (VCAM_AF), power id = %d \n", CAMERA_POWER_VCAM_AF);
-                goto _kdCISModulePowerOn_exit_;
-            }
-
-#endif
-            mdelay(50);
-
-            if (GPIO_CAMERA_INVALID != pinSet[pinSetIdx][IDX_PS_CMRST]) {
-                if(mt_set_gpio_mode(pinSet[pinSetIdx][IDX_PS_CMRST],pinSet[pinSetIdx][IDX_PS_CMRST+IDX_PS_MODE])){PK_DBG("[CAMERA SENSOR] set gpio mode failed!! (CMRST)\n");}
-                if(mt_set_gpio_dir(pinSet[pinSetIdx][IDX_PS_CMRST],GPIO_DIR_OUT)){PK_DBG("[CAMERA SENSOR] set gpio dir failed!! (CMRST)\n");}
-                if(mt_set_gpio_out(pinSet[pinSetIdx][IDX_PS_CMRST],pinSet[pinSetIdx][IDX_PS_CMRST+IDX_PS_OFF])){PK_DBG("[CAMERA SENSOR] set gpio failed!! (CMRST)\n");}
-                mdelay(5);
-                if(mt_set_gpio_out(pinSet[pinSetIdx][IDX_PS_CMRST],pinSet[pinSetIdx][IDX_PS_CMRST+IDX_PS_ON])){PK_DBG("[CAMERA SENSOR] set gpio failed!! (CMRST)\n");}
-
-            }
-            mdelay(5);
-            //enable active sensor
-            if (GPIO_CAMERA_INVALID != pinSet[pinSetIdx][IDX_PS_CMPDN]) {
-                if(mt_set_gpio_mode(pinSet[pinSetIdx][IDX_PS_CMPDN],pinSet[pinSetIdx][IDX_PS_CMPDN+IDX_PS_MODE])){PK_DBG("[CAMERA LENS] set gpio mode failed!! (CMPDN)\n");}
-                if(mt_set_gpio_dir(pinSet[pinSetIdx][IDX_PS_CMPDN],GPIO_DIR_OUT)){PK_DBG("[CAMERA LENS] set gpio dir failed!! (CMPDN)\n");}
-                if(mt_set_gpio_out(pinSet[pinSetIdx][IDX_PS_CMPDN],pinSet[pinSetIdx][IDX_PS_CMPDN+IDX_PS_ON])){PK_DBG("[CAMERA LENS] set gpio failed!! (CMPDN)\n");}
-                mdelay(5);
-                //if(mt_set_gpio_out(pinSet[pinSetIdx][IDX_PS_CMPDN],pinSet[pinSetIdx][IDX_PS_CMPDN+IDX_PS_OFF])){PK_DBG("[CAMERA LENS] set gpio failed!! (CMPDN)\n");}
-            }
-
-            mdelay(5);
-        }
-        else  if ((currSensorName &&(0 == strcmp(SENSOR_DRVNAME_GC0330_YUV,currSensorName))) ||\
-                  (currSensorName &&(0 == strcmp(SENSOR_DRVNAME_GC0330_YUV,currSensorName))) \
-				                                                                                   )
-        {
-    #ifdef GPIO_CAMERA_LDO_EN_PIN
-           mt_set_gpio_mode(GPIO_CAMERA_LDO_EN_PIN,GPIO_MODE_00);
-           mt_set_gpio_dir(GPIO_CAMERA_LDO_EN_PIN,GPIO_DIR_OUT);
-           mt_set_gpio_out(GPIO_CAMERA_LDO_EN_PIN,GPIO_OUT_ONE);
-    #endif
-#if 0
-            //First Power Pin low and Reset Pin Low
-            if (GPIO_CAMERA_INVALID != pinSet[pinSetIdx][IDX_PS_CMPDN]) {
-                if(mt_set_gpio_mode(pinSet[pinSetIdx][IDX_PS_CMPDN],pinSet[pinSetIdx][IDX_PS_CMPDN+IDX_PS_MODE])){PK_DBG("[CAMERA LENS] set gpio mode failed!! (CMPDN)\n");}
-                if(mt_set_gpio_dir(pinSet[pinSetIdx][IDX_PS_CMPDN],GPIO_DIR_OUT)){PK_DBG("[CAMERA LENS] set gpio dir failed!! (CMPDN)\n");}
-                if(mt_set_gpio_out(pinSet[pinSetIdx][IDX_PS_CMPDN],pinSet[pinSetIdx][IDX_PS_CMPDN+IDX_PS_OFF])){PK_DBG("[CAMERA LENS] set gpio failed!! (CMPDN)\n");}
-            }
-
-            if (GPIO_CAMERA_INVALID != pinSet[pinSetIdx][IDX_PS_CMRST]) {
-                if(mt_set_gpio_mode(pinSet[pinSetIdx][IDX_PS_CMRST],pinSet[pinSetIdx][IDX_PS_CMRST+IDX_PS_MODE])){PK_DBG("[CAMERA SENSOR] set gpio mode failed!! (CMRST)\n");}
-                if(mt_set_gpio_dir(pinSet[pinSetIdx][IDX_PS_CMRST],GPIO_DIR_OUT)){PK_DBG("[CAMERA SENSOR] set gpio dir failed!! (CMRST)\n");}
-                if(mt_set_gpio_out(pinSet[pinSetIdx][IDX_PS_CMRST],pinSet[pinSetIdx][IDX_PS_CMRST+IDX_PS_OFF])){PK_DBG("[CAMERA SENSOR] set gpio failed!! (CMRST)\n");}
-            }
-
-            mdelay(50);
-#endif
-            //VCAM_A
-            if(TRUE != _hwPowerOn(CAMERA_POWER_VCAM_A, VOL_2800,mode_name))
-            {
-                PK_DBG("[CAMERA SENSOR] Fail to enable analog power (VCAM_A), power id = %d\n", CAMERA_POWER_VCAM_A);
-         //       goto _kdCISModulePowerOn_exit_;
-            }
-
-            mdelay(10);
-
-            if(TRUE != _hwPowerOn(CAMERA_POWER_VCAM_D, VOL_1500,mode_name))
-            {
-                 PK_DBG("[CAMERA SENSOR] Fail to enable digital power (VCAM_D), power id = %d \n", CAMERA_POWER_VCAM_D);
-           //      goto _kdCISModulePowerOn_exit_;
-            }
-
-            mdelay(1);
-
-            //VCAM_IO
-            if(TRUE != _hwPowerOn(CAMERA_POWER_VCAM_IO, VOL_1800, mode_name))
-            {
-                PK_DBG("[CAMERA SENSOR] Fail to enable digital power (VCAM_IO), power id = %d \n", CAMERA_POWER_VCAM_IO);
-          //      goto _kdCISModulePowerOn_exit_;
-            }
-#if 0
-            mdelay(10);
-            if(TRUE != _hwPowerOn(CAMERA_POWER_VCAM_D, VOL_1800,mode_name))
-            {
-                 PK_DBG("[CAMERA SENSOR] Fail to enable digital power (VCAM_D), power id = %d \n", CAMERA_POWER_VCAM_D);
-           //      goto _kdCISModulePowerOn_exit_;
-            }
-#endif
-            mdelay(1);
-
-            if(TRUE != _hwPowerOn(SUB_CAMERA_POWER_VCAM_D, VOL_1800,mode_name))
-            {
-                 PK_DBG("[CAMERA SENSOR] Fail to enable digital power (VCAM_D), power id = %d \n", SUB_CAMERA_POWER_VCAM_D);
-     //            goto _kdCISModulePowerOn_exit_;
-            }
-
-            mdelay(10);
-            //AF_VCC
-            if(TRUE != _hwPowerOn(CAMERA_POWER_VCAM_AF, VOL_2800,mode_name))
-            {
-                PK_DBG("[CAMERA SENSOR] Fail to enable analog power (VCAM_AF), power id = %d \n", CAMERA_POWER_VCAM_AF);
-                goto _kdCISModulePowerOn_exit_;
-            }
-
-            mdelay(50);
-
-            if (GPIO_CAMERA_INVALID != pinSet[pinSetIdx][IDX_PS_CMRST]) {
-                if(mt_set_gpio_mode(pinSet[pinSetIdx][IDX_PS_CMRST],pinSet[pinSetIdx][IDX_PS_CMRST+IDX_PS_MODE])){PK_DBG("[CAMERA SENSOR] set gpio mode failed!! (CMRST)\n");}
-                if(mt_set_gpio_dir(pinSet[pinSetIdx][IDX_PS_CMRST],GPIO_DIR_OUT)){PK_DBG("[CAMERA SENSOR] set gpio dir failed!! (CMRST)\n");}
-                if(mt_set_gpio_out(pinSet[pinSetIdx][IDX_PS_CMRST],pinSet[pinSetIdx][IDX_PS_CMRST+IDX_PS_OFF])){PK_DBG("[CAMERA SENSOR] set gpio failed!! (CMRST)\n");}
-                mdelay(5);
-                if(mt_set_gpio_out(pinSet[pinSetIdx][IDX_PS_CMRST],pinSet[pinSetIdx][IDX_PS_CMRST+IDX_PS_ON])){PK_DBG("[CAMERA SENSOR] set gpio failed!! (CMRST)\n");}
-
-            }
-            mdelay(5);
-            //enable active sensor
-            if (GPIO_CAMERA_INVALID != pinSet[pinSetIdx][IDX_PS_CMPDN]) {
-                if(mt_set_gpio_mode(pinSet[pinSetIdx][IDX_PS_CMPDN],pinSet[pinSetIdx][IDX_PS_CMPDN+IDX_PS_MODE])){PK_DBG("[CAMERA LENS] set gpio mode failed!! (CMPDN)\n");}
-                if(mt_set_gpio_dir(pinSet[pinSetIdx][IDX_PS_CMPDN],GPIO_DIR_OUT)){PK_DBG("[CAMERA LENS] set gpio dir failed!! (CMPDN)\n");}
-                if(mt_set_gpio_out(pinSet[pinSetIdx][IDX_PS_CMPDN],pinSet[pinSetIdx][IDX_PS_CMPDN+IDX_PS_ON])){PK_DBG("[CAMERA LENS] set gpio failed!! (CMPDN)\n");}
-                mdelay(5);
-                if(mt_set_gpio_out(pinSet[pinSetIdx][IDX_PS_CMPDN],pinSet[pinSetIdx][IDX_PS_CMPDN+IDX_PS_OFF])){PK_DBG("[CAMERA LENS] set gpio failed!! (CMPDN)\n");}
-            }
-
-            mdelay(5);
-        }
-        else
-        {
-		#ifdef GPIO_CAMERA_LDO_EN_PIN
-           mt_set_gpio_mode(GPIO_CAMERA_LDO_EN_PIN,GPIO_MODE_00);
-           mt_set_gpio_dir(GPIO_CAMERA_LDO_EN_PIN,GPIO_DIR_OUT);
-           mt_set_gpio_out(GPIO_CAMERA_LDO_EN_PIN,GPIO_OUT_ONE);
-		#endif
-		
-            //First Power Pin low and Reset Pin Low
-            if (GPIO_CAMERA_INVALID != pinSet[pinSetIdx][IDX_PS_CMPDN]) {
-                if(mt_set_gpio_mode(pinSet[pinSetIdx][IDX_PS_CMPDN],pinSet[pinSetIdx][IDX_PS_CMPDN+IDX_PS_MODE])){PK_DBG("[CAMERA LENS] set gpio mode failed!! (CMPDN)\n");}
-                if(mt_set_gpio_dir(pinSet[pinSetIdx][IDX_PS_CMPDN],GPIO_DIR_OUT)){PK_DBG("[CAMERA LENS] set gpio dir failed!! (CMPDN)\n");}
-                if(mt_set_gpio_out(pinSet[pinSetIdx][IDX_PS_CMPDN],pinSet[pinSetIdx][IDX_PS_CMPDN+IDX_PS_OFF])){PK_DBG("[CAMERA LENS] set gpio failed!! (CMPDN)\n");}
-            }
-
-            if (GPIO_CAMERA_INVALID != pinSet[pinSetIdx][IDX_PS_CMRST]) {
-                if(mt_set_gpio_mode(pinSet[pinSetIdx][IDX_PS_CMRST],pinSet[pinSetIdx][IDX_PS_CMRST+IDX_PS_MODE])){PK_DBG("[CAMERA SENSOR] set gpio mode failed!! (CMRST)\n");}
-                if(mt_set_gpio_dir(pinSet[pinSetIdx][IDX_PS_CMRST],GPIO_DIR_OUT)){PK_DBG("[CAMERA SENSOR] set gpio dir failed!! (CMRST)\n");}
-                if(mt_set_gpio_out(pinSet[pinSetIdx][IDX_PS_CMRST],pinSet[pinSetIdx][IDX_PS_CMRST+IDX_PS_OFF])){PK_DBG("[CAMERA SENSOR] set gpio failed!! (CMRST)\n");}
-            }
-
-            //VCAM_IO
-            if(TRUE != _hwPowerOn(CAMERA_POWER_VCAM_IO, VOL_1800, mode_name))
-            {
-                PK_DBG("[CAMERA SENSOR] Fail to enable digital power (VCAM_IO), power id = %d \n", CAMERA_POWER_VCAM_IO);
-                goto _kdCISModulePowerOn_exit_;
-            }
-
-            //VCAM_A
-            if(TRUE != _hwPowerOn(CAMERA_POWER_VCAM_A, VOL_2800,mode_name))
-            {
-                PK_DBG("[CAMERA SENSOR] Fail to enable analog power (VCAM_A), power id = %d\n", CAMERA_POWER_VCAM_A);
-                goto _kdCISModulePowerOn_exit_;
-            }
-            //VCAM_D
-            if(currSensorName && (0 == strcmp(SENSOR_DRVNAME_S5K2P8_MIPI_RAW, currSensorName)))
-            {
-                if(TRUE != _hwPowerOn(CAMERA_POWER_VCAM_D, VOL_1200,mode_name))
-                {
-                     PK_DBG("[CAMERA SENSOR] Fail to enable digital power\n");
-                     goto _kdCISModulePowerOn_exit_;
-                }
-            }
-            else if(currSensorName && (0 == strcmp(SENSOR_DRVNAME_IMX219_MIPI_RAW, currSensorName)))
-            {
-                if(pinSetIdx == 0 && TRUE != _hwPowerOn(CAMERA_POWER_VCAM_D, VOL_1200,mode_name))
-                {
-                     PK_DBG("[CAMERA SENSOR] Fail to enable digital power\n");
-                     goto _kdCISModulePowerOn_exit_;
-                }
-            }
-            else { // Main VCAMD max 1.5V
-                if(TRUE != _hwPowerOn(CAMERA_POWER_VCAM_D, VOL_1500,mode_name))
-                {
-                     PK_DBG("[CAMERA SENSOR] Fail to enable digital power\n");
-                     goto _kdCISModulePowerOn_exit_;
-                }
-
-            }
-            if(TRUE != hwPowerOn(SUB_CAMERA_POWER_VCAM_D, VOL_1500,mode_name))
-            {
-                 PK_DBG("[CAMERA SENSOR] Fail to enable digital power (VCAM_D), power id = %d \n", CAMERA_POWER_VCAM_D);
-                 goto _kdCISModulePowerOn_exit_;
-            }
-
-
-
-             //AF_VCC
-            if(TRUE != _hwPowerOn(CAMERA_POWER_VCAM_AF, VOL_2800,mode_name))
-            {
-                PK_DBG("[CAMERA SENSOR] Fail to enable analog power (VCAM_AF), power id = %d \n", CAMERA_POWER_VCAM_AF);
-                goto _kdCISModulePowerOn_exit_;
-            }
-
-            mdelay(5);
-
-            //enable active sensor
-            if (GPIO_CAMERA_INVALID != pinSet[pinSetIdx][IDX_PS_CMPDN]) {
-                if(mt_set_gpio_mode(pinSet[pinSetIdx][IDX_PS_CMPDN],pinSet[pinSetIdx][IDX_PS_CMPDN+IDX_PS_MODE])){PK_DBG("[CAMERA LENS] set gpio mode failed!! (CMPDN)\n");}
-                if(mt_set_gpio_dir(pinSet[pinSetIdx][IDX_PS_CMPDN],GPIO_DIR_OUT)){PK_DBG("[CAMERA LENS] set gpio dir failed!! (CMPDN)\n");}
-                if(mt_set_gpio_out(pinSet[pinSetIdx][IDX_PS_CMPDN],pinSet[pinSetIdx][IDX_PS_CMPDN+IDX_PS_ON])){PK_DBG("[CAMERA LENS] set gpio failed!! (CMPDN)\n");}
-            }
-
-            mdelay(1);
-
-            if (GPIO_CAMERA_INVALID != pinSet[pinSetIdx][IDX_PS_CMRST]) {
-                if(mt_set_gpio_mode(pinSet[pinSetIdx][IDX_PS_CMRST],pinSet[pinSetIdx][IDX_PS_CMRST+IDX_PS_MODE])){PK_DBG("[CAMERA SENSOR] set gpio mode failed!! (CMRST)\n");}
-                if(mt_set_gpio_dir(pinSet[pinSetIdx][IDX_PS_CMRST],GPIO_DIR_OUT)){PK_DBG("[CAMERA SENSOR] set gpio dir failed!! (CMRST)\n");}
-                if(mt_set_gpio_out(pinSet[pinSetIdx][IDX_PS_CMRST],pinSet[pinSetIdx][IDX_PS_CMRST+IDX_PS_ON])){PK_DBG("[CAMERA SENSOR] set gpio failed!! (CMRST)\n");}
-            }
-        }
-    }
-    else {//power OFF
-
-        PK_DBG("[PowerOFF]pinSetIdx:%d\n", pinSetIdx);
-            ISP_MCLK1_EN(0);
-#ifdef GPIO_CAMERA_AF_EN_PIN
-			mt_set_gpio_out(GPIO_CAMERA_AF_EN_PIN,GPIO_OUT_ZERO);
-#endif
-
-
-        if ((currSensorName && (0 == strcmp(currSensorName,"imx135mipiraw")))||
-            (currSensorName && (0 == strcmp(currSensorName,"imx220mipiraw"))))
-
-        {
-            //Set Power Pin low and Reset Pin Low
-            if (GPIO_CAMERA_INVALID != pinSet[pinSetIdx][IDX_PS_CMPDN]) {
-                if(mt_set_gpio_mode(pinSet[pinSetIdx][IDX_PS_CMPDN],pinSet[pinSetIdx][IDX_PS_CMPDN+IDX_PS_MODE])){PK_DBG("[CAMERA LENS] set gpio mode failed!! (CMPDN)\n");}
-                if(mt_set_gpio_dir(pinSet[pinSetIdx][IDX_PS_CMPDN],GPIO_DIR_OUT)){PK_DBG("[CAMERA LENS] set gpio dir failed!! (CMPDN)\n");}
-                if(mt_set_gpio_out(pinSet[pinSetIdx][IDX_PS_CMPDN],pinSet[pinSetIdx][IDX_PS_CMPDN+IDX_PS_OFF])){PK_DBG("[CAMERA LENS] set gpio failed!! (CMPDN)\n");}
-            }
-
-            //Set Reset Pin Low
-             if (GPIO_CAMERA_INVALID != pinSet[pinSetIdx][IDX_PS_CMRST]) {
-                if(mt_set_gpio_mode(pinSet[pinSetIdx][IDX_PS_CMRST],pinSet[pinSetIdx][IDX_PS_CMRST+IDX_PS_MODE])){PK_DBG("[CAMERA SENSOR] set gpio mode failed!! (CMRST)\n");}
-                if(mt_set_gpio_dir(pinSet[pinSetIdx][IDX_PS_CMRST],GPIO_DIR_OUT)){PK_DBG("[CAMERA SENSOR] set gpio dir failed!! (CMRST)\n");}
-                if(mt_set_gpio_out(pinSet[pinSetIdx][IDX_PS_CMRST],pinSet[pinSetIdx][IDX_PS_CMRST+IDX_PS_OFF])){PK_DBG("[CAMERA SENSOR] set gpio failed!! (CMRST)\n");}
-            }
-
-            //AF_VCC
-            if(TRUE != _hwPowerDown(CAMERA_POWER_VCAM_AF,mode_name))
-            {
-                PK_DBG("[CAMERA SENSOR] Fail to OFF AF power (VCAM_AF), power id = %d \n", CAMERA_POWER_VCAM_AF);
-                //return -EIO;
-                goto _kdCISModulePowerOn_exit_;
-            }
-
-            //VCAM_IO
-            if(TRUE != _hwPowerDown(CAMERA_POWER_VCAM_IO, mode_name)) {
-                PK_DBG("[CAMERA SENSOR] Fail to OFF digital power (VCAM_IO), power id = %d \n", CAMERA_POWER_VCAM_IO);
-                //return -EIO;
-                goto _kdCISModulePowerOn_exit_;
-            }
-
-            if(TRUE != _hwPowerDown(CAMERA_POWER_VCAM_D,mode_name))
-            {
-                 PK_DBG("[CAMERA SENSOR] Fail to OFF core power (VCAM_D), power id = %d \n",CAMERA_POWER_VCAM_D);
-                 goto _kdCISModulePowerOn_exit_;
-            }
-
-            //VCAM_A
-            if(TRUE != _hwPowerDown(CAMERA_POWER_VCAM_A,mode_name)) {
-                PK_DBG("[CAMERA SENSOR] Fail to OFF analog power (VCAM_A), power id= (%d) \n", CAMERA_POWER_VCAM_A);
-                //return -EIO;
-                goto _kdCISModulePowerOn_exit_;
-            }
-
-        }
-        else if ((currSensorName && (0 == strcmp(SENSOR_DRVNAME_OV2680_MIPI_RAW, currSensorName))) \
-                                                                                                      )
-        {
-      #ifdef GPIO_CAMERA_LDO_EN_PIN
-            mt_set_gpio_out(GPIO_CAMERA_LDO_EN_PIN,GPIO_OUT_ZERO);
-#endif
-            //Set Power Pin low and Reset Pin Low
-            if (GPIO_CAMERA_INVALID != pinSet[pinSetIdx][IDX_PS_CMPDN]) {
-                if(mt_set_gpio_mode(pinSet[pinSetIdx][IDX_PS_CMPDN],pinSet[pinSetIdx][IDX_PS_CMPDN+IDX_PS_MODE])){PK_DBG("[CAMERA LENS] set gpio mode failed!! (CMPDN)\n");}
-                if(mt_set_gpio_dir(pinSet[pinSetIdx][IDX_PS_CMPDN],GPIO_DIR_OUT)){PK_DBG("[CAMERA LENS] set gpio dir failed!! (CMPDN)\n");}
-                if(mt_set_gpio_out(pinSet[pinSetIdx][IDX_PS_CMPDN],pinSet[pinSetIdx][IDX_PS_CMPDN+IDX_PS_OFF])){PK_DBG("[CAMERA LENS] set gpio failed!! (CMPDN)\n");}
-            }
-
-            if (GPIO_CAMERA_INVALID != pinSet[pinSetIdx][IDX_PS_CMRST]) {
-                if(mt_set_gpio_mode(pinSet[pinSetIdx][IDX_PS_CMRST],pinSet[pinSetIdx][IDX_PS_CMRST+IDX_PS_MODE])){PK_DBG("[CAMERA SENSOR] set gpio mode failed!! (CMRST)\n");}
-                if(mt_set_gpio_dir(pinSet[pinSetIdx][IDX_PS_CMRST],GPIO_DIR_OUT)){PK_DBG("[CAMERA SENSOR] set gpio dir failed!! (CMRST)\n");}
-                if(mt_set_gpio_out(pinSet[pinSetIdx][IDX_PS_CMRST],pinSet[pinSetIdx][IDX_PS_CMRST+IDX_PS_OFF])){PK_DBG("[CAMERA SENSOR] set gpio failed!! (CMRST)\n");}
-            }
-            if(TRUE != _hwPowerDown(CAMERA_POWER_VCAM_D,mode_name))
-            {
-                 PK_DBG("[CAMERA SENSOR] Fail to enable digital power\n");
-     //            goto _kdCISModulePowerOn_exit_;
-            }
-            if(TRUE != _hwPowerDown(SUB_CAMERA_POWER_VCAM_D,mode_name))
-            {
-                 PK_DBG("[CAMERA SENSOR] Fail to OFF core power (VCAM_D), power id = %d \n",SUB_CAMERA_POWER_VCAM_D);
-                 goto _kdCISModulePowerOn_exit_;
-            }
-            //VCAM_A
-            if(TRUE != _hwPowerDown(CAMERA_POWER_VCAM_A,mode_name)) {
-                PK_DBG("[CAMERA SENSOR] Fail to OFF analog power (VCAM_A), power id= (%d) \n", CAMERA_POWER_VCAM_A);
-                //return -EIO;
-     //           goto _kdCISModulePowerOn_exit_;
-            }
-
-            //VCAM_IO
-            if(TRUE != _hwPowerDown(CAMERA_POWER_VCAM_IO, mode_name)) {
-                PK_DBG("[CAMERA SENSOR] Fail to OFF digital power (VCAM_IO), power id = %d \n", CAMERA_POWER_VCAM_IO);
-                //return -EIO;
-      //          goto _kdCISModulePowerOn_exit_;
-            }
-
-            //AF_VCC
-            if(TRUE != _hwPowerDown(CAMERA_POWER_VCAM_AF,mode_name))
-            {
-                PK_DBG("[CAMERA SENSOR] Fail to OFF AF power (VCAM_AF), power id = %d \n", CAMERA_POWER_VCAM_AF);
-                //return -EIO;
-       //         goto _kdCISModulePowerOn_exit_;
-            }
-
-        }
-        else if ((currSensorName && (0 == strcmp(SENSOR_DRVNAME_OV5648_MIPI_RAW, currSensorName))) \
-			||(currSensorName && (0 == strcmp(SENSOR_DRVNAME_OV9760_MIPI_RAW, currSensorName)))\
-                                                                                                      )
-        {
-      #ifdef GPIO_CAMERA_LDO_EN_PIN
-            mt_set_gpio_out(GPIO_CAMERA_LDO_EN_PIN,GPIO_OUT_ZERO);
-#endif
-            //Set Power Pin low and Reset Pin Low
-            if (GPIO_CAMERA_INVALID != pinSet[pinSetIdx][IDX_PS_CMPDN]) {
-                if(mt_set_gpio_mode(pinSet[pinSetIdx][IDX_PS_CMPDN],pinSet[pinSetIdx][IDX_PS_CMPDN+IDX_PS_MODE])){PK_DBG("[CAMERA LENS] set gpio mode failed!! (CMPDN)\n");}
-                if(mt_set_gpio_dir(pinSet[pinSetIdx][IDX_PS_CMPDN],GPIO_DIR_OUT)){PK_DBG("[CAMERA LENS] set gpio dir failed!! (CMPDN)\n");}
-                if(mt_set_gpio_out(pinSet[pinSetIdx][IDX_PS_CMPDN],pinSet[pinSetIdx][IDX_PS_CMPDN+IDX_PS_OFF])){PK_DBG("[CAMERA LENS] set gpio failed!! (CMPDN)\n");}
-            }
-
-            if (GPIO_CAMERA_INVALID != pinSet[pinSetIdx][IDX_PS_CMRST]) {
-                if(mt_set_gpio_mode(pinSet[pinSetIdx][IDX_PS_CMRST],pinSet[pinSetIdx][IDX_PS_CMRST+IDX_PS_MODE])){PK_DBG("[CAMERA SENSOR] set gpio mode failed!! (CMRST)\n");}
-                if(mt_set_gpio_dir(pinSet[pinSetIdx][IDX_PS_CMRST],GPIO_DIR_OUT)){PK_DBG("[CAMERA SENSOR] set gpio dir failed!! (CMRST)\n");}
-                if(mt_set_gpio_out(pinSet[pinSetIdx][IDX_PS_CMRST],pinSet[pinSetIdx][IDX_PS_CMRST+IDX_PS_OFF])){PK_DBG("[CAMERA SENSOR] set gpio failed!! (CMRST)\n");}
-            }
-            if(TRUE != _hwPowerDown(CAMERA_POWER_VCAM_D,mode_name))
-            {
-                 PK_DBG("[CAMERA SENSOR] Fail to enable digital power\n");
-     //            goto _kdCISModulePowerOn_exit_;
-            }
-#if 0
-            if(TRUE != _hwPowerDown(SUB_CAMERA_POWER_VCAM_D,mode_name))
-            {
-                 PK_DBG("[CAMERA SENSOR] Fail to OFF core power (VCAM_D), power id = %d \n",SUB_CAMERA_POWER_VCAM_D);
-                 goto _kdCISModulePowerOn_exit_;
-            }
-#endif
-            //VCAM_A
-            if(TRUE != _hwPowerDown(CAMERA_POWER_VCAM_A,mode_name)) {
-                PK_DBG("[CAMERA SENSOR] Fail to OFF analog power (VCAM_A), power id= (%d) \n", CAMERA_POWER_VCAM_A);
-                //return -EIO;
-     //           goto _kdCISModulePowerOn_exit_;
-            }
-
-            //VCAM_IO
-            if(TRUE != _hwPowerDown(CAMERA_POWER_VCAM_IO, mode_name)) {
-                PK_DBG("[CAMERA SENSOR] Fail to OFF digital power (VCAM_IO), power id = %d \n", CAMERA_POWER_VCAM_IO);
-                //return -EIO;
-      //          goto _kdCISModulePowerOn_exit_;
-            }
-
-            //AF_VCC
-            if(TRUE != _hwPowerDown(CAMERA_POWER_VCAM_AF,mode_name))
-            {
-                PK_DBG("[CAMERA SENSOR] Fail to OFF AF power (VCAM_AF), power id = %d \n", CAMERA_POWER_VCAM_AF);
-                //return -EIO;
-       //         goto _kdCISModulePowerOn_exit_;
-            }
-
-        }
-        else if ((currSensorName && (0 == strcmp(SENSOR_DRVNAME_HI551_MIPI_RAW, currSensorName))) ||\
-                 (currSensorName && (0 == strcmp(SENSOR_DRVNAME_HI545_MIPI_RAW, currSensorName))) ||\
-                 (currSensorName && (0 == strcmp(SENSOR_DRVNAME_OV8858_MIPI_RAW, currSensorName))) ||\
-                 (currSensorName && (0 == strcmp(SENSOR_DRVNAME_OV5670_MIPI_RAW, currSensorName))) ||\
-                 (currSensorName && (0 == strcmp(SENSOR_DRVNAME_OV8865_MIPI_RAW, currSensorName)))   \
-                                                                                                      )
-        {
-      #ifdef GPIO_CAMERA_LDO_EN_PIN
-            mt_set_gpio_out(GPIO_CAMERA_LDO_EN_PIN,GPIO_OUT_ZERO);
-#endif
-            //Set Power Pin low and Reset Pin Low
-            if (GPIO_CAMERA_INVALID != pinSet[pinSetIdx][IDX_PS_CMPDN]) {
-                if(mt_set_gpio_mode(pinSet[pinSetIdx][IDX_PS_CMPDN],pinSet[pinSetIdx][IDX_PS_CMPDN+IDX_PS_MODE])){PK_DBG("[CAMERA LENS] set gpio mode failed!! (CMPDN)\n");}
-                if(mt_set_gpio_dir(pinSet[pinSetIdx][IDX_PS_CMPDN],GPIO_DIR_OUT)){PK_DBG("[CAMERA LENS] set gpio dir failed!! (CMPDN)\n");}
-                if(mt_set_gpio_out(pinSet[pinSetIdx][IDX_PS_CMPDN],pinSet[pinSetIdx][IDX_PS_CMPDN+IDX_PS_OFF])){PK_DBG("[CAMERA LENS] set gpio failed!! (CMPDN)\n");}
-            }
-
-            if (GPIO_CAMERA_INVALID != pinSet[pinSetIdx][IDX_PS_CMRST]) {
-                if(mt_set_gpio_mode(pinSet[pinSetIdx][IDX_PS_CMRST],pinSet[pinSetIdx][IDX_PS_CMRST+IDX_PS_MODE])){PK_DBG("[CAMERA SENSOR] set gpio mode failed!! (CMRST)\n");}
-                if(mt_set_gpio_dir(pinSet[pinSetIdx][IDX_PS_CMRST],GPIO_DIR_OUT)){PK_DBG("[CAMERA SENSOR] set gpio dir failed!! (CMRST)\n");}
-                if(mt_set_gpio_out(pinSet[pinSetIdx][IDX_PS_CMRST],pinSet[pinSetIdx][IDX_PS_CMRST+IDX_PS_OFF])){PK_DBG("[CAMERA SENSOR] set gpio failed!! (CMRST)\n");}
-            }
-            if(TRUE != _hwPowerDown(CAMERA_POWER_VCAM_D,mode_name))
-            {
-                 PK_DBG("[CAMERA SENSOR] Fail to enable digital power\n");
-     //            goto _kdCISModulePowerOn_exit_;
-            }
-
-#if 1
-            if(TRUE != _hwPowerDown(SUB_CAMERA_POWER_VCAM_D,mode_name))
-            {
-                 PK_DBG("[CAMERA SENSOR] Fail to OFF core power (VCAM_D), power id = %d \n",SUB_CAMERA_POWER_VCAM_D);
-                 goto _kdCISModulePowerOn_exit_;
-            }
-#endif
-            //VCAM_A
-            if(TRUE != _hwPowerDown(CAMERA_POWER_VCAM_A,mode_name)) {
-                PK_DBG("[CAMERA SENSOR] Fail to OFF analog power (VCAM_A), power id= (%d) \n", CAMERA_POWER_VCAM_A);
-                //return -EIO;
-     //           goto _kdCISModulePowerOn_exit_;
-            }
-
-            //VCAM_IO
-            if(TRUE != _hwPowerDown(CAMERA_POWER_VCAM_IO, mode_name)) {
-                PK_DBG("[CAMERA SENSOR] Fail to OFF digital power (VCAM_IO), power id = %d \n", CAMERA_POWER_VCAM_IO);
-                //return -EIO;
-      //          goto _kdCISModulePowerOn_exit_;
-            }
-
-            //AF_VCC
-            if(TRUE != _hwPowerDown(CAMERA_POWER_VCAM_AF,mode_name))
-            {
-                PK_DBG("[CAMERA SENSOR] Fail to OFF AF power (VCAM_AF), power id = %d \n", CAMERA_POWER_VCAM_AF);
-                //return -EIO;
-       //         goto _kdCISModulePowerOn_exit_;
-            }
-
-        }
-        else  if ((currSensorName &&(0 == strcmp(SENSOR_DRVNAME_GC0310_MIPI_YUV, currSensorName))) ||\
-                  (currSensorName &&(0 == strcmp(SENSOR_DRVNAME_SP2508_MIPI_RAW, currSensorName)))      ||\
-                  (currSensorName &&(0 == strcmp(SENSOR_DRVNAME_SP5409_MIPI_RAW, currSensorName)))      ||\
-                  (currSensorName &&(0 == strcmp(SENSOR_DRVNAME_GC2755_MIPI_RAW, currSensorName))) ||\
-                  (currSensorName &&(0 == strcmp(SENSOR_DRVNAME_GC2355_MIPI_RAW, currSensorName))) \
-                                                                                                  )
-        {
-      #ifdef GPIO_CAMERA_LDO_EN_PIN
-            mt_set_gpio_out(GPIO_CAMERA_LDO_EN_PIN,GPIO_OUT_ZERO);
-#endif
-		#ifdef GPIO_CAMERASUB_LDO_EN_PIN
-           mt_set_gpio_mode(GPIO_CAMERASUB_LDO_EN_PIN,GPIO_MODE_00);
-           mt_set_gpio_dir(GPIO_CAMERASUB_LDO_EN_PIN,GPIO_DIR_OUT);
-           mt_set_gpio_out(GPIO_CAMERASUB_LDO_EN_PIN,GPIO_OUT_ZERO);
-		#endif
-            //Set Power Pin low and Reset Pin Low
-            if (GPIO_CAMERA_INVALID != pinSet[pinSetIdx][IDX_PS_CMPDN]) {
-                if(mt_set_gpio_mode(pinSet[pinSetIdx][IDX_PS_CMPDN],pinSet[pinSetIdx][IDX_PS_CMPDN+IDX_PS_MODE])){PK_DBG("[CAMERA LENS] set gpio mode failed!! (CMPDN)\n");}
-                if(mt_set_gpio_dir(pinSet[pinSetIdx][IDX_PS_CMPDN],GPIO_DIR_OUT)){PK_DBG("[CAMERA LENS] set gpio dir failed!! (CMPDN)\n");}
-                if(mt_set_gpio_out(pinSet[pinSetIdx][IDX_PS_CMPDN],pinSet[pinSetIdx][IDX_PS_CMPDN+IDX_PS_OFF])){PK_DBG("[CAMERA LENS] set gpio failed!! (CMPDN)\n");}
-            }
-
-            if (GPIO_CAMERA_INVALID != pinSet[pinSetIdx][IDX_PS_CMRST]) {
-                if(mt_set_gpio_mode(pinSet[pinSetIdx][IDX_PS_CMRST],pinSet[pinSetIdx][IDX_PS_CMRST+IDX_PS_MODE])){PK_DBG("[CAMERA SENSOR] set gpio mode failed!! (CMRST)\n");}
-                if(mt_set_gpio_dir(pinSet[pinSetIdx][IDX_PS_CMRST],GPIO_DIR_OUT)){PK_DBG("[CAMERA SENSOR] set gpio dir failed!! (CMRST)\n");}
-                if(mt_set_gpio_out(pinSet[pinSetIdx][IDX_PS_CMRST],pinSet[pinSetIdx][IDX_PS_CMRST+IDX_PS_OFF])){PK_DBG("[CAMERA SENSOR] set gpio failed!! (CMRST)\n");}
-            }
-            #if 0
-            if(TRUE != _hwPowerDown(CAMERA_POWER_VCAM_D,mode_name))
-            {
-                 PK_DBG("[CAMERA SENSOR] Fail to enable digital power\n");
-     //            goto _kdCISModulePowerOn_exit_;
-            }
-            #endif
-#if 1
-            if(TRUE != _hwPowerDown(SUB_CAMERA_POWER_VCAM_D,mode_name))
-            {
-                 PK_DBG("[CAMERA SENSOR] Fail to OFF core power (VCAM_D), power id = %d \n",SUB_CAMERA_POWER_VCAM_D);
-    //             goto _kdCISModulePowerOn_exit_;
-            }
-#endif
-            //VCAM_A
-            if(TRUE != _hwPowerDown(CAMERA_POWER_VCAM_A,mode_name)) {
-                PK_DBG("[CAMERA SENSOR] Fail to OFF analog power (VCAM_A), power id= (%d) \n", CAMERA_POWER_VCAM_A);
-                //return -EIO;
-     //           goto _kdCISModulePowerOn_exit_;
-            }
-
-            //VCAM_IO
-            if(TRUE != _hwPowerDown(CAMERA_POWER_VCAM_IO, mode_name)) {
-                PK_DBG("[CAMERA SENSOR] Fail to OFF digital power (VCAM_IO), power id = %d \n", CAMERA_POWER_VCAM_IO);
-                //return -EIO;
-      //          goto _kdCISModulePowerOn_exit_;
-            }
-#if 1//VANZO_FEATURE_GC2755MIPIRAW_FOCUS_EN
-            //AF_VCC
-            if(TRUE != _hwPowerDown(CAMERA_POWER_VCAM_AF,mode_name))
-            {
-                PK_DBG("[CAMERA SENSOR] Fail to OFF AF power (VCAM_AF), power id = %d \n", CAMERA_POWER_VCAM_AF);
-                //return -EIO;
-       //         goto _kdCISModulePowerOn_exit_;
-            }
-#endif
-
-        } 
-        else if ((currSensorName && (0 == strcmp(SENSOR_DRVNAME_GC2035_YUV, currSensorName))) \
-                                                                                                      )
-        {
-      #ifdef GPIO_CAMERA_LDO_EN_PIN
-            mt_set_gpio_out(GPIO_CAMERA_LDO_EN_PIN,GPIO_OUT_ZERO);
-#endif
-            //Set Power Pin low and Reset Pin Low
-            if (GPIO_CAMERA_INVALID != pinSet[pinSetIdx][IDX_PS_CMPDN]) {
-                if(mt_set_gpio_mode(pinSet[pinSetIdx][IDX_PS_CMPDN],pinSet[pinSetIdx][IDX_PS_CMPDN+IDX_PS_MODE])){PK_DBG("[CAMERA LENS] set gpio mode failed!! (CMPDN)\n");}
-                if(mt_set_gpio_dir(pinSet[pinSetIdx][IDX_PS_CMPDN],GPIO_DIR_OUT)){PK_DBG("[CAMERA LENS] set gpio dir failed!! (CMPDN)\n");}
-                if(mt_set_gpio_out(pinSet[pinSetIdx][IDX_PS_CMPDN],pinSet[pinSetIdx][IDX_PS_CMPDN+IDX_PS_OFF])){PK_DBG("[CAMERA LENS] set gpio failed!! (CMPDN)\n");}
-            }
-
-            if (GPIO_CAMERA_INVALID != pinSet[pinSetIdx][IDX_PS_CMRST]) {
-                if(mt_set_gpio_mode(pinSet[pinSetIdx][IDX_PS_CMRST],pinSet[pinSetIdx][IDX_PS_CMRST+IDX_PS_MODE])){PK_DBG("[CAMERA SENSOR] set gpio mode failed!! (CMRST)\n");}
-                if(mt_set_gpio_dir(pinSet[pinSetIdx][IDX_PS_CMRST],GPIO_DIR_OUT)){PK_DBG("[CAMERA SENSOR] set gpio dir failed!! (CMRST)\n");}
-                if(mt_set_gpio_out(pinSet[pinSetIdx][IDX_PS_CMRST],pinSet[pinSetIdx][IDX_PS_CMRST+IDX_PS_OFF])){PK_DBG("[CAMERA SENSOR] set gpio failed!! (CMRST)\n");}
-            }
-            if(TRUE != _hwPowerDown(CAMERA_POWER_VCAM_D,mode_name))
-            {
-                 PK_DBG("[CAMERA SENSOR] Fail to enable digital power\n");
-     //            goto _kdCISModulePowerOn_exit_;
-            }
-            //VCAM_A
-            if(TRUE != _hwPowerDown(CAMERA_POWER_VCAM_A,mode_name)) {
-                PK_DBG("[CAMERA SENSOR] Fail to OFF analog power (VCAM_A), power id= (%d) \n", CAMERA_POWER_VCAM_A);
-                //return -EIO;
-     //           goto _kdCISModulePowerOn_exit_;
-            }
-
-            //VCAM_IO
-            if(TRUE != _hwPowerDown(CAMERA_POWER_VCAM_IO, mode_name)) {
-                PK_DBG("[CAMERA SENSOR] Fail to OFF digital power (VCAM_IO), power id = %d \n", CAMERA_POWER_VCAM_IO);
-                //return -EIO;
-      //          goto _kdCISModulePowerOn_exit_;
-            }
-
-            //AF_VCC
-            if(TRUE != _hwPowerDown(CAMERA_POWER_VCAM_AF,mode_name))
-            {
-                PK_DBG("[CAMERA SENSOR] Fail to OFF AF power (VCAM_AF), power id = %d \n", CAMERA_POWER_VCAM_AF);
-                //return -EIO;
-       //         goto _kdCISModulePowerOn_exit_;
-            }
-
-        }
-       else  if ((currSensorName &&(0 == strcmp(SENSOR_DRVNAME_GC0330_YUV, currSensorName))) || \
-                (currSensorName &&(0 == strcmp(SENSOR_DRVNAME_GC0330_YUV,currSensorName))) \
-				                                                                                )
-        {
-                 #ifdef GPIO_CAMERA_LDO_EN_PIN
-            mt_set_gpio_out(GPIO_CAMERA_LDO_EN_PIN,GPIO_OUT_ZERO);
-#endif
-            //Set Power Pin low and Reset Pin Low
-            if (GPIO_CAMERA_INVALID != pinSet[pinSetIdx][IDX_PS_CMPDN]) {
-                if(mt_set_gpio_mode(pinSet[pinSetIdx][IDX_PS_CMPDN],pinSet[pinSetIdx][IDX_PS_CMPDN+IDX_PS_MODE])){PK_DBG("[CAMERA LENS] set gpio mode failed!! (CMPDN)\n");}
-                if(mt_set_gpio_dir(pinSet[pinSetIdx][IDX_PS_CMPDN],GPIO_DIR_OUT)){PK_DBG("[CAMERA LENS] set gpio dir failed!! (CMPDN)\n");}
-                if(mt_set_gpio_out(pinSet[pinSetIdx][IDX_PS_CMPDN],pinSet[pinSetIdx][IDX_PS_CMPDN+IDX_PS_OFF])){PK_DBG("[CAMERA LENS] set gpio failed!! (CMPDN)\n");}
-            }
-
-            if (GPIO_CAMERA_INVALID != pinSet[pinSetIdx][IDX_PS_CMRST]) {
-                if(mt_set_gpio_mode(pinSet[pinSetIdx][IDX_PS_CMRST],pinSet[pinSetIdx][IDX_PS_CMRST+IDX_PS_MODE])){PK_DBG("[CAMERA SENSOR] set gpio mode failed!! (CMRST)\n");}
-                if(mt_set_gpio_dir(pinSet[pinSetIdx][IDX_PS_CMRST],GPIO_DIR_OUT)){PK_DBG("[CAMERA SENSOR] set gpio dir failed!! (CMRST)\n");}
-                if(mt_set_gpio_out(pinSet[pinSetIdx][IDX_PS_CMRST],pinSet[pinSetIdx][IDX_PS_CMRST+IDX_PS_OFF])){PK_DBG("[CAMERA SENSOR] set gpio failed!! (CMRST)\n");}
-            }
-            #if 1
-            if(TRUE != _hwPowerDown(CAMERA_POWER_VCAM_D,mode_name))
-            {
-                 PK_DBG("[CAMERA SENSOR] Fail to enable digital power\n");
-     //            goto _kdCISModulePowerOn_exit_;
-            }
-            #endif
-#if 0
-            if(TRUE != _hwPowerDown(SUB_CAMERA_POWER_VCAM_D,mode_name))
-            {
-                 PK_DBG("[CAMERA SENSOR] Fail to OFF core power (VCAM_D), power id = %d \n",SUB_CAMERA_POWER_VCAM_D);
-    //             goto _kdCISModulePowerOn_exit_;
-            }
-#endif
-            //VCAM_A
-            if(TRUE != _hwPowerDown(CAMERA_POWER_VCAM_A,mode_name)) {
-                PK_DBG("[CAMERA SENSOR] Fail to OFF analog power (VCAM_A), power id= (%d) \n", CAMERA_POWER_VCAM_A);
-                //return -EIO;
-     //           goto _kdCISModulePowerOn_exit_;
-            }
-
-            //VCAM_IO
-            if(TRUE != _hwPowerDown(CAMERA_POWER_VCAM_IO, mode_name)) {
-                PK_DBG("[CAMERA SENSOR] Fail to OFF digital power (VCAM_IO), power id = %d \n", CAMERA_POWER_VCAM_IO);
-                //return -EIO;
-      //          goto _kdCISModulePowerOn_exit_;
-            }
-            //AF_VCC
-            if(TRUE != _hwPowerDown(CAMERA_POWER_VCAM_AF,mode_name))
-            {
-                PK_DBG("[CAMERA SENSOR] Fail to OFF AF power (VCAM_AF), power id = %d \n", CAMERA_POWER_VCAM_AF);
-                //return -EIO;
-       //         goto _kdCISModulePowerOn_exit_;
-            }
-        }
-             else
-        {
-                 #ifdef GPIO_CAMERA_LDO_EN_PIN
-            mt_set_gpio_out(GPIO_CAMERA_LDO_EN_PIN,GPIO_OUT_ZERO);
-#endif
-            //Set Power Pin low and Reset Pin Low
-            if (GPIO_CAMERA_INVALID != pinSet[pinSetIdx][IDX_PS_CMPDN]) {
-                if(mt_set_gpio_mode(pinSet[pinSetIdx][IDX_PS_CMPDN],pinSet[pinSetIdx][IDX_PS_CMPDN+IDX_PS_MODE])){PK_DBG("[CAMERA LENS] set gpio mode failed!! (CMPDN)\n");}
-                if(mt_set_gpio_dir(pinSet[pinSetIdx][IDX_PS_CMPDN],GPIO_DIR_OUT)){PK_DBG("[CAMERA LENS] set gpio dir failed!! (CMPDN)\n");}
-                if(mt_set_gpio_out(pinSet[pinSetIdx][IDX_PS_CMPDN],pinSet[pinSetIdx][IDX_PS_CMPDN+IDX_PS_OFF])){PK_DBG("[CAMERA LENS] set gpio failed!! (CMPDN)\n");}
-            }
-
-
-            if (GPIO_CAMERA_INVALID != pinSet[pinSetIdx][IDX_PS_CMRST]) {
-                    if(mt_set_gpio_mode(pinSet[pinSetIdx][IDX_PS_CMRST],pinSet[pinSetIdx][IDX_PS_CMRST+IDX_PS_MODE])){PK_DBG("[CAMERA SENSOR] set gpio mode failed!! (CMRST)\n");}
-                    if(mt_set_gpio_dir(pinSet[pinSetIdx][IDX_PS_CMRST],GPIO_DIR_OUT)){PK_DBG("[CAMERA SENSOR] set gpio dir failed!! (CMRST)\n");}
-                    if(mt_set_gpio_out(pinSet[pinSetIdx][IDX_PS_CMRST],pinSet[pinSetIdx][IDX_PS_CMRST+IDX_PS_OFF])){PK_DBG("[CAMERA SENSOR] set gpio failed!! (CMRST)\n");}
-            }
-
-            if(currSensorName && (0 == strcmp(SENSOR_DRVNAME_IMX219_MIPI_RAW, currSensorName)))
-	    {
-		if(pinSetIdx == 0 && TRUE != _hwPowerDown(CAMERA_POWER_VCAM_D, mode_name))
-		 {
-		   PK_DBG("[CAMERA SENSOR] main imx220 Fail to OFF core power (VCAM_D), power id = %d \n",CAMERA_POWER_VCAM_D);
-		   goto _kdCISModulePowerOn_exit_;
-		 }
-	    } else {
-
-	         if(TRUE != _hwPowerDown(CAMERA_POWER_VCAM_D,mode_name))
-	         {
-	            PK_DBG("[CAMERA SENSOR] Fail to OFF core power (VCAM_D), power id = %d \n",CAMERA_POWER_VCAM_D);
-	            goto _kdCISModulePowerOn_exit_;
-	          }
-	   }
-            if(TRUE != hwPowerDown(SUB_CAMERA_POWER_VCAM_D,mode_name))
-            {
-                 PK_DBG("[CAMERA SENSOR] Fail to OFF core power (VCAM_D),       power id = %d \n",SUB_CAMERA_POWER_VCAM_D);
-                 goto _kdCISModulePowerOn_exit_;
-            }
-
-
-            //VCAM_A
-            if(TRUE != _hwPowerDown(CAMERA_POWER_VCAM_A,mode_name)) {
+            if(TRUE != hwPowerDown(CAMERA_POWER_VCAM_A,mode_name)) {
                 PK_DBG("[CAMERA SENSOR] Fail to OFF analog power (VCAM_A), power id= (%d) \n", CAMERA_POWER_VCAM_A);
                 //return -EIO;
                 goto _kdCISModulePowerOn_exit_;
             }
 
             //VCAM_IO
-            if(TRUE != _hwPowerDown(CAMERA_POWER_VCAM_IO, mode_name)) {
+            if(TRUE != hwPowerDown(CAMERA_POWER_VCAM_IO, mode_name)) {
                 PK_DBG("[CAMERA SENSOR] Fail to OFF digital power (VCAM_IO), power id = %d \n", CAMERA_POWER_VCAM_IO);
                 //return -EIO;
                 goto _kdCISModulePowerOn_exit_;
             }
-
+#ifndef CONFIG_HCT_AF_POWER_ON_NOISE
             //AF_VCC
-            if(TRUE != _hwPowerDown(CAMERA_POWER_VCAM_AF,mode_name))
+            if(TRUE != hwPowerDown(CAMERA_POWER_VCAM_AF,mode_name))
             {
                 PK_DBG("[CAMERA SENSOR] Fail to OFF AF power (VCAM_AF), power id = %d \n", CAMERA_POWER_VCAM_AF);
                 //return -EIO;
                 goto _kdCISModulePowerOn_exit_;
             }
-
+#endif
         }
+	config_sensor_rst_pwd(currSensorName);
+    }//
 
-    }
-
-    return 0;
+	return 0;
 
 _kdCISModulePowerOn_exit_:
     return -EIO;
-
 }
 
 EXPORT_SYMBOL(kdCISModulePowerOn);
-
-//!--
-//
-
-
diff --git a/drivers/misc/mediatek/mach/mt6735/X5PRO_6735m/camera/camera/kd_camera_hw.c~ b/drivers/misc/mediatek/mach/mt6735/X5PRO_6735m/camera/camera/kd_camera_hw.c~
deleted file mode 100755
index d590e1b..0000000
--- a/drivers/misc/mediatek/mach/mt6735/X5PRO_6735m/camera/camera/kd_camera_hw.c~
+++ /dev/null
@@ -1,1089 +0,0 @@
-#include <linux/videodev2.h>
-#include <linux/i2c.h>
-#include <linux/platform_device.h>
-#include <linux/delay.h>
-#include <linux/cdev.h>
-#include <linux/uaccess.h>
-#include <linux/fs.h>
-#include <asm/atomic.h>
-#include <linux/xlog.h>
-
-#include "kd_camera_hw.h"
-
-#include "kd_imgsensor.h"
-#include "kd_imgsensor_define.h"
-#include "kd_camera_feature.h"
-
-/******************************************************************************
- * Debug configuration
-******************************************************************************/
-#define PFX "[kd_camera_hw]"
-#define PK_DBG_NONE(fmt, arg...)    do {} while (0)
-#define PK_DBG_FUNC(fmt, args...)    pr_debug(PFX  fmt, ##args)
-
-#define DEBUG_CAMERA_HW_K
-#ifdef DEBUG_CAMERA_HW_K
-#define PK_DBG PK_DBG_FUNC
-#define PK_ERR(fmt, arg...)   pr_err(fmt, ##arg)
-#define PK_XLOG_INFO(fmt, args...) \
-                do {    \
-                   pr_debug(PFX  fmt, ##args); \
-                } while(0)
-#else
-#define PK_DBG(a,...)
-#define PK_ERR(a,...)
-#define PK_XLOG_INFO(fmt, args...)
-#endif
-
-/*
-#ifndef BOOL
-typedef unsigned char BOOL;
-#endif
-*/
-
-/* Mark: need to verify whether ISP_MCLK1_EN is required in here //Jessy @2014/06/04*/
-extern void ISP_MCLK1_EN(BOOL En);
-
-int cntVCAMD =0;
-int cntVCAMA =0;
-int cntVCAMIO =0;
-int cntVCAMAF =0;
-int cntVCAMD_SUB =0;
-
-static DEFINE_SPINLOCK(kdsensor_pw_cnt_lock);
-
-
-bool _hwPowerOn(MT65XX_POWER powerId, int powerVolt, char *mode_name){
-
-	if( hwPowerOn( powerId,  powerVolt, mode_name))
-	{
-	    spin_lock(&kdsensor_pw_cnt_lock);
-		if(powerId==CAMERA_POWER_VCAM_D)
-			cntVCAMD+= 1;
-		else if(powerId==CAMERA_POWER_VCAM_A)
-			cntVCAMA+= 1;
-		else if(powerId==CAMERA_POWER_VCAM_IO)
-			cntVCAMIO+= 1;
-		else if(powerId==CAMERA_POWER_VCAM_AF)
-			cntVCAMAF+= 1;
-		else if(powerId==SUB_CAMERA_POWER_VCAM_D)
-			cntVCAMD_SUB+= 1;
-		spin_unlock(&kdsensor_pw_cnt_lock);
-		return true;
-	}
-	return false;
-}
-
-bool _hwPowerDown(MT65XX_POWER powerId, char *mode_name){
-
-	if( hwPowerDown( powerId, mode_name))
-	{
-	    spin_lock(&kdsensor_pw_cnt_lock);
-		if(powerId==CAMERA_POWER_VCAM_D)
-			cntVCAMD-= 1;
-		else if(powerId==CAMERA_POWER_VCAM_A)
-			cntVCAMA-= 1;
-		else if(powerId==CAMERA_POWER_VCAM_IO)
-			cntVCAMIO-= 1;
-		else if(powerId==CAMERA_POWER_VCAM_AF)
-			cntVCAMAF-= 1;
-		else if(powerId==SUB_CAMERA_POWER_VCAM_D)
-			cntVCAMD_SUB-= 1;
-		spin_unlock(&kdsensor_pw_cnt_lock);
-		return true;
-	}
-	return false;
-}
-
-void checkPowerBeforClose( char* mode_name)
-{
-
-	int i= 0;
-
-	PK_DBG("[checkPowerBeforClose]cntVCAMD:%d, cntVCAMA:%d,cntVCAMIO:%d, cntVCAMAF:%d, cntVCAMD_SUB:%d,\n",
-		cntVCAMD, cntVCAMA,cntVCAMIO,cntVCAMAF,cntVCAMD_SUB);
-
-
-	for(i=0;i<cntVCAMD;i++)
-		hwPowerDown(CAMERA_POWER_VCAM_D,mode_name);
-	for(i=0;i<cntVCAMA;i++)
-		hwPowerDown(CAMERA_POWER_VCAM_A,mode_name);
-	for(i=0;i<cntVCAMIO;i++)
-		hwPowerDown(CAMERA_POWER_VCAM_IO,mode_name);
-	for(i=0;i<cntVCAMAF;i++)
-		hwPowerDown(CAMERA_POWER_VCAM_AF,mode_name);
-	for(i=0;i<cntVCAMD_SUB;i++)
-		hwPowerDown(SUB_CAMERA_POWER_VCAM_D,mode_name);
-
-	 cntVCAMD =0;
-	 cntVCAMA =0;
-	 cntVCAMIO =0;
-	 cntVCAMAF =0;
-	 cntVCAMD_SUB =0;
-
-}
-
-
-
-int kdCISModulePowerOn(CAMERA_DUAL_CAMERA_SENSOR_ENUM SensorIdx, char *currSensorName, BOOL On, char* mode_name)
-{
-
-u32 pinSetIdx = 0;//default main sensor
-
-#define IDX_PS_CMRST 0
-#define IDX_PS_CMPDN 4
-#define IDX_PS_MODE 1
-#define IDX_PS_ON   2
-#define IDX_PS_OFF  3
-
-
-u32 pinSet[3][8] = {
-                        //for main sensor
-                     {  CAMERA_CMRST_PIN, // The reset pin of main sensor uses GPIO10 of mt6306, please call mt6306 API to set
-                        CAMERA_CMRST_PIN_M_GPIO,   /* mode */
-                        GPIO_OUT_ONE,              /* ON state */
-                        GPIO_OUT_ZERO,             /* OFF state */
-                        CAMERA_CMPDN_PIN,
-                        CAMERA_CMPDN_PIN_M_GPIO,
-                        GPIO_OUT_ONE,
-                        GPIO_OUT_ZERO,
-                     },
-                     //for sub sensor
-                     {  CAMERA_CMRST_PIN,
-                        CAMERA_CMRST_PIN_M_GPIO,
-                        GPIO_OUT_ONE,
-                        GPIO_OUT_ZERO,
-                        CAMERA_CMPDN1_PIN,
-                        CAMERA_CMPDN1_PIN_M_GPIO,
-                        GPIO_OUT_ONE,
-                        GPIO_OUT_ZERO,
-                     },
-                     //for main_2 sensor
-                     {  GPIO_CAMERA_INVALID,
-                        GPIO_CAMERA_INVALID,   /* mode */
-                        GPIO_OUT_ONE,               /* ON state */
-                        GPIO_OUT_ZERO,              /* OFF state */
-                        GPIO_CAMERA_INVALID,
-                        GPIO_CAMERA_INVALID,
-                        GPIO_OUT_ONE,
-                        GPIO_OUT_ZERO,
-                     }
-                   };
-
-
-
-    if (DUAL_CAMERA_MAIN_SENSOR == SensorIdx){
-        pinSetIdx = 0;
-    }
-    else if (DUAL_CAMERA_SUB_SENSOR == SensorIdx) {
-        pinSetIdx = 1;
-    }
-    else if (DUAL_CAMERA_MAIN_2_SENSOR == SensorIdx) {
-        pinSetIdx = 2;
-    }
-
-
-    //power ON
-    if (On) {
-
-            ISP_MCLK1_EN(1);
-
-        PK_DBG("[PowerON]pinSetIdx:%d, currSensorName: %s\n", pinSetIdx, currSensorName);
-
-        if ((currSensorName && (0 == strcmp(currSensorName,"imx135mipiraw")))||
-            (currSensorName && (0 == strcmp(currSensorName,"imx220mipiraw"))))
-        {
-            //First Power Pin low and Reset Pin Low
-            if (GPIO_CAMERA_INVALID != pinSet[pinSetIdx][IDX_PS_CMPDN]) {
-                if(mt_set_gpio_mode(pinSet[pinSetIdx][IDX_PS_CMPDN],pinSet[pinSetIdx][IDX_PS_CMPDN+IDX_PS_MODE])){PK_DBG("[CAMERA LENS] set gpio mode failed!! (CMPDN)\n");}
-                if(mt_set_gpio_dir(pinSet[pinSetIdx][IDX_PS_CMPDN],GPIO_DIR_OUT)){PK_DBG("[CAMERA LENS] set gpio dir failed!! (CMPDN)\n");}
-                if(mt_set_gpio_out(pinSet[pinSetIdx][IDX_PS_CMPDN],pinSet[pinSetIdx][IDX_PS_CMPDN+IDX_PS_OFF])){PK_DBG("[CAMERA LENS] set gpio failed!! (CMPDN)\n");}
-            }
-
-
-            if (GPIO_CAMERA_INVALID != pinSet[pinSetIdx][IDX_PS_CMRST]) {
-                if(mt_set_gpio_mode(pinSet[pinSetIdx][IDX_PS_CMRST],pinSet[pinSetIdx][IDX_PS_CMRST+IDX_PS_MODE])){PK_DBG("[CAMERA SENSOR] set gpio mode failed!! (CMRST)\n");}
-                if(mt_set_gpio_dir(pinSet[pinSetIdx][IDX_PS_CMRST],GPIO_DIR_OUT)){PK_DBG("[CAMERA SENSOR] set gpio dir failed!! (CMRST)\n");}
-                if(mt_set_gpio_out(pinSet[pinSetIdx][IDX_PS_CMRST],pinSet[pinSetIdx][IDX_PS_CMRST+IDX_PS_OFF])){PK_DBG("[CAMERA SENSOR] set gpio failed!! (CMRST)\n");}
-            }
-
-            //AF_VCC
-            if(TRUE != _hwPowerOn(CAMERA_POWER_VCAM_AF, VOL_2800,mode_name))
-            {
-                PK_DBG("[CAMERA SENSOR] Fail to enable analog power (VCAM_AF), power id = %d \n", CAMERA_POWER_VCAM_AF);
-                goto _kdCISModulePowerOn_exit_;
-            }
-
-            mdelay(1);
-
-            //VCAM_A
-            if(TRUE != _hwPowerOn(CAMERA_POWER_VCAM_A, VOL_2800,mode_name))
-            {
-                PK_DBG("[CAMERA SENSOR] Fail to enable analog power (VCAM_A), power id = %d\n", CAMERA_POWER_VCAM_A);
-                goto _kdCISModulePowerOn_exit_;
-            }
-
-            mdelay(1);
-
-            if(TRUE != _hwPowerOn(CAMERA_POWER_VCAM_D, VOL_1000,mode_name))
-            {
-                 PK_DBG("[CAMERA SENSOR] Fail to enable digital power (VCAM_D), power id = %d \n", CAMERA_POWER_VCAM_D);
-                 goto _kdCISModulePowerOn_exit_;
-            }
-
-            mdelay(1);
-
-            //VCAM_IO
-            if(TRUE != _hwPowerOn(CAMERA_POWER_VCAM_IO, VOL_1800, mode_name))
-            {
-                PK_DBG("[CAMERA SENSOR] Fail to enable digital power (VCAM_IO), power id = %d \n", CAMERA_POWER_VCAM_IO);
-                goto _kdCISModulePowerOn_exit_;
-            }
-
-            mdelay(2);
-
-
-            //enable active sensor
-            if (GPIO_CAMERA_INVALID != pinSet[pinSetIdx][IDX_PS_CMRST]) {
-                if(mt_set_gpio_mode(pinSet[pinSetIdx][IDX_PS_CMRST],pinSet[pinSetIdx][IDX_PS_CMRST+IDX_PS_MODE])){PK_DBG("[CAMERA SENSOR] set gpio mode failed!! (CMRST)\n");}
-                if(mt_set_gpio_dir(pinSet[pinSetIdx][IDX_PS_CMRST],GPIO_DIR_OUT)){PK_DBG("[CAMERA SENSOR] set gpio dir failed!! (CMRST)\n");}
-                if(mt_set_gpio_out(pinSet[pinSetIdx][IDX_PS_CMRST],pinSet[pinSetIdx][IDX_PS_CMRST+IDX_PS_ON])){PK_DBG("[CAMERA SENSOR] set gpio failed!! (CMRST)\n");}
-            }
-
-            if (GPIO_CAMERA_INVALID != pinSet[pinSetIdx][IDX_PS_CMPDN]) {
-                if(mt_set_gpio_out(pinSet[pinSetIdx][IDX_PS_CMPDN],pinSet[pinSetIdx][IDX_PS_CMPDN+IDX_PS_ON])){PK_DBG("[CAMERA LENS] set gpio failed!! (CMPDN)\n");}
-            }
-
-        }
-        else if (currSensorName && (0 == strcmp(SENSOR_DRVNAME_OV5648_MIPI_RAW, currSensorName)) && (pinSetIdx == 0))
-        {
-           // mt_set_gpio_mode(GPIO_SPI_MOSI_PIN,GPIO_MODE_00);
-           // mt_set_gpio_dir(GPIO_SPI_MOSI_PIN,GPIO_DIR_OUT);
-           // mt_set_gpio_out(GPIO_SPI_MOSI_PIN,GPIO_OUT_ONE);
-            //First Power Pin low and Reset Pin Low
-            if (GPIO_CAMERA_INVALID != pinSet[pinSetIdx][IDX_PS_CMPDN]) {
-                if(mt_set_gpio_mode(pinSet[pinSetIdx][IDX_PS_CMPDN],pinSet[pinSetIdx][IDX_PS_CMPDN+IDX_PS_MODE])){PK_DBG("[CAMERA LENS] set gpio mode failed!! (CMPDN)\n");}
-                if(mt_set_gpio_dir(pinSet[pinSetIdx][IDX_PS_CMPDN],GPIO_DIR_OUT)){PK_DBG("[CAMERA LENS] set gpio dir failed!! (CMPDN)\n");}
-                if(mt_set_gpio_out(pinSet[pinSetIdx][IDX_PS_CMPDN],pinSet[pinSetIdx][IDX_PS_CMPDN+IDX_PS_OFF])){PK_DBG("[CAMERA LENS] set gpio failed!! (CMPDN)\n");}
-            }
-			mdelay(2);
-            if (GPIO_CAMERA_INVALID != pinSet[pinSetIdx][IDX_PS_CMRST]) {
-                if(mt_set_gpio_mode(pinSet[pinSetIdx][IDX_PS_CMRST],pinSet[pinSetIdx][IDX_PS_CMRST+IDX_PS_MODE])){PK_DBG("[CAMERA SENSOR] set gpio mode failed!! (CMRST)\n");}
-                if(mt_set_gpio_dir(pinSet[pinSetIdx][IDX_PS_CMRST],GPIO_DIR_OUT)){PK_DBG("[CAMERA SENSOR] set gpio dir failed!! (CMRST)\n");}
-                if(mt_set_gpio_out(pinSet[pinSetIdx][IDX_PS_CMRST],pinSet[pinSetIdx][IDX_PS_CMRST+IDX_PS_OFF])){PK_DBG("[CAMERA SENSOR] set gpio failed!! (CMRST)\n");}
-			mdelay(2);
-            }
-
-	     //VCAM_A
-            if(TRUE != _hwPowerOn(CAMERA_POWER_VCAM_A, VOL_2800,mode_name))
-            {
-                PK_DBG("[CAMERA SENSOR] Fail to enable analog power (VCAM_A), power id = %d\n", CAMERA_POWER_VCAM_A);
-                goto _kdCISModulePowerOn_exit_;
-            }
-
-            mdelay(2);
-            //VCAM_IO
-            if(TRUE != _hwPowerOn(CAMERA_POWER_VCAM_IO, VOL_1800, mode_name))
-            {
-                PK_DBG("[CAMERA SENSOR] Fail to enable digital power (VCAM_IO), power id = %d \n", CAMERA_POWER_VCAM_IO);
-                goto _kdCISModulePowerOn_exit_;
-            }
-
-            mdelay(2);
-
-            if(TRUE != _hwPowerOn(SUB_CAMERA_POWER_VCAM_D, VOL_1500,mode_name))
-            {
-                 PK_DBG("[CAMERA SENSOR] Fail to enable digital power (VCAM_D), power id = %d \n", SUB_CAMERA_POWER_VCAM_D);
-                 goto _kdCISModulePowerOn_exit_;
-            }
-
-            mdelay(5);
-
-            //AF_VCC
-            if(TRUE != _hwPowerOn(CAMERA_POWER_VCAM_AF, VOL_2800,mode_name))
-            {
-                PK_DBG("[CAMERA SENSOR] Fail to enable analog power (VCAM_AF), power id = %d \n", CAMERA_POWER_VCAM_AF);
-                goto _kdCISModulePowerOn_exit_;
-            }
-
-
-            mdelay(1);
-
-
-           if (GPIO_CAMERA_INVALID != pinSet[pinSetIdx][IDX_PS_CMRST])
-		{
-			if(mt_set_gpio_out(pinSet[pinSetIdx][IDX_PS_CMPDN],pinSet[pinSetIdx][IDX_PS_CMPDN+IDX_PS_ON])){PK_DBG("[CAMERA LENS] set gpio failed!! \n");}
-			mdelay(5);
-	
-			//RST pin
-			if(mt_set_gpio_out(pinSet[pinSetIdx][IDX_PS_CMRST],pinSet[pinSetIdx][IDX_PS_CMRST+IDX_PS_ON])){PK_DBG("[CAMERA SENSOR] set gpio failed!! \n");}
-			mdelay(5);
-		}
-		mdelay(50);
-
-	#if 1
-	        //disable inactive sensor
-	        //jeff modify for Q26 V1.1   
-	        //cause Main and Sub Cameras use the same RST pin.
-	        //so remove this part's CMRST.
-	       //disable sub
-	        if (GPIO_CAMERA_INVALID != pinSet[1][IDX_PS_CMRST]) {
-	  //          if(mt_set_gpio_mode(pinSet[1][IDX_PS_CMRST],pinSet[1][IDX_PS_CMRST+IDX_PS_MODE])){PK_DBG("[CAMERA SENSOR] set gpio mode failed!! \n");}
-	            if(mt_set_gpio_mode(pinSet[1][IDX_PS_CMPDN],pinSet[1][IDX_PS_CMPDN+IDX_PS_MODE])){PK_DBG("[CAMERA LENS] set gpio mode failed!! \n");}
-	  //          if(mt_set_gpio_dir(pinSet[1][IDX_PS_CMRST],GPIO_DIR_OUT)){PK_DBG("[CAMERA SENSOR] set gpio dir failed!! \n");}
-	            if(mt_set_gpio_dir(pinSet[1][IDX_PS_CMPDN],GPIO_DIR_OUT)){PK_DBG("[CAMERA LENS] set gpio dir failed!! \n");}
-	  //          if(mt_set_gpio_out(pinSet[1][IDX_PS_CMRST],pinSet[1][IDX_PS_CMRST+IDX_PS_OFF])){PK_DBG("[CAMERA SENSOR] set gpio failed!! \n");} //low == reset sensor
-	            if(mt_set_gpio_out(pinSet[1][IDX_PS_CMPDN],pinSet[1][IDX_PS_CMPDN+IDX_PS_OFF])){PK_DBG("[CAMERA LENS] set gpio failed!! \n");} //high == power down lens module
-	        }
-	#endif
-        }
-
-/////////////////////////////////////////////////
-	else if (currSensorName && (0 == strcmp(SENSOR_DRVNAME_OV8858_MIPI_RAW, currSensorName)) && (pinSetIdx == 0))
-        {
-          //  mt_set_gpio_mode(GPIO_SPI_MOSI_PIN,GPIO_MODE_00);
-          //  mt_set_gpio_dir(GPIO_SPI_MOSI_PIN,GPIO_DIR_OUT);
-          //  mt_set_gpio_out(GPIO_SPI_MOSI_PIN,GPIO_OUT_ONE);
-            //First Power Pin low and Reset Pin Low
-            if (GPIO_CAMERA_INVALID != pinSet[pinSetIdx][IDX_PS_CMPDN]) {
-                if(mt_set_gpio_mode(pinSet[pinSetIdx][IDX_PS_CMPDN],pinSet[pinSetIdx][IDX_PS_CMPDN+IDX_PS_MODE])){PK_DBG("[CAMERA LENS] set gpio mode failed!! (CMPDN)\n");}
-                if(mt_set_gpio_dir(pinSet[pinSetIdx][IDX_PS_CMPDN],GPIO_DIR_OUT)){PK_DBG("[CAMERA LENS] set gpio dir failed!! (CMPDN)\n");}
-                if(mt_set_gpio_out(pinSet[pinSetIdx][IDX_PS_CMPDN],pinSet[pinSetIdx][IDX_PS_CMPDN+IDX_PS_OFF])){PK_DBG("[CAMERA LENS] set gpio failed!! (CMPDN)\n");}
-            }
-			mdelay(2);
-            if (GPIO_CAMERA_INVALID != pinSet[pinSetIdx][IDX_PS_CMRST]) {
-                if(mt_set_gpio_mode(pinSet[pinSetIdx][IDX_PS_CMRST],pinSet[pinSetIdx][IDX_PS_CMRST+IDX_PS_MODE])){PK_DBG("[CAMERA SENSOR] set gpio mode failed!! (CMRST)\n");}
-                if(mt_set_gpio_dir(pinSet[pinSetIdx][IDX_PS_CMRST],GPIO_DIR_OUT)){PK_DBG("[CAMERA SENSOR] set gpio dir failed!! (CMRST)\n");}
-                if(mt_set_gpio_out(pinSet[pinSetIdx][IDX_PS_CMRST],pinSet[pinSetIdx][IDX_PS_CMRST+IDX_PS_OFF])){PK_DBG("[CAMERA SENSOR] set gpio failed!! (CMRST)\n");}
-			mdelay(2);
-            }
-
-	   //VCAM_A
-            if(TRUE != _hwPowerOn(CAMERA_POWER_VCAM_A, VOL_2800,mode_name))
-            {
-                PK_DBG("[CAMERA SENSOR] Fail to enable analog power (VCAM_A), power id = %d\n", CAMERA_POWER_VCAM_A);
-                goto _kdCISModulePowerOn_exit_;
-            }
-
-            mdelay(2);
-            //VCAM_IO
-            if(TRUE != _hwPowerOn(CAMERA_POWER_VCAM_IO, VOL_1800, mode_name))
-            {
-                PK_DBG("[CAMERA SENSOR] Fail to enable digital power (VCAM_IO), power id = %d \n", CAMERA_POWER_VCAM_IO);
-                goto _kdCISModulePowerOn_exit_;
-            }
-
-            mdelay(2);
-
-            if(TRUE != _hwPowerOn(SUB_CAMERA_POWER_VCAM_D, VOL_1200,mode_name))
-            {
-                 PK_DBG("[CAMERA SENSOR] Fail to enable digital power (VCAM_D), power id = %d \n", SUB_CAMERA_POWER_VCAM_D);
-                 goto _kdCISModulePowerOn_exit_;
-            }
-
-            mdelay(5);
-
-            //AF_VCC
-            if(TRUE != _hwPowerOn(CAMERA_POWER_VCAM_AF, VOL_2800,mode_name))
-            {
-                PK_DBG("[CAMERA SENSOR] Fail to enable analog power (VCAM_AF), power id = %d \n", CAMERA_POWER_VCAM_AF);
-                goto _kdCISModulePowerOn_exit_;
-            }
-
-
-            mdelay(2);
-
-
-            //PDN/STBY pin
-		if (GPIO_CAMERA_INVALID != pinSet[pinSetIdx][IDX_PS_CMRST])
-		{
-			if(mt_set_gpio_out(pinSet[pinSetIdx][IDX_PS_CMPDN],pinSet[pinSetIdx][IDX_PS_CMPDN+IDX_PS_ON])){PK_DBG("[CAMERA LENS] set gpio failed!! \n");}
-			mdelay(5);
-	
-			//RST pin
-			if(mt_set_gpio_out(pinSet[pinSetIdx][IDX_PS_CMRST],pinSet[pinSetIdx][IDX_PS_CMRST+IDX_PS_ON])){PK_DBG("[CAMERA SENSOR] set gpio failed!! \n");}
-			mdelay(5);
-		}
-		mdelay(50);
-
-	#if 1
-	        //disable inactive sensor
-	        //jeff modify for Q26 V1.1   
-	        //cause Main and Sub Cameras use the same RST pin.
-	        //so remove this part's CMRST.
-	       //disable sub
-	        if (GPIO_CAMERA_INVALID != pinSet[1][IDX_PS_CMRST]) {
-	  //          if(mt_set_gpio_mode(pinSet[1][IDX_PS_CMRST],pinSet[1][IDX_PS_CMRST+IDX_PS_MODE])){PK_DBG("[CAMERA SENSOR] set gpio mode failed!! \n");}
-	            if(mt_set_gpio_mode(pinSet[1][IDX_PS_CMPDN],pinSet[1][IDX_PS_CMPDN+IDX_PS_MODE])){PK_DBG("[CAMERA LENS] set gpio mode failed!! \n");}
-	  //          if(mt_set_gpio_dir(pinSet[1][IDX_PS_CMRST],GPIO_DIR_OUT)){PK_DBG("[CAMERA SENSOR] set gpio dir failed!! \n");}
-	            if(mt_set_gpio_dir(pinSet[1][IDX_PS_CMPDN],GPIO_DIR_OUT)){PK_DBG("[CAMERA LENS] set gpio dir failed!! \n");}
-	  //          if(mt_set_gpio_out(pinSet[1][IDX_PS_CMRST],pinSet[1][IDX_PS_CMRST+IDX_PS_OFF])){PK_DBG("[CAMERA SENSOR] set gpio failed!! \n");} //low == reset sensor
-	            if(mt_set_gpio_out(pinSet[1][IDX_PS_CMPDN],pinSet[1][IDX_PS_CMPDN+IDX_PS_OFF])){PK_DBG("[CAMERA LENS] set gpio failed!! \n");} //high == power down lens module
-	        }
-	#endif
-        }
-       else if (currSensorName && (0 == strcmp(SENSOR_DRVNAME_IMX219_MIPI_RAW, currSensorName)) && (pinSetIdx == 0))
-        {
-          //  mt_set_gpio_mode(GPIO_SPI_MOSI_PIN,GPIO_MODE_00);
-          //  mt_set_gpio_dir(GPIO_SPI_MOSI_PIN,GPIO_DIR_OUT);
-          //  mt_set_gpio_out(GPIO_SPI_MOSI_PIN,GPIO_OUT_ONE);
-            //First Power Pin low and Reset Pin Low
-            if (GPIO_CAMERA_INVALID != pinSet[pinSetIdx][IDX_PS_CMPDN]) {
-                if(mt_set_gpio_mode(pinSet[pinSetIdx][IDX_PS_CMPDN],pinSet[pinSetIdx][IDX_PS_CMPDN+IDX_PS_MODE])){PK_DBG("[CAMERA LENS] set gpio mode failed!! (CMPDN)\n");}
-                if(mt_set_gpio_dir(pinSet[pinSetIdx][IDX_PS_CMPDN],GPIO_DIR_OUT)){PK_DBG("[CAMERA LENS] set gpio dir failed!! (CMPDN)\n");}
-                if(mt_set_gpio_out(pinSet[pinSetIdx][IDX_PS_CMPDN],pinSet[pinSetIdx][IDX_PS_CMPDN+IDX_PS_OFF])){PK_DBG("[CAMERA LENS] set gpio failed!! (CMPDN)\n");}
-            }
-			mdelay(2);
-            if (GPIO_CAMERA_INVALID != pinSet[pinSetIdx][IDX_PS_CMRST]) {
-                if(mt_set_gpio_mode(pinSet[pinSetIdx][IDX_PS_CMRST],pinSet[pinSetIdx][IDX_PS_CMRST+IDX_PS_MODE])){PK_DBG("[CAMERA SENSOR] set gpio mode failed!! (CMRST)\n");}
-                if(mt_set_gpio_dir(pinSet[pinSetIdx][IDX_PS_CMRST],GPIO_DIR_OUT)){PK_DBG("[CAMERA SENSOR] set gpio dir failed!! (CMRST)\n");}
-                if(mt_set_gpio_out(pinSet[pinSetIdx][IDX_PS_CMRST],pinSet[pinSetIdx][IDX_PS_CMRST+IDX_PS_OFF])){PK_DBG("[CAMERA SENSOR] set gpio failed!! (CMRST)\n");}
-			mdelay(2);
-            }
-
-	   //VCAM_A
-            if(TRUE != _hwPowerOn(CAMERA_POWER_VCAM_A, VOL_2800,mode_name))
-            {
-                PK_DBG("[CAMERA SENSOR] Fail to enable analog power (VCAM_A), power id = %d\n", CAMERA_POWER_VCAM_A);
-                goto _kdCISModulePowerOn_exit_;
-            }
-
-            mdelay(2);
-            //VCAM_IO
-            if(TRUE != _hwPowerOn(CAMERA_POWER_VCAM_IO, VOL_1800, mode_name))
-            {
-                PK_DBG("[CAMERA SENSOR] Fail to enable digital power (VCAM_IO), power id = %d \n", CAMERA_POWER_VCAM_IO);
-                goto _kdCISModulePowerOn_exit_;
-            }
-
-            mdelay(2);
-
-            if(TRUE != _hwPowerOn(SUB_CAMERA_POWER_VCAM_D, VOL_1200,mode_name))
-            {
-                 PK_DBG("[CAMERA SENSOR] Fail to enable digital power (VCAM_D), power id = %d \n", SUB_CAMERA_POWER_VCAM_D);
-                 goto _kdCISModulePowerOn_exit_;
-            }
-
-            mdelay(5);
-
-            //AF_VCC
-            if(TRUE != _hwPowerOn(CAMERA_POWER_VCAM_AF, VOL_2800,mode_name))
-            {
-                PK_DBG("[CAMERA SENSOR] Fail to enable analog power (VCAM_AF), power id = %d \n", CAMERA_POWER_VCAM_AF);
-                goto _kdCISModulePowerOn_exit_;
-            }
-
-
-            mdelay(2);
-
-
-            //PDN/STBY pin
-		if (GPIO_CAMERA_INVALID != pinSet[pinSetIdx][IDX_PS_CMRST])
-		{
-			if(mt_set_gpio_out(pinSet[pinSetIdx][IDX_PS_CMPDN],pinSet[pinSetIdx][IDX_PS_CMPDN+IDX_PS_ON])){PK_DBG("[CAMERA LENS] set gpio failed!! \n");}
-			mdelay(5);
-	
-			//RST pin
-			if(mt_set_gpio_out(pinSet[pinSetIdx][IDX_PS_CMRST],pinSet[pinSetIdx][IDX_PS_CMRST+IDX_PS_ON])){PK_DBG("[CAMERA SENSOR] set gpio failed!! \n");}
-			mdelay(5);
-		}
-		mdelay(50);
-
-	#if 1
-	        //disable inactive sensor
-	        //jeff modify for Q26 V1.1   
-	        //cause Main and Sub Cameras use the same RST pin.
-	        //so remove this part's CMRST.
-	       //disable sub
-	        if (GPIO_CAMERA_INVALID != pinSet[1][IDX_PS_CMRST]) {
-	  //          if(mt_set_gpio_mode(pinSet[1][IDX_PS_CMRST],pinSet[1][IDX_PS_CMRST+IDX_PS_MODE])){PK_DBG("[CAMERA SENSOR] set gpio mode failed!! \n");}
-	            if(mt_set_gpio_mode(pinSet[1][IDX_PS_CMPDN],pinSet[1][IDX_PS_CMPDN+IDX_PS_MODE])){PK_DBG("[CAMERA LENS] set gpio mode failed!! \n");}
-	  //          if(mt_set_gpio_dir(pinSet[1][IDX_PS_CMRST],GPIO_DIR_OUT)){PK_DBG("[CAMERA SENSOR] set gpio dir failed!! \n");}
-	            if(mt_set_gpio_dir(pinSet[1][IDX_PS_CMPDN],GPIO_DIR_OUT)){PK_DBG("[CAMERA LENS] set gpio dir failed!! \n");}
-	  //          if(mt_set_gpio_out(pinSet[1][IDX_PS_CMRST],pinSet[1][IDX_PS_CMRST+IDX_PS_OFF])){PK_DBG("[CAMERA SENSOR] set gpio failed!! \n");} //low == reset sensor
-	            if(mt_set_gpio_out(pinSet[1][IDX_PS_CMPDN],pinSet[1][IDX_PS_CMPDN+IDX_PS_OFF])){PK_DBG("[CAMERA LENS] set gpio failed!! \n");} //high == power down lens module
-	        }
-	#endif
-        }
-     else if (currSensorName && (0 == strcmp(SENSOR_DRVNAME_OV2680_MIPI_RAW, currSensorName)) && (pinSetIdx == 1))
-        {
-          //  mt_set_gpio_mode(GPIO_SPI_MOSI_PIN,GPIO_MODE_00);
-          //  mt_set_gpio_dir(GPIO_SPI_MOSI_PIN,GPIO_DIR_OUT);
-          //  mt_set_gpio_out(GPIO_SPI_MOSI_PIN,GPIO_OUT_ONE);
-            //First Power Pin low and Reset Pin Low
-           if (GPIO_CAMERA_INVALID != pinSet[pinSetIdx][IDX_PS_CMRST]) {
-	            if(mt_set_gpio_mode(pinSet[pinSetIdx][IDX_PS_CMRST],pinSet[pinSetIdx][IDX_PS_CMRST+IDX_PS_MODE])){PK_DBG("[CAMERA SENSOR] set gpio mode failed!! \n");}
-	            if(mt_set_gpio_dir(pinSet[pinSetIdx][IDX_PS_CMRST],GPIO_DIR_OUT)){PK_DBG("[CAMERA SENSOR] set gpio dir failed!! \n");}
-	            if(mt_set_gpio_out(pinSet[pinSetIdx][IDX_PS_CMRST],pinSet[pinSetIdx][IDX_PS_CMRST+IDX_PS_OFF])){PK_DBG("[CAMERA SENSOR] set gpio failed!! \n");}
-	            mdelay(10);
-
-	            //PDN pin
-	            if(mt_set_gpio_mode(pinSet[pinSetIdx][IDX_PS_CMPDN],pinSet[pinSetIdx][IDX_PS_CMPDN+IDX_PS_MODE])){PK_DBG("[CAMERA LENS] set gpio mode failed!! \n");}
-	            if(mt_set_gpio_dir(pinSet[pinSetIdx][IDX_PS_CMPDN],GPIO_DIR_OUT)){PK_DBG("[CAMERA LENS] set gpio dir failed!! \n");}
-	            if(mt_set_gpio_out(pinSet[pinSetIdx][IDX_PS_CMPDN],pinSet[pinSetIdx][IDX_PS_CMPDN+IDX_PS_OFF])){PK_DBG("[CAMERA LENS] set gpio failed!! \n");}
-	        }
-	//VCAM_IO
-            if(TRUE != _hwPowerOn(CAMERA_POWER_VCAM_IO, VOL_1800, mode_name))
-            {
-                PK_DBG("[CAMERA SENSOR] Fail to enable digital power (VCAM_IO), power id = %d \n", CAMERA_POWER_VCAM_IO);
-                goto _kdCISModulePowerOn_exit_;
-            }
-
-            mdelay(10);
-	   //VCAM_A
-            if(TRUE != _hwPowerOn(CAMERA_POWER_VCAM_A, VOL_2800,mode_name))
-            {
-                PK_DBG("[CAMERA SENSOR] Fail to enable analog power (VCAM_A), power id = %d\n", CAMERA_POWER_VCAM_A);
-                goto _kdCISModulePowerOn_exit_;
-            }
-
-            mdelay(10);
-            
-
-            if(TRUE != _hwPowerOn(SUB_CAMERA_POWER_VCAM_D, VOL_1500,mode_name))
-            {
-                 PK_DBG("[CAMERA SENSOR] Fail to enable digital power (VCAM_D), power id = %d \n", SUB_CAMERA_POWER_VCAM_D);
-                 goto _kdCISModulePowerOn_exit_;
-            }
-
-            mdelay(10);
-
-            //AF_VCC
-            if(TRUE != _hwPowerOn(CAMERA_POWER_VCAM_AF, VOL_2800,mode_name))
-            {
-                PK_DBG("[CAMERA SENSOR] Fail to enable analog power (VCAM_AF), power id = %d \n", CAMERA_POWER_VCAM_AF);
-                goto _kdCISModulePowerOn_exit_;
-            }
-
-
-            mdelay(10);
-
-
-            #if 1
-	        //enable active sensor
-	        if (GPIO_CAMERA_INVALID != pinSet[pinSetIdx][IDX_PS_CMRST]) {
-	            //PDN pin
-	            if(mt_set_gpio_mode(pinSet[pinSetIdx][IDX_PS_CMPDN],pinSet[pinSetIdx][IDX_PS_CMPDN+IDX_PS_MODE])){PK_DBG("[CAMERA LENS] set gpio mode failed!! \n");}
-	            if(mt_set_gpio_dir(pinSet[pinSetIdx][IDX_PS_CMPDN],GPIO_DIR_OUT)){PK_DBG("[CAMERA LENS] set gpio dir failed!! \n");}
-	            if(mt_set_gpio_out(pinSet[pinSetIdx][IDX_PS_CMPDN],pinSet[pinSetIdx][IDX_PS_CMPDN+IDX_PS_ON])){PK_DBG("[CAMERA LENS] set gpio failed!! \n");}
-
-				
-	        //    if(mt_set_gpio_mode(pinSet[pinSetIdx][IDX_PS_CMRST],pinSet[pinSetIdx][IDX_PS_CMRST+IDX_PS_MODE])){PK_DBG("[CAMERA SENSOR] set gpio mode failed!! \n");}
-	        //    if(mt_set_gpio_dir(pinSet[pinSetIdx][IDX_PS_CMRST],GPIO_DIR_OUT)){PK_DBG("[CAMERA SENSOR] set gpio dir failed!! \n");}
-	        //    if(mt_set_gpio_out(pinSet[pinSetIdx][IDX_PS_CMRST],pinSet[pinSetIdx][IDX_PS_CMRST+IDX_PS_ON])){PK_DBG("[CAMERA SENSOR] set gpio failed!! \n");}
-	        //    mdelay(1);
-
-	        }
-#endif
-	#if 1
-	        //disable inactive sensor
-	        //jeff modify for Q26 V1.1   
-	        //cause Main and Sub Cameras use the same RST pin.
-	        //so remove this part's CMRST.
-	        if (GPIO_CAMERA_INVALID != pinSet[0][IDX_PS_CMRST]) {
-	  //          if(mt_set_gpio_mode(pinSet[0][IDX_PS_CMRST],pinSet[0][IDX_PS_CMRST+IDX_PS_MODE])){PK_DBG("[CAMERA SENSOR] set gpio mode failed!! \n");}
-	            if(mt_set_gpio_mode(pinSet[0][IDX_PS_CMPDN],pinSet[0][IDX_PS_CMPDN+IDX_PS_MODE])){PK_DBG("[CAMERA LENS] set gpio mode failed!! \n");}
-	  //          if(mt_set_gpio_dir(pinSet[0][IDX_PS_CMRST],GPIO_DIR_OUT)){PK_DBG("[CAMERA SENSOR] set gpio dir failed!! \n");}
-	            if(mt_set_gpio_dir(pinSet[0][IDX_PS_CMPDN],GPIO_DIR_OUT)){PK_DBG("[CAMERA LENS] set gpio dir failed!! \n");}
-	  //          if(mt_set_gpio_out(pinSet[0][IDX_PS_CMRST],pinSet[0][IDX_PS_CMRST+IDX_PS_OFF])){PK_DBG("[CAMERA SENSOR] set gpio failed!! \n");} //low == reset sensor
-	            if(mt_set_gpio_out(pinSet[0][IDX_PS_CMPDN],pinSet[0][IDX_PS_CMPDN+IDX_PS_OFF])){PK_DBG("[CAMERA LENS] set gpio failed!! \n");} //high == power down lens module
-	        }
-	#endif
-        }
-///////////////////////////////////////////
-
-        else  if (currSensorName && (0 == strcmp(SENSOR_DRVNAME_GC2355_MIPI_RAW, currSensorName)))
-        {
-           // mt_set_gpio_mode(GPIO_SPI_MOSI_PIN,GPIO_MODE_00);
-          //  mt_set_gpio_dir(GPIO_SPI_MOSI_PIN,GPIO_DIR_OUT);
-           // mt_set_gpio_out(GPIO_SPI_MOSI_PIN,GPIO_OUT_ONE);
-            //First Power Pin low and Reset Pin Low
-            if (GPIO_CAMERA_INVALID != pinSet[pinSetIdx][IDX_PS_CMPDN]) {
-                if(mt_set_gpio_mode(pinSet[pinSetIdx][IDX_PS_CMPDN],pinSet[pinSetIdx][IDX_PS_CMPDN+IDX_PS_MODE])){PK_DBG("[CAMERA LENS] set gpio mode failed!! (CMPDN)\n");}
-                if(mt_set_gpio_dir(pinSet[pinSetIdx][IDX_PS_CMPDN],GPIO_DIR_OUT)){PK_DBG("[CAMERA LENS] set gpio dir failed!! (CMPDN)\n");}
-                if(mt_set_gpio_out(pinSet[pinSetIdx][IDX_PS_CMPDN],pinSet[pinSetIdx][IDX_PS_CMPDN+IDX_PS_OFF])){PK_DBG("[CAMERA LENS] set gpio failed!! (CMPDN)\n");}
-            }
-
-            if (GPIO_CAMERA_INVALID != pinSet[pinSetIdx][IDX_PS_CMRST]) {
-                if(mt_set_gpio_mode(pinSet[pinSetIdx][IDX_PS_CMRST],pinSet[pinSetIdx][IDX_PS_CMRST+IDX_PS_MODE])){PK_DBG("[CAMERA SENSOR] set gpio mode failed!! (CMRST)\n");}
-                if(mt_set_gpio_dir(pinSet[pinSetIdx][IDX_PS_CMRST],GPIO_DIR_OUT)){PK_DBG("[CAMERA SENSOR] set gpio dir failed!! (CMRST)\n");}
-                if(mt_set_gpio_out(pinSet[pinSetIdx][IDX_PS_CMRST],pinSet[pinSetIdx][IDX_PS_CMRST+IDX_PS_OFF])){PK_DBG("[CAMERA SENSOR] set gpio failed!! (CMRST)\n");}
-            }
-
-            mdelay(50);
-
-            //VCAM_A
-            if(TRUE != _hwPowerOn(CAMERA_POWER_VCAM_A, VOL_2800,mode_name))
-            {
-                PK_DBG("[CAMERA SENSOR] Fail to enable analog power (VCAM_A), power id = %d\n", CAMERA_POWER_VCAM_A);
-                goto _kdCISModulePowerOn_exit_;
-            }
-
-            mdelay(10);
-
-            //VCAM_IO
-            if(TRUE != _hwPowerOn(CAMERA_POWER_VCAM_IO, VOL_1800, mode_name))
-            {
-                PK_DBG("[CAMERA SENSOR] Fail to enable digital power (VCAM_IO), power id = %d \n", CAMERA_POWER_VCAM_IO);
-                goto _kdCISModulePowerOn_exit_;
-            }
-
-            mdelay(10);
-
-            if(TRUE != _hwPowerOn(SUB_CAMERA_POWER_VCAM_D, VOL_1500,mode_name))
-            {
-                 PK_DBG("[CAMERA SENSOR] Fail to enable digital power (VCAM_D), power id = %d \n", SUB_CAMERA_POWER_VCAM_D);
-                 goto _kdCISModulePowerOn_exit_;
-            }
-
-            mdelay(10);
-
-            //AF_VCC
-            if(TRUE != _hwPowerOn(CAMERA_POWER_VCAM_AF, VOL_2800,mode_name))
-            {
-                PK_DBG("[CAMERA SENSOR] Fail to enable analog power (VCAM_AF), power id = %d \n", CAMERA_POWER_VCAM_AF);
-                goto _kdCISModulePowerOn_exit_;
-            }
-
-
-            mdelay(50);
-
-            if (GPIO_CAMERA_INVALID != pinSet[pinSetIdx][IDX_PS_CMRST]) {
-                if(mt_set_gpio_mode(pinSet[pinSetIdx][IDX_PS_CMRST],pinSet[pinSetIdx][IDX_PS_CMRST+IDX_PS_MODE])){PK_DBG("[CAMERA SENSOR] set gpio mode failed!! (CMRST)\n");}
-                if(mt_set_gpio_dir(pinSet[pinSetIdx][IDX_PS_CMRST],GPIO_DIR_OUT)){PK_DBG("[CAMERA SENSOR] set gpio dir failed!! (CMRST)\n");}
-                if(mt_set_gpio_out(pinSet[pinSetIdx][IDX_PS_CMRST],pinSet[pinSetIdx][IDX_PS_CMRST+IDX_PS_OFF])){PK_DBG("[CAMERA SENSOR] set gpio failed!! (CMRST)\n");}
-                mdelay(5);
-                if(mt_set_gpio_out(pinSet[pinSetIdx][IDX_PS_CMRST],pinSet[pinSetIdx][IDX_PS_CMRST+IDX_PS_ON])){PK_DBG("[CAMERA SENSOR] set gpio failed!! (CMRST)\n");}
-
-            }
-            mdelay(5);
-            //enable active sensor
-            if (GPIO_CAMERA_INVALID != pinSet[pinSetIdx][IDX_PS_CMPDN]) {
-                if(mt_set_gpio_mode(pinSet[pinSetIdx][IDX_PS_CMPDN],pinSet[pinSetIdx][IDX_PS_CMPDN+IDX_PS_MODE])){PK_DBG("[CAMERA LENS] set gpio mode failed!! (CMPDN)\n");}
-                if(mt_set_gpio_dir(pinSet[pinSetIdx][IDX_PS_CMPDN],GPIO_DIR_OUT)){PK_DBG("[CAMERA LENS] set gpio dir failed!! (CMPDN)\n");}
-                if(mt_set_gpio_out(pinSet[pinSetIdx][IDX_PS_CMPDN],pinSet[pinSetIdx][IDX_PS_CMPDN+IDX_PS_ON])){PK_DBG("[CAMERA LENS] set gpio failed!! (CMPDN)\n");}
-                mdelay(5);
-                if(mt_set_gpio_out(pinSet[pinSetIdx][IDX_PS_CMPDN],pinSet[pinSetIdx][IDX_PS_CMPDN+IDX_PS_OFF])){PK_DBG("[CAMERA LENS] set gpio failed!! (CMPDN)\n");}
-            }
-
-            mdelay(5);
-        }
-        else
-        {
-            //First Power Pin low and Reset Pin Low
-            if (GPIO_CAMERA_INVALID != pinSet[pinSetIdx][IDX_PS_CMPDN]) {
-                if(mt_set_gpio_mode(pinSet[pinSetIdx][IDX_PS_CMPDN],pinSet[pinSetIdx][IDX_PS_CMPDN+IDX_PS_MODE])){PK_DBG("[CAMERA LENS] set gpio mode failed!! (CMPDN)\n");}
-                if(mt_set_gpio_dir(pinSet[pinSetIdx][IDX_PS_CMPDN],GPIO_DIR_OUT)){PK_DBG("[CAMERA LENS] set gpio dir failed!! (CMPDN)\n");}
-                if(mt_set_gpio_out(pinSet[pinSetIdx][IDX_PS_CMPDN],pinSet[pinSetIdx][IDX_PS_CMPDN+IDX_PS_OFF])){PK_DBG("[CAMERA LENS] set gpio failed!! (CMPDN)\n");}
-            }
-
-            if (GPIO_CAMERA_INVALID != pinSet[pinSetIdx][IDX_PS_CMRST]) {
-                if(mt_set_gpio_mode(pinSet[pinSetIdx][IDX_PS_CMRST],pinSet[pinSetIdx][IDX_PS_CMRST+IDX_PS_MODE])){PK_DBG("[CAMERA SENSOR] set gpio mode failed!! (CMRST)\n");}
-                if(mt_set_gpio_dir(pinSet[pinSetIdx][IDX_PS_CMRST],GPIO_DIR_OUT)){PK_DBG("[CAMERA SENSOR] set gpio dir failed!! (CMRST)\n");}
-                if(mt_set_gpio_out(pinSet[pinSetIdx][IDX_PS_CMRST],pinSet[pinSetIdx][IDX_PS_CMRST+IDX_PS_OFF])){PK_DBG("[CAMERA SENSOR] set gpio failed!! (CMRST)\n");}
-            }
-
-            //VCAM_IO
-            if(TRUE != _hwPowerOn(CAMERA_POWER_VCAM_IO, VOL_1800, mode_name))
-            {
-                PK_DBG("[CAMERA SENSOR] Fail to enable digital power (VCAM_IO), power id = %d \n", CAMERA_POWER_VCAM_IO);
-                goto _kdCISModulePowerOn_exit_;
-            }
-
-            //VCAM_A
-            if(TRUE != _hwPowerOn(CAMERA_POWER_VCAM_A, VOL_2800,mode_name))
-            {
-                PK_DBG("[CAMERA SENSOR] Fail to enable analog power (VCAM_A), power id = %d\n", CAMERA_POWER_VCAM_A);
-                goto _kdCISModulePowerOn_exit_;
-            }
-            //VCAM_D
-            if(currSensorName && (0 == strcmp(SENSOR_DRVNAME_S5K2P8_MIPI_RAW, currSensorName)))
-            {
-                if(TRUE != _hwPowerOn(CAMERA_POWER_VCAM_D, VOL_1200,mode_name))
-                {
-                     PK_DBG("[CAMERA SENSOR] Fail to enable digital power\n");
-                     goto _kdCISModulePowerOn_exit_;
-                }
-            }
-            else if(currSensorName && (0 == strcmp(SENSOR_DRVNAME_IMX219_MIPI_RAW, currSensorName)))
-            {
-                if(pinSetIdx == 0 && TRUE != _hwPowerOn(CAMERA_POWER_VCAM_D, VOL_1200,mode_name))
-                {
-                     PK_DBG("[CAMERA SENSOR] Fail to enable digital power\n");
-                     goto _kdCISModulePowerOn_exit_;
-                }
-            }
-            else { // Main VCAMD max 1.5V
-                if(TRUE != _hwPowerOn(CAMERA_POWER_VCAM_D, VOL_1500,mode_name))
-                {
-                     PK_DBG("[CAMERA SENSOR] Fail to enable digital power\n");
-                     goto _kdCISModulePowerOn_exit_;
-                }
-
-            }
-
-
-             //AF_VCC
-            if(TRUE != _hwPowerOn(CAMERA_POWER_VCAM_AF, VOL_2800,mode_name))
-            {
-                PK_DBG("[CAMERA SENSOR] Fail to enable analog power (VCAM_AF), power id = %d \n", CAMERA_POWER_VCAM_AF);
-                goto _kdCISModulePowerOn_exit_;
-            }
-
-            mdelay(5);
-
-            //enable active sensor
-            if (GPIO_CAMERA_INVALID != pinSet[pinSetIdx][IDX_PS_CMPDN]) {
-                if(mt_set_gpio_mode(pinSet[pinSetIdx][IDX_PS_CMPDN],pinSet[pinSetIdx][IDX_PS_CMPDN+IDX_PS_MODE])){PK_DBG("[CAMERA LENS] set gpio mode failed!! (CMPDN)\n");}
-                if(mt_set_gpio_dir(pinSet[pinSetIdx][IDX_PS_CMPDN],GPIO_DIR_OUT)){PK_DBG("[CAMERA LENS] set gpio dir failed!! (CMPDN)\n");}
-                if(mt_set_gpio_out(pinSet[pinSetIdx][IDX_PS_CMPDN],pinSet[pinSetIdx][IDX_PS_CMPDN+IDX_PS_ON])){PK_DBG("[CAMERA LENS] set gpio failed!! (CMPDN)\n");}
-            }
-
-            mdelay(1);
-
-            if (GPIO_CAMERA_INVALID != pinSet[pinSetIdx][IDX_PS_CMRST]) {
-                if(mt_set_gpio_mode(pinSet[pinSetIdx][IDX_PS_CMRST],pinSet[pinSetIdx][IDX_PS_CMRST+IDX_PS_MODE])){PK_DBG("[CAMERA SENSOR] set gpio mode failed!! (CMRST)\n");}
-                if(mt_set_gpio_dir(pinSet[pinSetIdx][IDX_PS_CMRST],GPIO_DIR_OUT)){PK_DBG("[CAMERA SENSOR] set gpio dir failed!! (CMRST)\n");}
-                if(mt_set_gpio_out(pinSet[pinSetIdx][IDX_PS_CMRST],pinSet[pinSetIdx][IDX_PS_CMRST+IDX_PS_ON])){PK_DBG("[CAMERA SENSOR] set gpio failed!! (CMRST)\n");}
-            }
-        }
-    }
-    else {//power OFF
-
-        PK_DBG("[PowerOFF]pinSetIdx:%d\n", pinSetIdx);
-            ISP_MCLK1_EN(0);
-
-        if ((currSensorName && (0 == strcmp(currSensorName,"imx135mipiraw")))||
-            (currSensorName && (0 == strcmp(currSensorName,"imx220mipiraw"))))
-
-        {
-            //Set Power Pin low and Reset Pin Low
-            if (GPIO_CAMERA_INVALID != pinSet[pinSetIdx][IDX_PS_CMPDN]) {
-                if(mt_set_gpio_mode(pinSet[pinSetIdx][IDX_PS_CMPDN],pinSet[pinSetIdx][IDX_PS_CMPDN+IDX_PS_MODE])){PK_DBG("[CAMERA LENS] set gpio mode failed!! (CMPDN)\n");}
-                if(mt_set_gpio_dir(pinSet[pinSetIdx][IDX_PS_CMPDN],GPIO_DIR_OUT)){PK_DBG("[CAMERA LENS] set gpio dir failed!! (CMPDN)\n");}
-                if(mt_set_gpio_out(pinSet[pinSetIdx][IDX_PS_CMPDN],pinSet[pinSetIdx][IDX_PS_CMPDN+IDX_PS_OFF])){PK_DBG("[CAMERA LENS] set gpio failed!! (CMPDN)\n");}
-            }
-
-            //Set Reset Pin Low
-             if (GPIO_CAMERA_INVALID != pinSet[pinSetIdx][IDX_PS_CMRST]) {
-                if(mt_set_gpio_mode(pinSet[pinSetIdx][IDX_PS_CMRST],pinSet[pinSetIdx][IDX_PS_CMRST+IDX_PS_MODE])){PK_DBG("[CAMERA SENSOR] set gpio mode failed!! (CMRST)\n");}
-                if(mt_set_gpio_dir(pinSet[pinSetIdx][IDX_PS_CMRST],GPIO_DIR_OUT)){PK_DBG("[CAMERA SENSOR] set gpio dir failed!! (CMRST)\n");}
-                if(mt_set_gpio_out(pinSet[pinSetIdx][IDX_PS_CMRST],pinSet[pinSetIdx][IDX_PS_CMRST+IDX_PS_OFF])){PK_DBG("[CAMERA SENSOR] set gpio failed!! (CMRST)\n");}
-            }
-
-            //AF_VCC
-            if(TRUE != _hwPowerDown(CAMERA_POWER_VCAM_AF,mode_name))
-            {
-                PK_DBG("[CAMERA SENSOR] Fail to OFF AF power (VCAM_AF), power id = %d \n", CAMERA_POWER_VCAM_AF);
-                //return -EIO;
-                goto _kdCISModulePowerOn_exit_;
-            }
-
-            //VCAM_IO
-            if(TRUE != _hwPowerDown(CAMERA_POWER_VCAM_IO, mode_name)) {
-                PK_DBG("[CAMERA SENSOR] Fail to OFF digital power (VCAM_IO), power id = %d \n", CAMERA_POWER_VCAM_IO);
-                //return -EIO;
-                goto _kdCISModulePowerOn_exit_;
-            }
-
-            if(TRUE != _hwPowerDown(CAMERA_POWER_VCAM_D,mode_name))
-            {
-                 PK_DBG("[CAMERA SENSOR] Fail to OFF core power (VCAM_D), power id = %d \n",CAMERA_POWER_VCAM_D);
-                 goto _kdCISModulePowerOn_exit_;
-            }
-
-            //VCAM_A
-            if(TRUE != _hwPowerDown(CAMERA_POWER_VCAM_A,mode_name)) {
-                PK_DBG("[CAMERA SENSOR] Fail to OFF analog power (VCAM_A), power id= (%d) \n", CAMERA_POWER_VCAM_A);
-                //return -EIO;
-                goto _kdCISModulePowerOn_exit_;
-            }
-
-        }
-        else if (currSensorName && (0 == strcmp(SENSOR_DRVNAME_OV5648_MIPI_RAW, currSensorName)) && (pinSetIdx == 0))
-        {
-             //PK_DBG("[OFF]sensorIdx:%d \n",SensorIdx);
-	        printk("[CAMERA SENSOR] jeff imx219 poweroff.\n"); //jeff add 
-	        if (GPIO_CAMERA_INVALID != pinSet[pinSetIdx][IDX_PS_CMRST]) {
-	        //    if(mt_set_gpio_mode(pinSet[pinSetIdx][IDX_PS_CMRST],pinSet[pinSetIdx][IDX_PS_CMRST+IDX_PS_MODE])){PK_DBG("[CAMERA SENSOR] set gpio mode failed!! \n");}
-	            if(mt_set_gpio_mode(pinSet[pinSetIdx][IDX_PS_CMPDN],pinSet[pinSetIdx][IDX_PS_CMPDN+IDX_PS_MODE])){PK_DBG("[CAMERA LENS] set gpio mode failed!! \n");}
-	       //     if(mt_set_gpio_dir(pinSet[pinSetIdx][IDX_PS_CMRST],GPIO_DIR_OUT)){PK_DBG("[CAMERA SENSOR] set gpio dir failed!! \n");}
-	            if(mt_set_gpio_dir(pinSet[pinSetIdx][IDX_PS_CMPDN],GPIO_DIR_OUT)){PK_DBG("[CAMERA LENS] set gpio dir failed!! \n");}
-	    	    if(mt_set_gpio_out(pinSet[pinSetIdx][IDX_PS_CMPDN],pinSet[pinSetIdx][IDX_PS_CMPDN+IDX_PS_OFF])){PK_DBG("[CAMERA LENS] set gpio failed!! \n");} //high == power down lens module
-	       //     if(mt_set_gpio_out(pinSet[pinSetIdx][IDX_PS_CMRST],pinSet[pinSetIdx][IDX_PS_CMRST+IDX_PS_OFF])){PK_DBG("[CAMERA SENSOR] set gpio failed!! \n");} //low == reset sensor
-		}
-
-            if(TRUE != _hwPowerDown(SUB_CAMERA_POWER_VCAM_D,mode_name))
-            {
-                 PK_DBG("[CAMERA SENSOR] Fail to OFF core power (VCAM_D), power id = %d \n",SUB_CAMERA_POWER_VCAM_D);
-                 goto _kdCISModulePowerOn_exit_;
-            }
-
-            //VCAM_A
-            if(TRUE != _hwPowerDown(CAMERA_POWER_VCAM_A,mode_name)) {
-                PK_DBG("[CAMERA SENSOR] Fail to OFF analog power (VCAM_A), power id= (%d) \n", CAMERA_POWER_VCAM_A);
-                //return -EIO;
-                goto _kdCISModulePowerOn_exit_;
-            }
-
-            //VCAM_IO
-            if(TRUE != _hwPowerDown(CAMERA_POWER_VCAM_IO, mode_name)) {
-                PK_DBG("[CAMERA SENSOR] Fail to OFF digital power (VCAM_IO), power id = %d \n", CAMERA_POWER_VCAM_IO);
-                //return -EIO;
-                goto _kdCISModulePowerOn_exit_;
-            }
-
-            //AF_VCC
-            if(TRUE != _hwPowerDown(CAMERA_POWER_VCAM_AF,mode_name))
-            {
-                PK_DBG("[CAMERA SENSOR] Fail to OFF AF power (VCAM_AF), power id = %d \n", CAMERA_POWER_VCAM_AF);
-                //return -EIO;
-                goto _kdCISModulePowerOn_exit_;
-            }
-
-        }
-//////////////////
-	else if (currSensorName && (0 == strcmp(SENSOR_DRVNAME_OV2680_MIPI_RAW, currSensorName)) && (pinSetIdx == 1))
-        {
-          //  mt_set_gpio_out(GPIO_SPI_MOSI_PIN,GPIO_OUT_ZERO);
-            //Set Power Pin low and Reset Pin Low
-            if (GPIO_CAMERA_INVALID != pinSet[pinSetIdx][IDX_PS_CMRST]) {
-	        //    if(mt_set_gpio_mode(pinSet[pinSetIdx][IDX_PS_CMRST],pinSet[pinSetIdx][IDX_PS_CMRST+IDX_PS_MODE])){PK_DBG("[CAMERA SENSOR] set gpio mode failed!! \n");}
-	            if(mt_set_gpio_mode(pinSet[pinSetIdx][IDX_PS_CMPDN],pinSet[pinSetIdx][IDX_PS_CMPDN+IDX_PS_MODE])){PK_DBG("[CAMERA LENS] set gpio mode failed!! \n");}
-	       //     if(mt_set_gpio_dir(pinSet[pinSetIdx][IDX_PS_CMRST],GPIO_DIR_OUT)){PK_DBG("[CAMERA SENSOR] set gpio dir failed!! \n");}
-	            if(mt_set_gpio_dir(pinSet[pinSetIdx][IDX_PS_CMPDN],GPIO_DIR_OUT)){PK_DBG("[CAMERA LENS] set gpio dir failed!! \n");}
-	    	    if(mt_set_gpio_out(pinSet[pinSetIdx][IDX_PS_CMPDN],pinSet[pinSetIdx][IDX_PS_CMPDN+IDX_PS_OFF])){PK_DBG("[CAMERA LENS] set gpio failed!! \n");} //high == power down lens module
-	       //     if(mt_set_gpio_out(pinSet[pinSetIdx][IDX_PS_CMRST],pinSet[pinSetIdx][IDX_PS_CMRST+IDX_PS_OFF])){PK_DBG("[CAMERA SENSOR] set gpio failed!! \n");} //low == reset sensor
-		}
-
-            if(TRUE != _hwPowerDown(SUB_CAMERA_POWER_VCAM_D,mode_name))
-            {
-                 PK_DBG("[CAMERA SENSOR] Fail to OFF core power (VCAM_D), power id = %d \n",SUB_CAMERA_POWER_VCAM_D);
-                 goto _kdCISModulePowerOn_exit_;
-            }
-
-            //VCAM_A
-            if(TRUE != _hwPowerDown(CAMERA_POWER_VCAM_A,mode_name)) {
-                PK_DBG("[CAMERA SENSOR] Fail to OFF analog power (VCAM_A), power id= (%d) \n", CAMERA_POWER_VCAM_A);
-                //return -EIO;
-                goto _kdCISModulePowerOn_exit_;
-            }
-
-            //VCAM_IO
-            if(TRUE != _hwPowerDown(CAMERA_POWER_VCAM_IO, mode_name)) {
-                PK_DBG("[CAMERA SENSOR] Fail to OFF digital power (VCAM_IO), power id = %d \n", CAMERA_POWER_VCAM_IO);
-                //return -EIO;
-                goto _kdCISModulePowerOn_exit_;
-            }
-
-            //AF_VCC
-            if(TRUE != _hwPowerDown(CAMERA_POWER_VCAM_AF,mode_name))
-            {
-                PK_DBG("[CAMERA SENSOR] Fail to OFF AF power (VCAM_AF), power id = %d \n", CAMERA_POWER_VCAM_AF);
-                //return -EIO;
-                goto _kdCISModulePowerOn_exit_;
-            }
-
-        }
-	 else if (currSensorName && (0 == strcmp(SENSOR_DRVNAME_IMX219_MIPI_RAW, currSensorName)) && (pinSetIdx == 0))
-        {
-          //  mt_set_gpio_out(GPIO_SPI_MOSI_PIN,GPIO_OUT_ZERO);
-            //Set Power Pin low and Reset Pin Low
-            if (GPIO_CAMERA_INVALID != pinSet[pinSetIdx][IDX_PS_CMRST]) {
-	        //    if(mt_set_gpio_mode(pinSet[pinSetIdx][IDX_PS_CMRST],pinSet[pinSetIdx][IDX_PS_CMRST+IDX_PS_MODE])){PK_DBG("[CAMERA SENSOR] set gpio mode failed!! \n");}
-	            if(mt_set_gpio_mode(pinSet[pinSetIdx][IDX_PS_CMPDN],pinSet[pinSetIdx][IDX_PS_CMPDN+IDX_PS_MODE])){PK_DBG("[CAMERA LENS] set gpio mode failed!! \n");}
-	       //     if(mt_set_gpio_dir(pinSet[pinSetIdx][IDX_PS_CMRST],GPIO_DIR_OUT)){PK_DBG("[CAMERA SENSOR] set gpio dir failed!! \n");}
-	            if(mt_set_gpio_dir(pinSet[pinSetIdx][IDX_PS_CMPDN],GPIO_DIR_OUT)){PK_DBG("[CAMERA LENS] set gpio dir failed!! \n");}
-	    	    if(mt_set_gpio_out(pinSet[pinSetIdx][IDX_PS_CMPDN],pinSet[pinSetIdx][IDX_PS_CMPDN+IDX_PS_OFF])){PK_DBG("[CAMERA LENS] set gpio failed!! \n");} //high == power down lens module
-	       //     if(mt_set_gpio_out(pinSet[pinSetIdx][IDX_PS_CMRST],pinSet[pinSetIdx][IDX_PS_CMRST+IDX_PS_OFF])){PK_DBG("[CAMERA SENSOR] set gpio failed!! \n");} //low == reset sensor
-		}
-
-            if(TRUE != _hwPowerDown(SUB_CAMERA_POWER_VCAM_D,mode_name))
-            {
-                 PK_DBG("[CAMERA SENSOR] Fail to OFF core power (VCAM_D), power id = %d \n",SUB_CAMERA_POWER_VCAM_D);
-                 goto _kdCISModulePowerOn_exit_;
-            }
-
-            //VCAM_A
-            if(TRUE != _hwPowerDown(CAMERA_POWER_VCAM_A,mode_name)) {
-                PK_DBG("[CAMERA SENSOR] Fail to OFF analog power (VCAM_A), power id= (%d) \n", CAMERA_POWER_VCAM_A);
-                //return -EIO;
-                goto _kdCISModulePowerOn_exit_;
-            }
-
-            //VCAM_IO
-            if(TRUE != _hwPowerDown(CAMERA_POWER_VCAM_IO, mode_name)) {
-                PK_DBG("[CAMERA SENSOR] Fail to OFF digital power (VCAM_IO), power id = %d \n", CAMERA_POWER_VCAM_IO);
-                //return -EIO;
-                goto _kdCISModulePowerOn_exit_;
-            }
-
-            //AF_VCC
-            if(TRUE != _hwPowerDown(CAMERA_POWER_VCAM_AF,mode_name))
-            {
-                PK_DBG("[CAMERA SENSOR] Fail to OFF AF power (VCAM_AF), power id = %d \n", CAMERA_POWER_VCAM_AF);
-                //return -EIO;
-                goto _kdCISModulePowerOn_exit_;
-            }
-
-        }
-        else if (currSensorName && (0 == strcmp(SENSOR_DRVNAME_OV8858_MIPI_RAW, currSensorName)) && (pinSetIdx == 0))
-        {
-          //  mt_set_gpio_out(GPIO_SPI_MOSI_PIN,GPIO_OUT_ZERO);
-            //Set Power Pin low and Reset Pin Low
-            if (GPIO_CAMERA_INVALID != pinSet[pinSetIdx][IDX_PS_CMRST]) {
-	        //    if(mt_set_gpio_mode(pinSet[pinSetIdx][IDX_PS_CMRST],pinSet[pinSetIdx][IDX_PS_CMRST+IDX_PS_MODE])){PK_DBG("[CAMERA SENSOR] set gpio mode failed!! \n");}
-	            if(mt_set_gpio_mode(pinSet[pinSetIdx][IDX_PS_CMPDN],pinSet[pinSetIdx][IDX_PS_CMPDN+IDX_PS_MODE])){PK_DBG("[CAMERA LENS] set gpio mode failed!! \n");}
-	       //     if(mt_set_gpio_dir(pinSet[pinSetIdx][IDX_PS_CMRST],GPIO_DIR_OUT)){PK_DBG("[CAMERA SENSOR] set gpio dir failed!! \n");}
-	            if(mt_set_gpio_dir(pinSet[pinSetIdx][IDX_PS_CMPDN],GPIO_DIR_OUT)){PK_DBG("[CAMERA LENS] set gpio dir failed!! \n");}
-	    	    if(mt_set_gpio_out(pinSet[pinSetIdx][IDX_PS_CMPDN],pinSet[pinSetIdx][IDX_PS_CMPDN+IDX_PS_OFF])){PK_DBG("[CAMERA LENS] set gpio failed!! \n");} //high == power down lens module
-	       //     if(mt_set_gpio_out(pinSet[pinSetIdx][IDX_PS_CMRST],pinSet[pinSetIdx][IDX_PS_CMRST+IDX_PS_OFF])){PK_DBG("[CAMERA SENSOR] set gpio failed!! \n");} //low == reset sensor
-		}
-
-            if(TRUE != _hwPowerDown(SUB_CAMERA_POWER_VCAM_D,mode_name))
-            {
-                 PK_DBG("[CAMERA SENSOR] Fail to OFF core power (VCAM_D), power id = %d \n",SUB_CAMERA_POWER_VCAM_D);
-                 goto _kdCISModulePowerOn_exit_;
-            }
-
-            //VCAM_A
-            if(TRUE != _hwPowerDown(CAMERA_POWER_VCAM_A,mode_name)) {
-                PK_DBG("[CAMERA SENSOR] Fail to OFF analog power (VCAM_A), power id= (%d) \n", CAMERA_POWER_VCAM_A);
-                //return -EIO;
-                goto _kdCISModulePowerOn_exit_;
-            }
-
-            //VCAM_IO
-            if(TRUE != _hwPowerDown(CAMERA_POWER_VCAM_IO, mode_name)) {
-                PK_DBG("[CAMERA SENSOR] Fail to OFF digital power (VCAM_IO), power id = %d \n", CAMERA_POWER_VCAM_IO);
-                //return -EIO;
-                goto _kdCISModulePowerOn_exit_;
-            }
-
-            //AF_VCC
-            if(TRUE != _hwPowerDown(CAMERA_POWER_VCAM_AF,mode_name))
-            {
-                PK_DBG("[CAMERA SENSOR] Fail to OFF AF power (VCAM_AF), power id = %d \n", CAMERA_POWER_VCAM_AF);
-                //return -EIO;
-                goto _kdCISModulePowerOn_exit_;
-            }
-
-        }
-//////////////////
-        else if (currSensorName && (0 == strcmp(SENSOR_DRVNAME_GC2355_MIPI_RAW, currSensorName)))
-        {
-           // mt_set_gpio_out(GPIO_SPI_MOSI_PIN,GPIO_OUT_ZERO);
-            //Set Power Pin low and Reset Pin Low
-            if (GPIO_CAMERA_INVALID != pinSet[pinSetIdx][IDX_PS_CMPDN]) {
-                if(mt_set_gpio_mode(pinSet[pinSetIdx][IDX_PS_CMPDN],pinSet[pinSetIdx][IDX_PS_CMPDN+IDX_PS_MODE])){PK_DBG("[CAMERA LENS] set gpio mode failed!! (CMPDN)\n");}
-                if(mt_set_gpio_dir(pinSet[pinSetIdx][IDX_PS_CMPDN],GPIO_DIR_OUT)){PK_DBG("[CAMERA LENS] set gpio dir failed!! (CMPDN)\n");}
-                if(mt_set_gpio_out(pinSet[pinSetIdx][IDX_PS_CMPDN],pinSet[pinSetIdx][IDX_PS_CMPDN+IDX_PS_ON])){PK_DBG("[CAMERA LENS] set gpio failed!! (CMPDN)\n");}
-            }
-
-            if (GPIO_CAMERA_INVALID != pinSet[pinSetIdx][IDX_PS_CMRST]) {
-                if(mt_set_gpio_mode(pinSet[pinSetIdx][IDX_PS_CMRST],pinSet[pinSetIdx][IDX_PS_CMRST+IDX_PS_MODE])){PK_DBG("[CAMERA SENSOR] set gpio mode failed!! (CMRST)\n");}
-                if(mt_set_gpio_dir(pinSet[pinSetIdx][IDX_PS_CMRST],GPIO_DIR_OUT)){PK_DBG("[CAMERA SENSOR] set gpio dir failed!! (CMRST)\n");}
-                if(mt_set_gpio_out(pinSet[pinSetIdx][IDX_PS_CMRST],pinSet[pinSetIdx][IDX_PS_CMRST+IDX_PS_OFF])){PK_DBG("[CAMERA SENSOR] set gpio failed!! (CMRST)\n");}
-            }
-
-
-            if(TRUE != _hwPowerDown(SUB_CAMERA_POWER_VCAM_D,mode_name))
-            {
-                 PK_DBG("[CAMERA SENSOR] Fail to OFF core power (VCAM_D), power id = %d \n",SUB_CAMERA_POWER_VCAM_D);
-                 goto _kdCISModulePowerOn_exit_;
-            }
-
-            //VCAM_A
-            if(TRUE != _hwPowerDown(CAMERA_POWER_VCAM_A,mode_name)) {
-                PK_DBG("[CAMERA SENSOR] Fail to OFF analog power (VCAM_A), power id= (%d) \n", CAMERA_POWER_VCAM_A);
-                //return -EIO;
-                goto _kdCISModulePowerOn_exit_;
-            }
-
-            //VCAM_IO
-            if(TRUE != _hwPowerDown(CAMERA_POWER_VCAM_IO, mode_name)) {
-                PK_DBG("[CAMERA SENSOR] Fail to OFF digital power (VCAM_IO), power id = %d \n", CAMERA_POWER_VCAM_IO);
-                //return -EIO;
-                goto _kdCISModulePowerOn_exit_;
-            }
-
-            //AF_VCC
-            if(TRUE != _hwPowerDown(CAMERA_POWER_VCAM_AF,mode_name))
-            {
-                PK_DBG("[CAMERA SENSOR] Fail to OFF AF power (VCAM_AF), power id = %d \n", CAMERA_POWER_VCAM_AF);
-                //return -EIO;
-                goto _kdCISModulePowerOn_exit_;
-            }
-
-        }
-        else
-        {
-            //Set Power Pin low and Reset Pin Low
-            if (GPIO_CAMERA_INVALID != pinSet[pinSetIdx][IDX_PS_CMPDN]) {
-                if(mt_set_gpio_mode(pinSet[pinSetIdx][IDX_PS_CMPDN],pinSet[pinSetIdx][IDX_PS_CMPDN+IDX_PS_MODE])){PK_DBG("[CAMERA LENS] set gpio mode failed!! (CMPDN)\n");}
-                if(mt_set_gpio_dir(pinSet[pinSetIdx][IDX_PS_CMPDN],GPIO_DIR_OUT)){PK_DBG("[CAMERA LENS] set gpio dir failed!! (CMPDN)\n");}
-                if(mt_set_gpio_out(pinSet[pinSetIdx][IDX_PS_CMPDN],pinSet[pinSetIdx][IDX_PS_CMPDN+IDX_PS_OFF])){PK_DBG("[CAMERA LENS] set gpio failed!! (CMPDN)\n");}
-            }
-
-
-            if (GPIO_CAMERA_INVALID != pinSet[pinSetIdx][IDX_PS_CMRST]) {
-                    if(mt_set_gpio_mode(pinSet[pinSetIdx][IDX_PS_CMRST],pinSet[pinSetIdx][IDX_PS_CMRST+IDX_PS_MODE])){PK_DBG("[CAMERA SENSOR] set gpio mode failed!! (CMRST)\n");}
-                    if(mt_set_gpio_dir(pinSet[pinSetIdx][IDX_PS_CMRST],GPIO_DIR_OUT)){PK_DBG("[CAMERA SENSOR] set gpio dir failed!! (CMRST)\n");}
-                    if(mt_set_gpio_out(pinSet[pinSetIdx][IDX_PS_CMRST],pinSet[pinSetIdx][IDX_PS_CMRST+IDX_PS_OFF])){PK_DBG("[CAMERA SENSOR] set gpio failed!! (CMRST)\n");}
-            }
-
-            if(currSensorName && (0 == strcmp(SENSOR_DRVNAME_IMX219_MIPI_RAW, currSensorName)))
-	    {
-		if(pinSetIdx == 0 && TRUE != _hwPowerDown(CAMERA_POWER_VCAM_D, mode_name))
-		 {
-		   PK_DBG("[CAMERA SENSOR] main imx220 Fail to OFF core power (VCAM_D), power id = %d \n",CAMERA_POWER_VCAM_D);
-		   goto _kdCISModulePowerOn_exit_;
-		 }
-	    } else {
-
-	         if(TRUE != _hwPowerDown(CAMERA_POWER_VCAM_D,mode_name))
-	         {
-	            PK_DBG("[CAMERA SENSOR] Fail to OFF core power (VCAM_D), power id = %d \n",CAMERA_POWER_VCAM_D);
-	            goto _kdCISModulePowerOn_exit_;
-	          }
-	   }
-
-            //VCAM_A
-            if(TRUE != _hwPowerDown(CAMERA_POWER_VCAM_A,mode_name)) {
-                PK_DBG("[CAMERA SENSOR] Fail to OFF analog power (VCAM_A), power id= (%d) \n", CAMERA_POWER_VCAM_A);
-                //return -EIO;
-                goto _kdCISModulePowerOn_exit_;
-            }
-
-            //VCAM_IO
-            if(TRUE != _hwPowerDown(CAMERA_POWER_VCAM_IO, mode_name)) {
-                PK_DBG("[CAMERA SENSOR] Fail to OFF digital power (VCAM_IO), power id = %d \n", CAMERA_POWER_VCAM_IO);
-                //return -EIO;
-                goto _kdCISModulePowerOn_exit_;
-            }
-
-            //AF_VCC
-            if(TRUE != _hwPowerDown(CAMERA_POWER_VCAM_AF,mode_name))
-            {
-                PK_DBG("[CAMERA SENSOR] Fail to OFF AF power (VCAM_AF), power id = %d \n", CAMERA_POWER_VCAM_AF);
-                //return -EIO;
-                goto _kdCISModulePowerOn_exit_;
-            }
-
-        }
-
-    }
-
-    return 0;
-
-_kdCISModulePowerOn_exit_:
-    return -EIO;
-
-}
-
-EXPORT_SYMBOL(kdCISModulePowerOn);
-
-//!--
-//
-
-
diff --git a/drivers/misc/mediatek/mach/mt6735/X5PRO_6735m/camera/camera/kd_camera_hw.h b/drivers/misc/mediatek/mach/mt6735/X5PRO_6735m/camera/camera/kd_camera_hw.h
old mode 100755
new mode 100644
index d37afdf..7036054
--- a/drivers/misc/mediatek/mach/mt6735/X5PRO_6735m/camera/camera/kd_camera_hw.h
+++ b/drivers/misc/mediatek/mach/mt6735/X5PRO_6735m/camera/camera/kd_camera_hw.h
@@ -12,17 +12,16 @@
 
 //
 //Analog
-#define CAMERA_POWER_VCAM_A         PMIC_APP_MAIN_CAMERA_POWER_A
+#define CAMERA_POWER_VCAM_A		PMIC_APP_MAIN_CAMERA_POWER_A
+#define SUB_CAMERA_POWER_VCAM_A		PMIC_APP_SUB_CAMERA_POWER_A
 //Digital
-#define CAMERA_POWER_VCAM_D         PMIC_APP_MAIN_CAMERA_POWER_D
-//AF
-#define CAMERA_POWER_VCAM_AF        PMIC_APP_MAIN_CAMERA_POWER_AF
+#define CAMERA_POWER_VCAM_D		PMIC_APP_MAIN_CAMERA_POWER_D
+#define SUB_CAMERA_POWER_VCAM_D		PMIC_APP_SUB_CAMERA_POWER_D
 //digital io
-#define CAMERA_POWER_VCAM_IO        PMIC_APP_MAIN_CAMERA_POWER_IO
-//Digital for Sub
-#define SUB_CAMERA_POWER_VCAM_D     PMIC_APP_SUB_CAMERA_POWER_D
-
-
+#define CAMERA_POWER_VCAM_IO		PMIC_APP_MAIN_CAMERA_POWER_IO
+#define SUB_CAMERA_POWER_VCAM_IO		PMIC_APP_SUB_CAMERA_POWER_IO
+//AF
+#define CAMERA_POWER_VCAM_AF		PMIC_APP_MAIN_CAMERA_POWER_AF
 //FIXME, should defined in DCT tool
 
 //Main sensor
@@ -41,11 +40,66 @@
 
 // Define I2C Bus Num
 #define SUPPORT_I2C_BUS_NUM1        0
-/* Vanzo:yucheng on: Mon, 06 Apr 2015 21:46:53 +0800
- * Porting from wuzhiyong
 #define SUPPORT_I2C_BUS_NUM2        0
- */
-#define SUPPORT_I2C_BUS_NUM2        0
-// End of Vanzo: yucheng
 
+typedef enum{
+	VDD_None,
+	PDN,
+	RST,
+	SensorMCLK,
+	AVDD  = CAMERA_POWER_VCAM_A,
+	DVDD  = CAMERA_POWER_VCAM_D,
+	DOVDD = CAMERA_POWER_VCAM_IO,
+	AFVDD = CAMERA_POWER_VCAM_AF
+}PowerType;
+
+typedef enum{
+	Vol_Low =0,
+	Vol_High=1,
+	Vol_900  = VOL_0900,
+    Vol_1000 = VOL_1000,
+    Vol_1100 = VOL_1100,
+    Vol_1200 = VOL_1200,	
+    Vol_1300 = VOL_1300,    
+    Vol_1350 = VOL_1350,   
+    Vol_1500 = VOL_1500,    
+    Vol_1800 = VOL_1800,    
+    Vol_2000 = VOL_2000,
+    Vol_2100 = VOL_2100,
+    Vol_2500 = VOL_2500,    
+    Vol_2800 = VOL_2800, 
+    Vol_3000 = VOL_3000,
+    Vol_3300 = VOL_3300,
+    Vol_3400 = VOL_3400, 
+    Vol_3500 = VOL_3500,
+    Vol_3600 = VOL_3600  
+}Voltage;
+
+
+typedef struct{
+	PowerType PowerType;
+	Voltage Voltage;
+	u32 Delay;
+}PowerInformation;
+
+
+typedef struct{
+	char* SensorName;
+	PowerInformation PowerInfo[12];
+}PowerSequence;
+
+typedef struct{
+	PowerSequence PowerSeq[16];	
+}PowerUp;
+
+typedef struct{
+	u32 Gpio_Pin;  
+	u32 Gpio_Mode;
+	Voltage Voltage;
+}PowerCustInfo;
+
+typedef struct{
+	PowerCustInfo PowerCustInfo[6];
+}PowerCust;
 #endif
+
-- 
2.7.4

