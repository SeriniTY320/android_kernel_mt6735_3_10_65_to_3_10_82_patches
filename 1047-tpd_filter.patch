From 64c17d7d44d0d9bde08051c678274c4b0049df54 Mon Sep 17 00:00:00 2001
From: olegsvs <oleg.texet@gmail.com>
Date: Tue, 3 May 2016 23:56:12 +0300
Subject: [PATCH 1047/1168] tpd_filter

---
 .../touchscreen/mediatek/GT915_HD/gt9xx_driver.c   |   23 +-
 .../mediatek/GT915_HD/tpd_custom_gt9xx.h           |    3 +
 drivers/input/touchscreen/mediatek/mtk_tpd.c       |    1 -
 drivers/input/touchscreen/mediatek/tpd.h           |    2 +-
 drivers/input/touchscreen/mediatek/tpd_button.c    |    4 +-
 drivers/input/touchscreen/mediatek/tpd_calibrate.c |    0
 drivers/input/touchscreen/mediatek/tpd_calibrate.h |    0
 drivers/input/touchscreen/mediatek/tpd_debug.c     |    0
 drivers/input/touchscreen/mediatek/tpd_debug.h     |    0
 drivers/input/touchscreen/mediatek/tpd_default.c   |    0
 drivers/input/touchscreen/mediatek/tpd_default.h   |    0
 drivers/input/touchscreen/mediatek/tpd_init.c      |    0
 drivers/input/touchscreen/mediatek/tpd_misc.c      |    0
 drivers/input/touchscreen/mediatek/tpd_setting.c   |    0
 .../jd9365_6735_dsi_video/jd9365_6735_dsi_video.c  |  325 ++-
 .../rm68200_6735_dsi_video.c                       | 2693 +++++---------------
 include/config/auto.conf                           |    1 -
 include/generated/autoconf.h                       |    1 -
 include/generated/compile.h                        |    4 +-
 19 files changed, 863 insertions(+), 2194 deletions(-)
 mode change 100755 => 100644 drivers/input/touchscreen/mediatek/mtk_tpd.c
 mode change 100755 => 100644 drivers/input/touchscreen/mediatek/tpd.h
 mode change 100755 => 100644 drivers/input/touchscreen/mediatek/tpd_button.c
 mode change 100755 => 100644 drivers/input/touchscreen/mediatek/tpd_calibrate.c
 mode change 100755 => 100644 drivers/input/touchscreen/mediatek/tpd_calibrate.h
 mode change 100755 => 100644 drivers/input/touchscreen/mediatek/tpd_debug.c
 mode change 100755 => 100644 drivers/input/touchscreen/mediatek/tpd_debug.h
 mode change 100755 => 100644 drivers/input/touchscreen/mediatek/tpd_default.c
 mode change 100755 => 100644 drivers/input/touchscreen/mediatek/tpd_default.h
 mode change 100755 => 100644 drivers/input/touchscreen/mediatek/tpd_init.c
 mode change 100755 => 100644 drivers/input/touchscreen/mediatek/tpd_misc.c
 mode change 100755 => 100644 drivers/input/touchscreen/mediatek/tpd_setting.c

diff --git a/drivers/input/touchscreen/mediatek/GT915_HD/gt9xx_driver.c b/drivers/input/touchscreen/mediatek/GT915_HD/gt9xx_driver.c
index 675a20a..2a94f8f 100755
--- a/drivers/input/touchscreen/mediatek/GT915_HD/gt9xx_driver.c
+++ b/drivers/input/touchscreen/mediatek/GT915_HD/gt9xx_driver.c
@@ -64,6 +64,8 @@
  *          5. no longer support GT915S
  *                  By Meta, 2014/01/14
  */
+#include "tpd_custom_gt9xx.h"
+
 
 #include "tpd.h"
 #include "tpd_custom_gt9xx.h"
@@ -95,7 +97,7 @@ static DECLARE_WAIT_QUEUE_HEAD(waiter);
 
 #ifdef TPD_HAVE_BUTTON
 static int tpd_keys_local[TPD_KEY_COUNT] = TPD_KEYS;
-static int tpd_keys_dim_local[TPD_KEY_COUNT][3] = TPD_KEYS_DIM;
+static int tpd_keys_dim_local[TPD_KEY_COUNT][4] = TPD_KEYS_DIM;
 #endif
 
 #if GTP_GESTURE_WAKEUP
@@ -192,7 +194,8 @@ u8 esd_running = 0;
 spinlock_t esd_lock;
 #endif
 
-
+extern struct tpd_filter_t tpd_filter;
+static struct tpd_filter_t tpd_filter_local = TPD_FILTER_PARA;
 #ifdef TPD_PROXIMITY
 #define TPD_PROXIMITY_VALID_REG                   0x814E
 #define TPD_PROXIMITY_ENABLE_REG                  0x8042
@@ -1919,7 +1922,7 @@ static s32 tpd_i2c_probe(struct i2c_client *client, const struct i2c_device_id *
 {
     s32 err = 0;
     s32 ret = 0;
-
+		memcpy(&tpd_filter, &tpd_filter_local, sizeof(struct tpd_filter_t));
     u16 version_info;
 #if GTP_HAVE_TOUCH_KEY
     s32 idx = 0;
@@ -1928,11 +1931,7 @@ static s32 tpd_i2c_probe(struct i2c_client *client, const struct i2c_device_id *
     struct hwmsen_object obj_ps;
 #endif
 //add at 20150330 by zhu
-#if 1//def MAIERXUN_TP_COM
-    if(touchpanel_flag){
-	return 0;
-     }
-#endif
+
 //add at 20150330 by zhu end
     i2c_client_point = client;
     ret = tpd_power_on(client);
@@ -1940,9 +1939,7 @@ static s32 tpd_i2c_probe(struct i2c_client *client, const struct i2c_device_id *
     if (ret < 0)
     {
 //add at 20150330 by zhu
-#if 1//def MAIERXUN_TP_COM
-       touchpanel_flag=false;
-#endif
+
 //add at 20150330 by zhu end
         GTP_ERROR("I2C communication ERROR!");
 	return 0;
@@ -2069,9 +2066,7 @@ static s32 tpd_i2c_probe(struct i2c_client *client, const struct i2c_device_id *
    
     tpd_load_status = 1;
 //add at 20150330 by zhu
-#if 1//def MAIERXUN_TP_COM
-    touchpanel_flag=true;
-#endif
+
 //add at 20150330 by zhu end
     return 0;
 }
diff --git a/drivers/input/touchscreen/mediatek/GT915_HD/tpd_custom_gt9xx.h b/drivers/input/touchscreen/mediatek/GT915_HD/tpd_custom_gt9xx.h
index 8decf6d..b90283d 100755
--- a/drivers/input/touchscreen/mediatek/GT915_HD/tpd_custom_gt9xx.h
+++ b/drivers/input/touchscreen/mediatek/GT915_HD/tpd_custom_gt9xx.h
@@ -142,6 +142,9 @@ extern s32 gtp_i2c_read_dbl_check(struct i2c_client *client, u16 addr, u8 *rxbuf
 #define GTP_DEBUG_ARRAY_ON    0
 #define GTP_DEBUG_FUNC_ON     0
 
+
+#define TPD_FILTER_PARA {1, 146} //{enable, pixel density}
+
 //***************************PART2:TODO define**********************************
 //STEP_1(REQUIRED):Change config table.
 // Sensor_ID Map:
diff --git a/drivers/input/touchscreen/mediatek/mtk_tpd.c b/drivers/input/touchscreen/mediatek/mtk_tpd.c
old mode 100755
new mode 100644
index fa4f7f0..584b66c
--- a/drivers/input/touchscreen/mediatek/mtk_tpd.c
+++ b/drivers/input/touchscreen/mediatek/mtk_tpd.c
@@ -657,4 +657,3 @@ module_exit(tpd_device_exit);
 MODULE_LICENSE("GPL");
 MODULE_DESCRIPTION("MediaTek touch panel driver");
 MODULE_AUTHOR("Kirby Wu<kirby.wu@mediatek.com>");
-
diff --git a/drivers/input/touchscreen/mediatek/tpd.h b/drivers/input/touchscreen/mediatek/tpd.h
old mode 100755
new mode 100644
index 459390c..18f7138
--- a/drivers/input/touchscreen/mediatek/tpd.h
+++ b/drivers/input/touchscreen/mediatek/tpd.h
@@ -83,7 +83,7 @@ extern int tpd_def_calmat[];
 extern int TPD_DO_WARP;
 extern int tpd_wb_start[];
 extern int tpd_wb_end[];
-extern bool touchpanel_flag;//by zhu
+
 struct tpd_device {
 	struct device *tpd_dev;
 	struct regulator *reg;
diff --git a/drivers/input/touchscreen/mediatek/tpd_button.c b/drivers/input/touchscreen/mediatek/tpd_button.c
old mode 100755
new mode 100644
index cc0913d..b165d3a
--- a/drivers/input/touchscreen/mediatek/tpd_button.c
+++ b/drivers/input/touchscreen/mediatek/tpd_button.c
@@ -7,9 +7,7 @@ extern struct tpd_device *tpd;
 /* static int tpd_keys_dim[TPD_KEY_COUNT][4] = TPD_KEYS_DIM; */
 static unsigned int tpd_keycnt;
 static int tpd_keys[TPD_VIRTUAL_KEY_MAX] = { 0 };
-//add at 2015330 by zhu for tp 
-bool touchpanel_flag=false;
-//add at 2015330 by zhu for tp end
+
 static int tpd_keys_dim[TPD_VIRTUAL_KEY_MAX][4];	/* = {0}; */
 static ssize_t mtk_virtual_keys_show(struct kobject *kobj, struct kobj_attribute *attr, char *buf)
 {
diff --git a/drivers/input/touchscreen/mediatek/tpd_calibrate.c b/drivers/input/touchscreen/mediatek/tpd_calibrate.c
old mode 100755
new mode 100644
diff --git a/drivers/input/touchscreen/mediatek/tpd_calibrate.h b/drivers/input/touchscreen/mediatek/tpd_calibrate.h
old mode 100755
new mode 100644
diff --git a/drivers/input/touchscreen/mediatek/tpd_debug.c b/drivers/input/touchscreen/mediatek/tpd_debug.c
old mode 100755
new mode 100644
diff --git a/drivers/input/touchscreen/mediatek/tpd_debug.h b/drivers/input/touchscreen/mediatek/tpd_debug.h
old mode 100755
new mode 100644
diff --git a/drivers/input/touchscreen/mediatek/tpd_default.c b/drivers/input/touchscreen/mediatek/tpd_default.c
old mode 100755
new mode 100644
diff --git a/drivers/input/touchscreen/mediatek/tpd_default.h b/drivers/input/touchscreen/mediatek/tpd_default.h
old mode 100755
new mode 100644
diff --git a/drivers/input/touchscreen/mediatek/tpd_init.c b/drivers/input/touchscreen/mediatek/tpd_init.c
old mode 100755
new mode 100644
diff --git a/drivers/input/touchscreen/mediatek/tpd_misc.c b/drivers/input/touchscreen/mediatek/tpd_misc.c
old mode 100755
new mode 100644
diff --git a/drivers/input/touchscreen/mediatek/tpd_setting.c b/drivers/input/touchscreen/mediatek/tpd_setting.c
old mode 100755
new mode 100644
diff --git a/drivers/misc/mediatek/lcm/jd9365_6735_dsi_video/jd9365_6735_dsi_video.c b/drivers/misc/mediatek/lcm/jd9365_6735_dsi_video/jd9365_6735_dsi_video.c
index 9f4b7e0..90e6de2 100644
--- a/drivers/misc/mediatek/lcm/jd9365_6735_dsi_video/jd9365_6735_dsi_video.c
+++ b/drivers/misc/mediatek/lcm/jd9365_6735_dsi_video/jd9365_6735_dsi_video.c
@@ -157,10 +157,6 @@ static struct LCM_setting_table lcm_initialization_setting[] = {
 {0xE3,1,{0xF8}},
 
 //--- Sequence Ctrl ----//
-{0x70,1,{0x20}},
-{0x71,1,{0x13}},
-{0x72,1,{0x06}},
-{0x75,1,{0x03}},
 //{0x80,1,{0x02}},
 
 //--- Page1  ----//
@@ -168,10 +164,13 @@ static struct LCM_setting_table lcm_initialization_setting[] = {
 
 //Set VCOM
 {0x00,1,{0x00}},
-{0x01,1,{0xB0}},
+{0x01,1,{0xBA}},
 {0x03,1,{0x00}},
-{0x04,1,{0xB0}},
-{0x0C,1,{0x74}},
+{0x04,1,{0x75}},
+{0x17,1,{0x00}},
+{0x18,1,{0xA0}},
+{0x19,1,{0x05}},
+/*{0x0C,1,{0x74}},
 
 //Set Gamma Power,1,{ VGMP,1,{VGMN,1,{VGSP,1,{VGSN
 {0x17,1,{0x00}},
@@ -282,21 +281,21 @@ static struct LCM_setting_table lcm_initialization_setting[] = {
 {0x16,1,{0x44}},
 {0x17,1,{0x46}},
 {0x18,1,{0x48}},
-{0x19,1,{0x4A}},
-{0x1A,1,{0x40}},
-{0x1B,1,{0x42}},
-{0x1C,1,{0x1F}},
-{0x1D,1,{0x1F}},
-{0x1E,1,{0x1F}},
-{0x1F,1,{0x1F}},
-{0x20,1,{0x1F}},
-{0x21,1,{0x1F}},
-{0x22,1,{0x1F}},
-{0x23,1,{0x1F}},
-{0x24,1,{0x1F}},
-{0x25,1,{0x1E}},
-{0x26,1,{0x1E}},
-{0x27,1,{0x1E}},
+{0x19,1,{0x4A}},*/
+{0x1A,1,{0x00}},
+{0x1B,1,{0xA0}},
+{0x1C,1,{0x05}},
+{0x1F,1,{0x2F}},
+/*{0x1E,1,{0x1F}},
+{0x1F,1,{0x1F}},*/
+{0x20,1,{0x23}},
+{0x21,1,{0x23}},
+{0x22,1,{0x4F}},
+//{0x23,1,{0x1F}},
+//{0x24,1,{0x1F}},
+//{0x25,1,{0x1E}},
+{0x26,1,{0xF1}},
+/*{0x27,1,{0x1E}},
 {0x28,1,{0x1F}},
 {0x29,1,{0x1F}},
 {0x2A,1,{0x1E}},
@@ -313,21 +312,21 @@ static struct LCM_setting_table lcm_initialization_setting[] = {
 {0x33,1,{0x1F}}, 
 {0x34,1,{0x1F}}, 
 {0x35,1,{0x1F}}, 
-{0x36,1,{0x1F}}, 
-{0x37,1,{0x1F}}, 
-{0x38,1,{0x1F}}, 
-{0x39,1,{0x1F}}, 
-{0x3A,1,{0x1F}}, 
-{0x3B,1,{0x1E}}, 
-{0x3C,1,{0x1E}}, 
-{0x3D,1,{0x1E}}, 
+{0x36,1,{0x1F}}, */
+{0x37,1,{0x09}}, 
+{0x38,1,{0x04}}, 
+{0x39,1,{0x0C}}, 
+{0x3A,1,{0x18}}, 
+//{0x3B,1,{0x1E}}, 
+{0x3C,1,{0x78}}, 
+/*{0x3D,1,{0x1E}}, 
 {0x3E,1,{0x1F}}, 
-{0x3F,1,{0x1F}}, 
-{0x40,1,{0x1F}}, 
-{0x41,1,{0x1E}},
+{0x3F,1,{0x1F}}, */
+{0x40,1,{0x04}}, 
+{0x41,1,{0xA0}},
  
 //GIP_R_GS Pin mapping
-{0x42,1,{0x0B}},
+/*{0x42,1,{0x0B}},
 {0x43,1,{0x09}},   
 {0x44,1,{0x07}}, 
 {0x45,1,{0x05}}, 
@@ -345,60 +344,197 @@ static struct LCM_setting_table lcm_initialization_setting[] = {
 {0x51,1,{0x1E}}, 
 {0x52,1,{0x1E}}, 
 {0x53,1,{0x1E}}, 
-{0x54,1,{0x1F}}, 
-{0x55,1,{0x1F}}, 
-{0x56,1,{0x1F}}, 
-{0x57,1,{0x1E}}, 
+{0x54,1,{0x1F}}, */
+{0x55,1,{0x01}}, 
+{0x56,1,{0x01}}, 
+{0x57,1,{0x69}}, 
 
 //GIP Timing  
+{0x58,1,{0x0A}}, 
+{0x59,1,{0x2A}}, 
+{0x5A,1,{0x29}}, 
+{0x5B,1,{0x10}}, 
+{0x5C,1,{0x16}}, 
+{0x5D,1,{0x70}}, 
+{0x5E,1,{0x54}}, 
+{0x5F,1,{0x43}}, 
+{0x60,1,{0x34}}, 
+{0x61,1,{0x2F}}, 
+{0x62,1,{0x1F}}, 
+{0x63,1,{0x23}}, 
+{0x64,1,{0x0C}},
+{0x65,1,{0x23}},
+{0x66,1,{0x1F}},
+{0x67,1,{0x1E}},
+{0x68,1,{0x3A}},
+{0x69,1,{0x28}},
+{0x6A,1,{0x34}},
+{0x6B,1,{0x27}}, 
+{0x6C,1,{0x26}}, 
+{0x6D,1,{0x1C}}, 
+{0x6E,1,{0x0F}}, 
+{0x6F,1,{0x02}}, 
+{0x70,1,{0x70}}, 
+{0x71,1,{0x54}}, 
+{0x72,1,{0x43}}, 
+{0x73,1,{0x34}}, 
+{0x74,1,{0x2F}}, 
+{0x75,1,{0x1F}}, 
+{0x76,1,{0x23}}, 
+{0x77,1,{0x0C}}, 
+{0x78,1,{0x23}}, 
+{0x79,1,{0x1F}}, 
+{0x7A,1,{0x1E}}, 
+{0x7B,1,{0x3A}}, 
+{0x7C,1,{0x28}}, 
+{0x7D,1,{0x34}}, 
+{0x7E,1,{0x27}}, 
+{0x7F,1,{0x26}}, 
+{0x80,1,{0x1C}}, 
+{0x81,1,{0x0F}}, 
+{0x82,1,{0x02}}, 
+
+
+{0xE0,1,{0x02}}, //ESD
+{0x01,1,{0x04}}, 
+{0x02,1,{0x0A}}, 
+{0x01,1,{0x08}}, 
+{0x04,1,{0x00}}, 
+{0x05,1,{0x02}}, 
+{0x06,1,{0x1F}}, 
+{0x07,1,{0x1F}}, 
+{0x08,1,{0x1F}}, 
+{0x09,1,{0x1F}}, 
+{0x0A,1,{0x1F}}, 
+{0x0B,1,{0x1F}}, 
+{0x0C,1,{0x1F}}, 
+{0x0D,1,{0x1F}}, 
+{0x0E,1,{0x1F}}, 
+{0x0F,1,{0x04}}, 
+{0x10,1,{0x1F}}, 
+{0x11,1,{0x1F}}, 
+{0x12,1,{0x1F}}, 
+{0x13,1,{0x1F}}, 
+{0x14,1,{0x1F}}, 
+{0x15,1,{0x1E}}, 
+{0x16,1,{0x07}}, 
+{0x17,1,{0x05}}, 
+{0x18,1,{0x0B}}, 
+{0x19,1,{0x09}}, 
+{0x1A,1,{0x01}}, 
+{0x1B,1,{0x03}}, 
+{0x1C,1,{0x1F}}, 
+{0x1D,1,{0x1F}}, 
+{0x1E,1,{0x1F}}, 
+{0x1F,1,{0x1F}}, 
+{0x20,1,{0x1F}}, 
+{0x21,1,{0x1F}}, 
+{0x22,1,{0x1F}}, 
+{0x23,1,{0x1F}}, 
+{0x24,1,{0x1F}}, 
+{0x25,1,{0x1F}}, 
+{0x26,1,{0x1F}}, 
+{0x27,1,{0x1F}}, 
+{0x28,1,{0x1F}}, 
+{0x29,1,{0x11}}, 
+{0x2A,1,{0x1F}}, 
+{0x2B,1,{0x1E}}, 
+{0x2C,1,{0x09}}, 
+{0x2D,1,{0x0B}}, 
+{0x2E,1,{0x05}}, 
+{0x2F,1,{0x07}}, 
+{0x30,1,{0x03}}, 
+{0x31,1,{0x01}}, 
+{0x32,1,{0x1F}}, 
+{0x33,1,{0x1F}}, 
+{0x34,1,{0x1F}}, 
+{0x35,1,{0x1F}}, 
+{0x36,1,{0x1F}}, 
+{0x37,1,{0x1F}}, 
+{0x38,1,{0x1F}}, 
+{0x39,1,{0x1F}}, 
+{0x3A,1,{0x1F}}, 
+{0x3B,1,{0x1F}}, 
+{0x3C,1,{0x1F}}, 
+{0x3D,1,{0x1F}}, 
+{0x3E,1,{0x1F}}, 
+{0x3F,1,{0x11}}, 
+{0x40,1,{0x1E}},
+{0x41,1,{0x1F}},
+{0x42,1,{0x08}},
+{0x43,1,{0x0A}}, 
+{0x44,1,{0x04}}, 
+{0x45,1,{0x06}}, 
+{0x46,1,{0x02}}, 
+{0x47,1,{0x00}}, 
+{0x48,1,{0x1F}}, 
+{0x49,1,{0x1F}}, 
+{0x4A,1,{0x1F}},
+{0x4B,1,{0x1F}},
+{0x4C,1,{0x1F}},
+{0x4D,1,{0x1F}},
+{0x4E,1,{0x1F}},
+{0x4F,1,{0x1F}},
+{0x50,1,{0x1F}},
+{0x51,1,{0x1F}},
+{0x52,1,{0x1F}},
+{0x53,1,{0x1F}}, 
+{0x54,1,{0x1F}}, 
+{0x55,1,{0x10}}, 
+{0x56,1,{0x1E}}, 
+{0x57,1,{0x1F}}, 
 {0x58,1,{0x40}}, 
 {0x59,1,{0x00}}, 
-{0x5A,1,{0x00}}, 
-{0x5B,1,{0x30}}, 
-{0x5C,1,{0x08}}, 
-{0x5D,1,{0x40}}, 
-{0x5E,1,{0x01}}, 
-{0x5F,1,{0x02}}, 
-{0x60,1,{0x00}}, 
-{0x61,1,{0x01}}, 
-{0x62,1,{0x02}}, 
-{0x63,1,{0x69}}, 
-{0x64,1,{0x6A}},
-{0x65,1,{0x00}},
-{0x66,1,{0x00}},
-{0x67,1,{0x74}},
-{0x68,1,{0x0A}},
-{0x69,1,{0x69}},
-{0x6A,1,{0x6A}},
-{0x6B,1,{0x10}}, 
-{0x6C,1,{0x00}}, 
-{0x6D,1,{0x04}}, 
-{0x6E,1,{0x04}}, 
-{0x6F,1,{0x88}}, 
-{0x70,1,{0x00}}, 
-{0x71,1,{0x00}}, 
-{0x72,1,{0x06}}, 
-{0x73,1,{0x7B}}, 
+{0x5A,1,{0x00}},
+{0x5B,1,{0x30}},
+{0x5C,1,{0x07}},
+{0x5D,1,{0x30}},
+{0x5E,1,{0x00}},
+{0x5F,1,{0x00}},
+{0x60,1,{0x30}},
+{0x61,1,{0x00}},
+{0x62,1,{0x00}},
+{0x63,1,{0x03}}, 
+{0x64,1,{0x6B}}, 
+{0x65,1,{0x60}}, 
+{0x66,1,{0x02}}, 
+{0x67,1,{0x73}}, 
+{0x68,1,{0x0C}}, 
+{0x69,1,{0x06}}, 
+{0x6A,1,{0x6B}},
+{0x6B,1,{0x07}},
+{0x6C,1,{0x00}},
+{0x6D,1,{0x00}},
+{0x6E,1,{0x00}},
+{0x6F,1,{0x00}},
+{0x70,1,{0x00}},
+{0x71,1,{0x00}},
+{0x72,1,{0x06}},
+{0x73,1,{0x86}}, 
 {0x74,1,{0x00}}, 
-{0x75,1,{0x87}}, 
+{0x75,1,{0x07}}, 
 {0x76,1,{0x00}}, 
 {0x77,1,{0x5D}}, 
-{0x78,1,{0x17}}, 
-{0x79,1,{0x1F}}, 
-{0x7A,1,{0x00}}, 
-{0x7B,1,{0x00}}, 
-{0x7C,1,{0x00}}, 
-{0x7D,1,{0x03}}, 
-{0x7E,1,{0x7B}}, 
-
-{0xE0,1,{0x04}}, //ESD
-{0x2B,1,{0x2B}}, 
-{0x2E,1,{0x44}}, 
+{0x78,1,{0x14}}, 
+{0x79,1,{0x00}}, 
+{0x7A,1,{0x05}},
+{0x7B,1,{0x05}},
+{0x7C,1,{0x00}},
+{0x7D,1,{0x03}},
+{0x7E,1,{0x86}},
+{0x7F,1,{0x00}},
 //Page0
+{0xE0,1,{0x04}},
+{0x0E,1,{0x48}},
+{0x2B,1,{0x2B}},
+{0x2E,1,{0x44}},
 {0xE0,1,{0x00}},
-//open watch dog
 {0xE6,1,{0x02}},
 {0xE7,1,{0x02}},
+{0x11,1,{0x00}},
+
+//open watch dog
+{REGFLAG_DELAY,120,{}},
 
 {0x35,1,{0x00}},
 
@@ -435,26 +571,31 @@ static struct LCM_setting_table lcm_sleep_mode_in_setting[] = {
 	//{REGFLAG_END_OF_TABLE, 0x00, {}}
 };*/
 static struct LCM_setting_table lcm_sleep_out_setting[] = {
-    // Sleep Out
-    {0x11, 1, {0x00}},
-    {REGFLAG_DELAY, 120, {}},
+	// Sleep Out
+	{0x11, 1, {0x00}},
+	{REGFLAG_DELAY, 120, {}},
 
-    // Display ON
-    {0x29, 1, {0x00}},
-    {REGFLAG_DELAY, 10, {}},
-    
-    //{REGFLAG_END_OF_TABLE, 0x00, {}}
+	// Display ON
+	{0x29, 1, {0x00}},
+	{REGFLAG_DELAY, 10, {}},
+
+	{REGFLAG_END_OF_TABLE, 0x00, {}}
 };
 
-static struct LCM_setting_table lcm_sleep_mode_in_setting[] = {
-    // Display off sequence
-    {0x28, 1, {0x00}},
-    {REGFLAG_DELAY, 10, {}},
 
-    // Sleep Mode On
+static struct LCM_setting_table lcm_sleep_in_setting[] = {
+	// Display off sequence
+	{0x01, 1, {0x00}},
+	{REGFLAG_DELAY, 50, {}},
+	
+	{0x28, 1, {0x00}},
+	{REGFLAG_DELAY, 50, {}},
+
+	// Sleep Mode On
 	{0x10, 1, {0x00}},
-	{REGFLAG_DELAY, 120, {}},
-	//{REGFLAG_END_OF_TABLE, 0x00, {}}
+	{REGFLAG_DELAY, 50, {}},
+
+	{REGFLAG_END_OF_TABLE, 0x00, {}}
 };
 
 
diff --git a/drivers/misc/mediatek/lcm/rm68200_6735_dsi_video/rm68200_6735_dsi_video.c b/drivers/misc/mediatek/lcm/rm68200_6735_dsi_video/rm68200_6735_dsi_video.c
index 5d5efd6..31f6b82 100644
--- a/drivers/misc/mediatek/lcm/rm68200_6735_dsi_video/rm68200_6735_dsi_video.c
+++ b/drivers/misc/mediatek/lcm/rm68200_6735_dsi_video/rm68200_6735_dsi_video.c
@@ -1,31 +1,106 @@
-#ifndef BUILD_LK
+/* Copyright Statement:
+ *
+ * This software/firmware and related documentation ("MediaTek Software") are
+ * protected under relevant copyright laws. The information contained herein
+ * is confidential and proprietary to MediaTek Inc. and/or its licensors.
+ * Without the prior written permission of MediaTek inc. and/or its licensors,
+ * any reproduction, modification, use or disclosure of MediaTek Software,
+ * and information contained herein, in whole or in part, shall be strictly prohibited.
+ */
+/* MediaTek Inc. (C) 2010. All rights reserved.
+ *
+ * BY OPENING THIS FILE, RECEIVER HEREBY UNEQUIVOCALLY ACKNOWLEDGES AND AGREES
+ * THAT THE SOFTWARE/FIRMWARE AND ITS DOCUMENTATIONS ("MEDIATEK SOFTWARE")
+ * RECEIVED FROM MEDIATEK AND/OR ITS REPRESENTATIVES ARE PROVIDED TO RECEIVER ON
+ * AN "AS-IS" BASIS ONLY. MEDIATEK EXPRESSLY DISCLAIMS ANY AND ALL WARRANTIES,
+ * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE IMPLIED WARRANTIES OF
+ * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE OR NONINFRINGEMENT.
+ * NEITHER DOES MEDIATEK PROVIDE ANY WARRANTY WHATSOEVER WITH RESPECT TO THE
+ * SOFTWARE OF ANY THIRD PARTY WHICH MAY BE USED BY, INCORPORATED IN, OR
+ * SUPPLIED WITH THE MEDIATEK SOFTWARE, AND RECEIVER AGREES TO LOOK ONLY TO SUCH
+ * THIRD PARTY FOR ANY WARRANTY CLAIM RELATING THERETO. RECEIVER EXPRESSLY ACKNOWLEDGES
+ * THAT IT IS RECEIVER'S SOLE RESPONSIBILITY TO OBTAIN FROM ANY THIRD PARTY ALL PROPER LICENSES
+ * CONTAINED IN MEDIATEK SOFTWARE. MEDIATEK SHALL ALSO NOT BE RESPONSIBLE FOR ANY MEDIATEK
+ * SOFTWARE RELEASES MADE TO RECEIVER'S SPECIFICATION OR TO CONFORM TO A PARTICULAR
+ * STANDARD OR OPEN FORUM. RECEIVER'S SOLE AND EXCLUSIVE REMEDY AND MEDIATEK'S ENTIRE AND
+ * CUMULATIVE LIABILITY WITH RESPECT TO THE MEDIATEK SOFTWARE RELEASED HEREUNDER WILL BE,
+ * AT MEDIATEK'S OPTION, TO REVISE OR REPLACE THE MEDIATEK SOFTWARE AT ISSUE,
+ * OR REFUND ANY SOFTWARE LICENSE FEES OR SERVICE CHARGE PAID BY RECEIVER TO
+ * MEDIATEK FOR SUCH MEDIATEK SOFTWARE AT ISSUE.
+ *
+ * The following software/firmware and/or related documentation ("MediaTek Software")
+ * have been modified by MediaTek Inc. All revisions are subject to any receiver's
+ * applicable license agreements with MediaTek Inc.
+ */
+
+/*****************************************************************************
+*  Copyright Statement:
+*  --------------------
+*  This software is protected by Copyright and the information contained
+*  herein is confidential. The software may not be copied and the information
+*  contained herein may not be used or disclosed except with the written
+*  permission of MediaTek Inc. (C) 2008
+*
+*  BY OPENING THIS FILE, BUYER HEREBY UNEQUIVOCALLY ACKNOWLEDGES AND AGREES
+*  THAT THE SOFTWARE/FIRMWARE AND ITS DOCUMENTATIONS ("MEDIATEK SOFTWARE")
+*  RECEIVED FROM MEDIATEK AND/OR ITS REPRESENTATIVES ARE PROVIDED TO BUYER ON
+*  AN "AS-IS" BASIS ONLY. MEDIATEK EXPRESSLY DISCLAIMS ANY AND ALL WARRANTIES,
+*  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE IMPLIED WARRANTIES OF
+*  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE OR NONINFRINGEMENT.
+*  NEITHER DOES MEDIATEK PROVIDE ANY WARRANTY WHATSOEVER WITH RESPECT TO THE
+*  SOFTWARE OF ANY THIRD PARTY WHICH MAY BE USED BY, INCORPORATED IN, OR
+*  SUPPLIED WITH THE MEDIATEK SOFTWARE, AND BUYER AGREES TO LOOK ONLY TO SUCH
+*  THIRD PARTY FOR ANY WARRANTY CLAIM RELATING THERETO. MEDIATEK SHALL ALSO
+*  NOT BE RESPONSIBLE FOR ANY MEDIATEK SOFTWARE RELEASES MADE TO BUYER'S
+*  SPECIFICATION OR TO CONFORM TO A PARTICULAR STANDARD OR OPEN FORUM.
+*
+*  BUYER'S SOLE AND EXCLUSIVE REMEDY AND MEDIATEK'S ENTIRE AND CUMULATIVE
+*  LIABILITY WITH RESPECT TO THE MEDIATEK SOFTWARE RELEASED HEREUNDER WILL BE,
+*  AT MEDIATEK'S OPTION, TO REVISE OR REPLACE THE MEDIATEK SOFTWARE AT ISSUE,
+*  OR REFUND ANY SOFTWARE LICENSE FEES OR SERVICE CHARGE PAID BY BUYER TO
+*  MEDIATEK FOR SUCH MEDIATEK SOFTWARE AT ISSUE.
+*
+*  THE TRANSACTION CONTEMPLATED HEREUNDER SHALL BE CONSTRUED IN ACCORDANCE
+*  WITH THE LAWS OF THE STATE OF CALIFORNIA, USA, EXCLUDING ITS CONFLICT OF
+*  LAWS PRINCIPLES.  ANY DISPUTES, CONTROVERSIES OR CLAIMS ARISING THEREOF AND
+*  RELATED THERETO SHALL BE SETTLED BY ARBITRATION IN SAN FRANCISCO, CA, UNDER
+*  THE RULES OF THE INTERNATIONAL CHAMBER OF COMMERCE (ICC).
+*
+*****************************************************************************/
+
+
+#ifdef BUILD_LK
+#else
 #include <linux/string.h>
+#if defined(BUILD_UBOOT)
+#include <asm/arch/mt_gpio.h>
+#else
+#include <mach/mt_gpio.h>
+#endif
 #endif
-
 #include "lcm_drv.h"
 
-#ifdef BUILD_LK
-	#include <platform/mt_gpio.h>
-	#include <string.h>
-#elif defined(BUILD_UBOOT)
-	#include <asm/arch/mt_gpio.h>
+#if defined(BUILD_LK)
 #else
-	#include <mach/mt_gpio.h>
+
+#include <linux/proc_fs.h>   //proc file use 
 #endif
+
+
 // ---------------------------------------------------------------------------
 //  Local Constants
 // ---------------------------------------------------------------------------
 
 #define FRAME_WIDTH  										(720)
 #define FRAME_HEIGHT 										(1280)
-#define LCM_ID       (0x69)
-#define REGFLAG_DELAY             							0xAB
-#define REGFLAG_END_OF_TABLE      							0xAA   // END OF REGISTERS MARKER
+#define LCM_ID                       						(0x1284)
 
-#define LCM_ID_RM68210 (0x8000)
+#define REGFLAG_DELAY             							(0XEE)
+#define REGFLAG_END_OF_TABLE      							(0xDD)	// END OF REGISTERS MARKER
 
 
-#if 0
+#define LCM_DSI_CMD_MODE									0
+
 #ifndef TRUE
     #define TRUE 1
 #endif
@@ -34,2200 +109,660 @@
     #define FALSE 0
 #endif
 
-static unsigned int lcm_esd_test = FALSE;      ///only for ESD test
-#endif
-
-#define LCM_DSI_CMD_MODE									1
-
 // ---------------------------------------------------------------------------
 //  Local Variables
 // ---------------------------------------------------------------------------
 
-static LCM_UTIL_FUNCS lcm_util;
+static LCM_UTIL_FUNCS lcm_util = {0};
 
 #define SET_RESET_PIN(v)    								(lcm_util.set_reset_pin((v)))
 
 #define UDELAY(n) 											(lcm_util.udelay(n))
 #define MDELAY(n) 											(lcm_util.mdelay(n))
 
+#define LCM_RM68200_ID 		(0x8200)
+
+static unsigned int lcm_esd_test = FALSE;      ///only for ESD test
 
 // ---------------------------------------------------------------------------
 //  Local Functions
 // ---------------------------------------------------------------------------
 
-#define dsi_set_cmdq_V2(cmd, count, ppara, force_update)	        lcm_util.dsi_set_cmdq_V2(cmd, count, ppara, force_update)
+#define dsi_set_cmdq_V2(cmd, count, ppara, force_update)	lcm_util.dsi_set_cmdq_V2(cmd, count, ppara, force_update)
 #define dsi_set_cmdq(pdata, queue_size, force_update)		lcm_util.dsi_set_cmdq(pdata, queue_size, force_update)
 #define wrtie_cmd(cmd)										lcm_util.dsi_write_cmd(cmd)
 #define write_regs(addr, pdata, byte_nums)					lcm_util.dsi_write_regs(addr, pdata, byte_nums)
 #define read_reg(cmd)											lcm_util.dsi_dcs_read_lcm_reg(cmd)
-#define read_reg_v2(cmd, buffer, buffer_size)   				lcm_util.dsi_dcs_read_lcm_reg_v2(cmd, buffer, buffer_size)    
+#define read_reg_v2(cmd, buffer, buffer_size)				lcm_util.dsi_dcs_read_lcm_reg_v2(cmd, buffer, buffer_size)
 
-struct LCM_setting_table {
-    unsigned char cmd;
+ struct LCM_setting_table {
+    unsigned cmd;
     unsigned char count;
     unsigned char para_list[64];
 };
 
-#if 0
+
 static struct LCM_setting_table lcm_initialization_setting[] = {
-	
-	/*
-	Note :
 
-	Data ID will depends on the following rule.
-	
-		count of parameters > 1	=> Data ID = 0x39
-		count of parameters = 1	=> Data ID = 0x15
-		count of parameters = 0	=> Data ID = 0x05
+	/*
+Note :
 
-	Structure Format :
+Data ID will depends on the following rule.
 
-	{DCS command, count of parameters, {parameter list}}
-	{REGFLAG_DELAY, milliseconds of time, {}},
+count of parameters > 1      => Data ID = 0x39
+count of parameters = 1      => Data ID = 0x15
+count of parameters = 0      => Data ID = 0x05
 
-	...
+Struclcm_deep_sleep_mode_in_settingture Format :
 
-	Setting ending by predefined flag
-	
-	{REGFLAG_END_OF_TABLE, 0x00, {}}
-	*/
+{DCS command, count of parameters, {parameter list}}
+{REGFLAG_DELAY, milliseconds of time, {}},
 
-	{0xC2,	1,	{0x08}},
-	{0xFF,	1,	{0x00}},
-	{0xBA,	1,	{0x02}},		// 3lane
-		
-	{0x11, 1, {0x00}},
-    {REGFLAG_DELAY, 120, {}},
+...
 
-    // Display ON
-	{0x29, 1, {0x00}},
-	{REGFLAG_END_OF_TABLE, 0x00, {}},
-	// Note
-	// Strongly recommend not to set Sleep out / Display On here. That will cause messed frame to be shown as later the backlight is on.
+Setting ending by predefined flag
 
+{REGFLAG_END_OF_TABLE, 0x00, {}}
+*/
 
-	// Setting ending by predefined flag
-	{REGFLAG_END_OF_TABLE, 0x00, {}}
+/**************************************************
+IC Name: RM68200
+Panel Maker/Size: INL499
+Panel Product No.: F050A13-603
+Version: V0
+Date: 20140819
+**************************************************/
+
+
+{0xFE,1,{0x01}},
+{0x24,1,{0xC0}},
+{0x25,1,{0x53}},
+{0x26,1,{0x00}},
+{0x2B,1,{0xE5}},
+{0x16,1,{0x52}},
+{0x2F,1,{0x5C}},
+{0x34,1,{0x57}},
+{0x1B,1,{0x00}},
+{0x12,1,{0x08}},
+{0x1A,1,{0x06}},
+{0x46,1,{0x76}},
+{0x52,1,{0x88}},
+{0x53,1,{0x00}},
+{0x54,1,{0x88}},
+{0x55,1,{0x00}},
+//{0x5F, 1,{0x12}},  // 4lane=0x13 3lane=0x12
+{0xFE,1,{0x03}},
+{0x00,1,{0x03}},
+{0x01,1,{0x14}},
+{0x02,1,{0x03}},
+{0x03,1,{0x00}},
+{0x04,1,{0x00}},
+{0x05,1,{0x00}},
+{0x06,1,{0x50}},
+{0x07,1,{0x00}},
+{0x08,1,{0x00}},
+{0x09,1,{0x00}},
+{0x0A,1,{0x00}},
+{0x0B,1,{0x00}},
+{0x0C,1,{0x00}},
+{0x0D,1,{0x00}},
+{0x0E,1,{0x05}},
+{0x0F,1,{0x06}},
+{0x10,1,{0x07}},
+{0x11,1,{0x08}},
+{0x12,1,{0x00}},
+{0x13,1,{0x00}},
+{0x14,1,{0x00}},
+{0x15,1,{0xC3}},
+{0x16,1,{0x08}},
+{0x17,1,{0x09}},
+{0x18,1,{0x0A}},
+{0x19,1,{0x0B}},
+{0x1A,1,{0x0C}},
+{0x1B,1,{0x00}},
+{0x1C,1,{0x00}},
+{0x1D,1,{0x00}},
+{0x1E,1,{0x83}},
+{0x1F,1,{0x08}},
+{0x20,1,{0x00}},
+{0x21,1,{0x00}},
+{0x22,1,{0x05}},
+{0x23,1,{0x12}},
+{0x24,1,{0x00}},
+{0x25,1,{0x28}},
+{0x26,1,{0x00}},
+{0x27,1,{0x16}},
+{0x28,1,{0x00}},
+{0x29,1,{0x28}},
+{0x2A,1,{0x00}},
+{0x2B,1,{0x00}},
+{0x2D,1,{0x00}},
+{0x2F,1,{0x00}},
+{0x30,1,{0x00}},
+{0x31,1,{0x00}},
+{0x32,1,{0x00}},
+{0x33,1,{0x00}},
+{0x34,1,{0x00}},
+{0x35,1,{0x00}},
+{0x36,1,{0x00}},
+{0x37,1,{0x00}},
+{0x38,1,{0x00}},
+{0x39,1,{0x00}},
+{0x3A,1,{0x00}},
+{0x3B,1,{0x00}},
+{0x3D,1,{0x00}},
+{0x3F,1,{0x00}},
+{0x40,1,{0x00}},
+{0x41,1,{0x00}},
+{0x42,1,{0x00}},
+{0x43,1,{0x00}},
+{0x44,1,{0x00}},
+{0x45,1,{0x00}},
+{0x46,1,{0x00}},
+{0x47,1,{0x00}},
+{0x48,1,{0x00}},
+{0x49,1,{0x00}},
+{0x4A,1,{0x00}},
+{0x4B,1,{0x00}},
+{0x4C,1,{0x00}},
+{0x4D,1,{0x00}},
+{0x4E,1,{0x00}},
+{0x4F,1,{0x00}},
+{0x50,1,{0x00}},
+{0x51,1,{0x00}},
+{0x52,1,{0x00}},
+{0x53,1,{0x00}},
+{0x54,1,{0x00}},
+{0x55,1,{0x00}},
+{0x56,1,{0x00}},
+{0x58,1,{0x00}},
+{0x59,1,{0x00}},
+{0x5A,1,{0x00}},
+{0x5B,1,{0x00}},
+{0x5C,1,{0x00}},
+{0x5D,1,{0x00}},
+{0x5E,1,{0x00}},
+{0x5F,1,{0x00}},
+{0x60,1,{0x00}},
+{0x61,1,{0x00}},
+{0x62,1,{0x00}},
+{0x63,1,{0x00}},
+{0x64,1,{0x00}},
+{0x65,1,{0x00}},
+{0x66,1,{0x00}},
+{0x67,1,{0x00}},
+{0x68,1,{0x00}},
+{0x69,1,{0x00}},
+{0x6A,1,{0x00}},
+{0x6B,1,{0x00}},
+{0x6C,1,{0x00}},
+{0x6D,1,{0x88}},
+{0x6E,1,{0x53}},
+{0x6F,1,{0x00}},
+{0x70,1,{0x00}},
+{0x71,1,{0x22}},
+{0x72,1,{0x00}},
+{0x73,1,{0x00}},
+{0x74,1,{0x01}},
+{0x75,1,{0x01}},
+{0x76,1,{0x01}},
+{0x77,1,{0x01}},
+{0x78,1,{0x00}},
+{0x79,1,{0x00}},
+{0x7A,1,{0x00}},
+{0x7B,1,{0x00}},
+{0x7C,1,{0x4A}},
+{0x7D,1,{0x80}},
+{0x7E,1,{0x8F}},
+{0x7F,1,{0x0D}},
+{0x80,1,{0x0B}},
+{0x81,1,{0x09}},
+{0x82,1,{0x01}},
+{0x83,1,{0x3F}},
+{0x84,1,{0x3F}},
+{0x85,1,{0x3F}},
+{0x86,1,{0x3F}},
+{0x87,1,{0x3F}},
+{0x88,1,{0x3F}},
+{0x89,1,{0x3F}},
+{0x8A,1,{0x3F}},
+{0x8B,1,{0x3F}},
+{0x8C,1,{0x3F}},
+{0x8D,1,{0x3F}},
+{0x8E,1,{0x3F}},
+{0x8F,1,{0x3F}},
+{0x90,1,{0x18}},
+{0x91,1,{0x19}},
+{0x92,1,{0x3F}},
+{0x93,1,{0x3F}},
+{0x94,1,{0x3F}},
+{0x95,1,{0x3F}},
+{0x96,1,{0x1B}},
+{0x97,1,{0x1A}},
+{0x98,1,{0x3F}},
+{0x99,1,{0x3F}},
+{0x9A,1,{0x3F}},
+{0x9B,1,{0x3F}},
+{0x9C,1,{0x3F}},
+{0x9D,1,{0x3F}},
+{0x9E,1,{0x3F}},
+{0x9F,1,{0x3F}},
+{0xA0,1,{0x3F}},
+{0xA2,1,{0x3F}},
+{0xA3,1,{0x3F}},
+{0xA4,1,{0x3F}},
+{0xA5,1,{0x3F}},
+{0xA6,1,{0x00}},
+{0xA7,1,{0x08}},
+{0xA9,1,{0x0A}},
+{0xAA,1,{0x0C}},
+{0xAB,1,{0x0E}},
+{0xAC,1,{0x0C}},
+{0xAD,1,{0x0E}},
+{0xAE,1,{0x08}},
+{0xAF,1,{0x0A}},
+{0xB0,1,{0x3F}},
+{0xB1,1,{0x00}},
+{0xB2,1,{0x3F}},
+{0xB3,1,{0x3F}},
+{0xB4,1,{0x3F}},
+{0xB5,1,{0x3F}},
+{0xB6,1,{0x3F}},
+{0xB7,1,{0x3F}},
+{0xB8,1,{0x3F}},
+{0xB9,1,{0x3F}},
+{0xBA,1,{0x3F}},
+{0xBB,1,{0x3F}},
+{0xBC,1,{0x3F}},
+{0xBD,1,{0x3F}},
+{0xBE,1,{0x18}},
+{0xBF,1,{0x19}},
+{0xC0,1,{0x3F}},
+{0xC1,1,{0x3F}},
+{0xC2,1,{0x3F}},
+{0xC3,1,{0x3F}},
+{0xC4,1,{0x1B}},
+{0xC5,1,{0x1A}},
+{0xC6,1,{0x3F}},
+{0xC7,1,{0x3F}},
+{0xC8,1,{0x3F}},
+{0xC9,1,{0x3F}},
+{0xCA,1,{0x3F}},
+{0xCB,1,{0x3F}},
+{0xCC,1,{0x3F}},
+{0xCD,1,{0x3F}},
+{0xCE,1,{0x3F}},
+{0xCF,1,{0x3F}},
+{0xD0,1,{0x3F}},
+{0xD1,1,{0x3F}},
+{0xD2,1,{0x01}},
+{0xD3,1,{0x3F}},
+{0xD4,1,{0x0B}},
+{0xD5,1,{0x09}},
+{0xD6,1,{0x0F}},
+{0xD7,1,{0x0D}},
+{0xDC,1,{0x02}},
+{0xDE,1,{0x0C}},
+{0xFE,1,{0x0E}},
+{0x01,1,{0x75}},
+{0xFE,1,{0x04}},
+{0x60,1,{0x00}},
+{0x61,1,{0x15}},
+{0x62,1,{0x1A}},
+{0x63,1,{0x0D}},
+{0x64,1,{0x06}},
+{0x65,1,{0x12}},
+{0x66,1,{0x0E}},
+{0x67,1,{0x0A}},
+{0x68,1,{0x16}},
+{0x69,1,{0x0B}},
+{0x6A,1,{0x10}},
+{0x6B,1,{0x08}},
+{0x6C,1,{0x11}},
+{0x6D,1,{0x13}},
+{0x6E,1,{0x0E}},
+{0x6F,1,{0x00}},
+{0x70,1,{0x00}},
+{0x71,1,{0x15}},
+{0x72,1,{0x1A}},
+{0x73,1,{0x0D}},
+{0x74,1,{0x06}},
+{0x75,1,{0x12}},
+{0x76,1,{0x0E}},
+{0x77,1,{0x0A}},
+{0x78,1,{0x16}},
+{0x79,1,{0x0B}},
+{0x7A,1,{0x10}},
+{0x7B,1,{0x08}},
+{0x7C,1,{0x11}},
+{0x7D,1,{0x13}},
+{0x7E,1,{0x0E}},
+{0x7F,1,{0x00}},
+{0xFE,1,{0x0B}},
+{0x21,1,{0x50}},
+{0x22,1,{0x50}},
+
+
+{REGFLAG_DELAY, 120, {}},
+{0x58, 1,{0xA9}},
+{0x11, 0,{0x00}},
+
+{REGFLAG_DELAY, 120, {}},
+{0x29, 0,{0x00}},
+{REGFLAG_DELAY, 50, {}},
+{0x35, 0,{0x00}},
+{REGFLAG_END_OF_TABLE, 0x00, {}}
 };
-#endif
 
 
-#if 0
-static struct LCM_setting_table lcm_set_window[] = {
-	{0x2A,	4,	{0x00, 0x00, (FRAME_WIDTH>>8), (FRAME_WIDTH&0xFF)}},
-	{0x2B,	4,	{0x00, 0x00, (FRAME_HEIGHT>>8), (FRAME_HEIGHT&0xFF)}},
-	{REGFLAG_END_OF_TABLE, 0x00, {}}
-};
-#endif
-#if 0
 static struct LCM_setting_table lcm_sleep_out_setting[] = {
-    // Sleep Out
+	// Sleep Out
 	{0x11, 1, {0x00}},
-    {REGFLAG_DELAY, 120, {}},
+	{REGFLAG_DELAY, 120, {}},
 
-    // Display ON
+	// Display ON
 	{0x29, 1, {0x00}},
+	{REGFLAG_DELAY, 10, {}},
+
 	{REGFLAG_END_OF_TABLE, 0x00, {}}
 };
 
 
-static struct LCM_setting_table lcm_deep_sleep_mode_in_setting[] = {
+static struct LCM_setting_table lcm_sleep_in_setting[] = {
 	// Display off sequence
-	{0x28, 1, {0x00}},
-	
+	{0x01, 1, {0x00}},
 	{REGFLAG_DELAY, 50, {}},
 	
-	 // Sleep Mode On
-	 {0x10, 1, {0x00}},
-	
-	 {REGFLAG_DELAY, 100, {}},
-	
-	 {0x4F, 1, {0x01}},
-	
-	 {REGFLAG_END_OF_TABLE, 0x00, {}}
-};
-#endif
-/*
-static struct LCM_setting_table lcm_compare_id_setting[] = {
-	// Display off sequence
-	{0xB9,	3,	{0xFF, 0x83, 0x69}},
-	{REGFLAG_DELAY, 10, {}},
+	{0x28, 1, {0x00}},
+	{REGFLAG_DELAY, 50, {}},
 
-    // Sleep Mode On
-//	{0xC3, 1, {0xFF}},
+	// Sleep Mode On
+	{0x10, 1, {0x00}},
+	{REGFLAG_DELAY, 50, {}},
 
 	{REGFLAG_END_OF_TABLE, 0x00, {}}
 };
-*/
-#if 0
-static struct LCM_setting_table lcm_backlight_level_setting[] = {
-	{0x51, 1, {0xFF}},
-	{REGFLAG_END_OF_TABLE, 0x00, {}}
-};
 
-static void push_table(struct LCM_setting_table *table, unsigned int count, unsigned char force_update)
+static void push_table(struct LCM_setting_table *table, unsigned int count,
+		unsigned char force_update)
 {
 	unsigned int i;
 
-    for(i = 0; i < count; i++) {
-		
-        unsigned cmd;
-        cmd = table[i].cmd;
-		
-        switch (cmd) {
-			
-            case REGFLAG_DELAY :
-                MDELAY(table[i].count);
-                break;
-				
-            case REGFLAG_END_OF_TABLE :
-                break;
-				
-            default:
-				dsi_set_cmdq_V2(cmd, table[i].count, table[i].para_list, force_update);				
-
-				if (cmd != 0xFF && cmd != 0x2C && cmd != 0x3C) {
-					//#if defined(BUILD_UBOOT)
-					//	printf("[DISP] - uboot - REG_R(0x%x) = 0x%x. \n", cmd, table[i].para_list[0]);
-					//#endif
-					while(read_reg(cmd) != table[i].para_list[0]);		
-				}
-       	}
-		
-    }
-	
-}
-#endif
+	for (i = 0; i < count; i++) {
 
-// ---------------------------------------------------------------------------
-//  LCM Driver Implementations
-// ---------------------------------------------------------------------------
+		unsigned cmd;
+		cmd = table[i].cmd;
 
-static void lcm_set_util_funcs(const LCM_UTIL_FUNCS *util)
-{
-    memcpy(&lcm_util, util, sizeof(LCM_UTIL_FUNCS));
-}
+		switch (cmd) {
 
+		case REGFLAG_DELAY:
+			MDELAY(table[i].count);
+			break;
 
-static void lcm_get_params(LCM_PARAMS *params)
-{
-		memset(params, 0, sizeof(LCM_PARAMS));
-	
-		params->type   = LCM_TYPE_DSI;
+		case REGFLAG_END_OF_TABLE:
+			break;
 
-		params->width  = FRAME_WIDTH;
-		params->height = FRAME_HEIGHT;
+		default:
+			dsi_set_cmdq_V2(cmd, table[i].count,
+					table[i].para_list, force_update);
+		}
+	}
 
-#if (LCM_DSI_CMD_MODE)
-		params->dsi.mode   = CMD_MODE;
-#else
-		params->dsi.mode   = BURST_VDO_MODE;
-#endif
-		// DSI
-		/* Command mode setting */
-		params->dsi.LANE_NUM				= LCM_THREE_LANE;
-		//The following defined the fomat for data coming from LCD engine.
-		params->dsi.data_format.format      = LCM_DSI_FORMAT_RGB888;
-		params->dsi.vertical_sync_active				= 4;// 3    2
-		params->dsi.vertical_backporch					= 4;// 20   1
-		params->dsi.vertical_frontporch					= 8; // 1  12
-		params->dsi.vertical_active_line				= FRAME_HEIGHT; 
-
-		params->dsi.horizontal_sync_active				= 5;// 50  2
-		params->dsi.horizontal_backporch				= 33;
-		params->dsi.horizontal_frontporch				= 386;
-		params->dsi.horizontal_active_pixel				= FRAME_WIDTH/2;
-
-		params->dsi.PS=LCM_PACKED_PS_24BIT_RGB888;
-		params->dsi.ufoe_enable = 1;
-		params->dsi.ssc_disable = 1;
-#if (LCM_DSI_CMD_MODE)
-		params->dsi.PLL_CLOCK = 160;
-#else
-//    params->dsi.PLL_CLOCK = 148;//dsi clock customization: should config clock value directly
-#endif
-		params->dsi.fbk_div = 10;
-		params->dsi.pll_div1 = 0x0;
-		params->dsi.pll_div2 = 0x0;
 }
 
-static void lcm_init(void)
-{
-	//int i;
-	//unsigned char buffer[10];
-	//unsigned int  array[16];
-	unsigned int data_array[16];
-
-		SET_RESET_PIN(1);
-		MDELAY(10); 
-		SET_RESET_PIN(0);
-		MDELAY(10); 
-		SET_RESET_PIN(1);
-		MDELAY(10);
-#if 0
-	data_array[0]=0x00023902;
-    data_array[1]=0x000001FE;
-	dsi_set_cmdq(data_array, 2, 1);
-
-	data_array[0]=0x00023902;
-    data_array[1]=0x00001327;
-	dsi_set_cmdq(data_array, 2, 1);
-
-	data_array[0]=0x00023902;
-    data_array[1]=0x00001328;
-	dsi_set_cmdq(data_array, 2, 1);
-
-	data_array[0]=0x00023902;
-    data_array[1]=0x00001329;
-	dsi_set_cmdq(data_array, 2, 1);
-
-	data_array[0]=0x00023902;
-    data_array[1]=0x0000132A;
-	dsi_set_cmdq(data_array, 2, 1);
-
-	data_array[0]=0x00023902;
-    data_array[1]=0x0000502F;
-	dsi_set_cmdq(data_array, 2, 1);
-
-	data_array[0]=0x00023902;
-    data_array[1]=0x00005A34;
-	dsi_set_cmdq(data_array, 2, 1);
-
-	data_array[0]=0x00023902;
-    data_array[1]=0x0000001B;
-	dsi_set_cmdq(data_array, 2, 1);
-
-	data_array[0]=0x00023902;
-    data_array[1]=0x00005216;
-	dsi_set_cmdq(data_array, 2, 1);
-
-	data_array[0]=0x00023902;
-    data_array[1]=0x00000812;
-	dsi_set_cmdq(data_array, 2, 1);
-
-	data_array[0]=0x00023902;
-    data_array[1]=0x0000061A;
-	dsi_set_cmdq(data_array, 2, 1);
-
-	data_array[0]=0x00023902;
-    data_array[1]=0x00002846;
-	dsi_set_cmdq(data_array, 2, 1);
-
-	data_array[0]=0x00023902;
-    data_array[1]=0x00006052;
-	dsi_set_cmdq(data_array, 2, 1);
-
-	data_array[0]=0x00023902;
-    data_array[1]=0x00000053;
-	dsi_set_cmdq(data_array, 2, 1);
-
-	data_array[0]=0x00023902;
-    data_array[1]=0x00006054;
-	dsi_set_cmdq(data_array, 2, 1);
-
-	data_array[0]=0x00023902;
-    data_array[1]=0x00000055;
-	dsi_set_cmdq(data_array, 2, 1);
-
-	data_array[0]=0x00023902;
-    data_array[1]=0x000003FE;
-	dsi_set_cmdq(data_array, 2, 1);
-
-	data_array[0]=0x00023902;
-    data_array[1]=0x00000500;
-	dsi_set_cmdq(data_array, 2, 1);
-
-	data_array[0]=0x00023902;
-    data_array[1]=0x00001601;
-	dsi_set_cmdq(data_array, 2, 1);
-
-	data_array[0]=0x00023902;
-    data_array[1]=0x00000102;
-	dsi_set_cmdq(data_array, 2, 1);
-
-	data_array[0]=0x00023902;
-    data_array[1]=0x00000503;
-	dsi_set_cmdq(data_array, 2, 1);
-
-	data_array[0]=0x00023902;
-    data_array[1]=0x00007D04;
-	dsi_set_cmdq(data_array, 2, 1);
-
-	data_array[0]=0x00023902;
-    data_array[1]=0x00000005;
-	dsi_set_cmdq(data_array, 2, 1);
-
-	data_array[0]=0x00023902;
-    data_array[1]=0x00005006;
-	dsi_set_cmdq(data_array, 2, 1);
-
-	data_array[0]=0x00023902;
-    data_array[1]=0x00000507;
-	dsi_set_cmdq(data_array, 2, 1);
-
-	data_array[0]=0x00023902;
-    data_array[1]=0x00001608;
-	dsi_set_cmdq(data_array, 2, 1);
-
-	data_array[0]=0x00023902;
-    data_array[1]=0x00000309;
-	dsi_set_cmdq(data_array, 2, 1);
-
-	data_array[0]=0x00023902;
-    data_array[1]=0x0000070A;
-	dsi_set_cmdq(data_array, 2, 1);
-
-	data_array[0]=0x00023902;
-    data_array[1]=0x00007D0B;
-	dsi_set_cmdq(data_array, 2, 1);
-
-	data_array[0]=0x00023902;
-    data_array[1]=0x0000000C;
-	dsi_set_cmdq(data_array, 2, 1);
-
-	data_array[0]=0x00023902;
-    data_array[1]=0x0000500D;
-	dsi_set_cmdq(data_array, 2, 1);
-
-	data_array[0]=0x00023902;
-    data_array[1]=0x0000050E;
-	dsi_set_cmdq(data_array, 2, 1);
-
-	data_array[0]=0x00023902;
-    data_array[1]=0x0000060F;
-	dsi_set_cmdq(data_array, 2, 1);
-
-	data_array[0]=0x00023902;
-    data_array[1]=0x00000710;
-	dsi_set_cmdq(data_array, 2, 1);
-
-	data_array[0]=0x00023902;
-    data_array[1]=0x00000811;
-	dsi_set_cmdq(data_array, 2, 1);
-
-	data_array[0]=0x00023902;
-    data_array[1]=0x00000012;
-	dsi_set_cmdq(data_array, 2, 1);
-
-	data_array[0]=0x00023902;
-    data_array[1]=0x00007D13;
-	dsi_set_cmdq(data_array, 2, 1);
-
-	data_array[0]=0x00023902;
-    data_array[1]=0x00000014;
-	dsi_set_cmdq(data_array, 2, 1);
-
-	data_array[0]=0x00023902;
-    data_array[1]=0x00008515;
-	dsi_set_cmdq(data_array, 2, 1);
-
-	data_array[0]=0x00023902;
-    data_array[1]=0x00000816;
-	dsi_set_cmdq(data_array, 2, 1);
-
-	data_array[0]=0x00023902;
-    data_array[1]=0x00000917;
-	dsi_set_cmdq(data_array, 2, 1);
-
-	data_array[0]=0x00023902;
-    data_array[1]=0x00000a18;
-	dsi_set_cmdq(data_array, 2, 1);
-
-	data_array[0]=0x00023902;
-    data_array[1]=0x00000B19;
-	dsi_set_cmdq(data_array, 2, 1);
-
-	data_array[0]=0x00023902;
-    data_array[1]=0x00000C1A;
-	dsi_set_cmdq(data_array, 2, 1);
-
-	data_array[0]=0x00023902;
-    data_array[1]=0x0000001B;
-	dsi_set_cmdq(data_array, 2, 1);
-
-	data_array[0]=0x00023902;
-    data_array[1]=0x00007D1C;
-	dsi_set_cmdq(data_array, 2, 1);
-
-	data_array[0]=0x00023902;
-    data_array[1]=0x0000001D;
-	dsi_set_cmdq(data_array, 2, 1);
-
-	data_array[0]=0x00023902;
-    data_array[1]=0x0000851E;
-	dsi_set_cmdq(data_array, 2, 1);
-
-	data_array[0]=0x00023902;
-    data_array[1]=0x0000081F;
-	dsi_set_cmdq(data_array, 2, 1);
-
-	data_array[0]=0x00023902;
-    data_array[1]=0x00000020;
-	dsi_set_cmdq(data_array, 2, 1);
-
-	data_array[0]=0x00023902;
-    data_array[1]=0x00000021;
-	dsi_set_cmdq(data_array, 2, 1);
-
-	data_array[0]=0x00023902;
-    data_array[1]=0x00000022;
-	dsi_set_cmdq(data_array, 2, 1);
-
-	data_array[0]=0x00023902;
-    data_array[1]=0x00000023;
-	dsi_set_cmdq(data_array, 2, 1);
-
-	data_array[0]=0x00023902;
-    data_array[1]=0x00000024;
-	dsi_set_cmdq(data_array, 2, 1);
-
-	data_array[0]=0x00023902;
-    data_array[1]=0x00000025;
-	dsi_set_cmdq(data_array, 2, 1);
-
-	data_array[0]=0x00023902;
-    data_array[1]=0x00000026;
-	dsi_set_cmdq(data_array, 2, 1);
-
-	data_array[0]=0x00023902;
-    data_array[1]=0x00000027;
-	dsi_set_cmdq(data_array, 2, 1);
-
-	data_array[0]=0x00023902;
-    data_array[1]=0x00000028;
-	dsi_set_cmdq(data_array, 2, 1);
-
-	data_array[0]=0x00023902;
-    data_array[1]=0x00000029;
-	dsi_set_cmdq(data_array, 2, 1);
-
-	data_array[0]=0x00023902;
-    data_array[1]=0x0000052a;
-	dsi_set_cmdq(data_array, 2, 1);
-
-	data_array[0]=0x00023902;
-    data_array[1]=0x0000062B;
-	dsi_set_cmdq(data_array, 2, 1);
-
-	data_array[0]=0x00023902;
-    data_array[1]=0x0000072D;
-	dsi_set_cmdq(data_array, 2, 1);
-
-	data_array[0]=0x00023902;
-    data_array[1]=0x0000082F;
-	dsi_set_cmdq(data_array, 2, 1);
-
-	data_array[0]=0x00023902;
-    data_array[1]=0x00000030;
-	dsi_set_cmdq(data_array, 2, 1);
-
-	data_array[0]=0x00023902;
-    data_array[1]=0x00004031;
-	dsi_set_cmdq(data_array, 2, 1);
 
-	data_array[0]=0x00023902;
-    data_array[1]=0x00000532;
-	dsi_set_cmdq(data_array, 2, 1);
-
-	data_array[0]=0x00023902;
-    data_array[1]=0x00000833;
-	dsi_set_cmdq(data_array, 2, 1);
-
-	data_array[0]=0x00023902;
-    data_array[1]=0x00005434;
-	dsi_set_cmdq(data_array, 2, 1);
-
-	data_array[0]=0x00023902;
-    data_array[1]=0x00007D35;
-	dsi_set_cmdq(data_array, 2, 1);
-
-	data_array[0]=0x00023902;
-    data_array[1]=0x00000036;
-	dsi_set_cmdq(data_array, 2, 1);
-
-	data_array[0]=0x00023902;
-    data_array[1]=0x00000937;
-	dsi_set_cmdq(data_array, 2, 1);
-
-	data_array[0]=0x00023902;
-    data_array[1]=0x00000A38;
-	dsi_set_cmdq(data_array, 2, 1);
-
-	data_array[0]=0x00023902;
-    data_array[1]=0x00000B39;
-	dsi_set_cmdq(data_array, 2, 1);
-
-	data_array[0]=0x00023902;
-    data_array[1]=0x00000C3A;
-	dsi_set_cmdq(data_array, 2, 1);
-
-	data_array[0]=0x00023902;
-    data_array[1]=0x0000003B;
-	dsi_set_cmdq(data_array, 2, 1);
-
-	data_array[0]=0x00023902;
-    data_array[1]=0x0000403D;
-	dsi_set_cmdq(data_array, 2, 1);
-
-	data_array[0]=0x00023902;
-    data_array[1]=0x0000053F;
-	dsi_set_cmdq(data_array, 2, 1);
-
-	data_array[0]=0x00023902;
-    data_array[1]=0x00000840;
-	dsi_set_cmdq(data_array, 2, 1);
-
-	data_array[0]=0x00023902;
-    data_array[1]=0x00005441;
-	dsi_set_cmdq(data_array, 2, 1);
-
-	data_array[0]=0x00023902;
-    data_array[1]=0x00007D42;
-	dsi_set_cmdq(data_array, 2, 1);
-
-	data_array[0]=0x00023902;
-    data_array[1]=0x00000043;
-	dsi_set_cmdq(data_array, 2, 1);
-
-	data_array[0]=0x00023902;
-    data_array[1]=0x00000044;
-	dsi_set_cmdq(data_array, 2, 1);
-
-	data_array[0]=0x00023902;
-    data_array[1]=0x00000045;
-	dsi_set_cmdq(data_array, 2, 1);
-
-	data_array[0]=0x00023902;
-    data_array[1]=0x00000046;
-	dsi_set_cmdq(data_array, 2, 1);
-
-	data_array[0]=0x00023902;
-    data_array[1]=0x00000047;
-	dsi_set_cmdq(data_array, 2, 1);
-
-	data_array[0]=0x00023902;
-    data_array[1]=0x00000048;
-	dsi_set_cmdq(data_array, 2, 1);
-
-	data_array[0]=0x00023902;
-    data_array[1]=0x00000049;
-	dsi_set_cmdq(data_array, 2, 1);
-
-	data_array[0]=0x00023902;
-    data_array[1]=0x0000004A;
-	dsi_set_cmdq(data_array, 2, 1);
-
-	data_array[0]=0x00023902;
-    data_array[1]=0x0000004B;
-	dsi_set_cmdq(data_array, 2, 1);
-
-	data_array[0]=0x00023902;
-    data_array[1]=0x0000004C;
-	dsi_set_cmdq(data_array, 2, 1);
-
-	data_array[0]=0x00023902;
-    data_array[1]=0x0000004D;
-	dsi_set_cmdq(data_array, 2, 1);
-
-	data_array[0]=0x00023902;
-    data_array[1]=0x0000004E;
-	dsi_set_cmdq(data_array, 2, 1);
-
-	data_array[0]=0x00023902;
-    data_array[1]=0x0000004F;
-	dsi_set_cmdq(data_array, 2, 1);
-
-	data_array[0]=0x00023902;
-    data_array[1]=0x00000050;
-	dsi_set_cmdq(data_array, 2, 1);
-
-	data_array[0]=0x00023902;
-    data_array[1]=0x00000051;
-	dsi_set_cmdq(data_array, 2, 1);
-
-	data_array[0]=0x00023902;
-    data_array[1]=0x00000052;
-	dsi_set_cmdq(data_array, 2, 1);
-
-	data_array[0]=0x00023902;
-    data_array[1]=0x00000053;
-	dsi_set_cmdq(data_array, 2, 1);
-
-	data_array[0]=0x00023902;
-    data_array[1]=0x00000054;
-	dsi_set_cmdq(data_array, 2, 1);
-
-	data_array[0]=0x00023902;
-    data_array[1]=0x00000055;
-	dsi_set_cmdq(data_array, 2, 1);
-
-	data_array[0]=0x00023902;
-    data_array[1]=0x00000056;
-	dsi_set_cmdq(data_array, 2, 1);
-
-	data_array[0]=0x00023902;
-    data_array[1]=0x00000058;
-	dsi_set_cmdq(data_array, 2, 1);
-
-	data_array[0]=0x00023902;
-    data_array[1]=0x00000059;
-	dsi_set_cmdq(data_array, 2, 1);
-
-	data_array[0]=0x00023902;
-    data_array[1]=0x0000005A;
-	dsi_set_cmdq(data_array, 2, 1);
-
-	data_array[0]=0x00023902;
-    data_array[1]=0x0000005B;
-	dsi_set_cmdq(data_array, 2, 1);
-
-	data_array[0]=0x00023902;
-    data_array[1]=0x0000005C;
-	dsi_set_cmdq(data_array, 2, 1);
+// ---------------------------------------------------------------------------
+//  LCM Driver Implementations
+// ---------------------------------------------------------------------------
 
-	data_array[0]=0x00023902;
-    data_array[1]=0x0000005D;
-	dsi_set_cmdq(data_array, 2, 1);
+static void lcm_set_util_funcs(const LCM_UTIL_FUNCS * util)
+{
+	memcpy(&lcm_util, util, sizeof(LCM_UTIL_FUNCS));
+}
 
-	data_array[0]=0x00023902;
-    data_array[1]=0x0000005E;
-	dsi_set_cmdq(data_array, 2, 1);
 
-	data_array[0]=0x00023902;
-    data_array[1]=0x0000005F;
-	dsi_set_cmdq(data_array, 2, 1);
+static void lcm_get_params(LCM_PARAMS * params)
+{
+	memset(params, 0, sizeof(LCM_PARAMS));
 
-	data_array[0]=0x00023902;
-    data_array[1]=0x00000060;
-	dsi_set_cmdq(data_array, 2, 1);
+	params->type = LCM_TYPE_DSI;
 
-	data_array[0]=0x00023902;
-    data_array[1]=0x00000061;
-	dsi_set_cmdq(data_array, 2, 1);
+	params->width = FRAME_WIDTH;
+	params->height = FRAME_HEIGHT;
 
-	data_array[0]=0x00023902;
-    data_array[1]=0x00000062;
-	dsi_set_cmdq(data_array, 2, 1);
+	// enable tearing-free
+	params->dbi.te_mode = LCM_DBI_TE_MODE_DISABLED;
+	params->dbi.te_edge_polarity = LCM_POLARITY_RISING;
 
-	data_array[0]=0x00023902;
-    data_array[1]=0x00000063;
-	dsi_set_cmdq(data_array, 2, 1);
-
-	data_array[0]=0x00023902;
-    data_array[1]=0x00000064;
-	dsi_set_cmdq(data_array, 2, 1);
-
-	data_array[0]=0x00023902;
-    data_array[1]=0x00000065;
-	dsi_set_cmdq(data_array, 2, 1);
-
-	data_array[0]=0x00023902;
-    data_array[1]=0x00000066;
-	dsi_set_cmdq(data_array, 2, 1);
-
-	data_array[0]=0x00023902;
-    data_array[1]=0x00000067;
-	dsi_set_cmdq(data_array, 2, 1);
-
-	data_array[0]=0x00023902;
-    data_array[1]=0x00000068;
-	dsi_set_cmdq(data_array, 2, 1);
-
-	data_array[0]=0x00023902;
-    data_array[1]=0x00000069;
-	dsi_set_cmdq(data_array, 2, 1);
-
-	data_array[0]=0x00023902;
-    data_array[1]=0x0000006A;
-	dsi_set_cmdq(data_array, 2, 1);
-
-	data_array[0]=0x00023902;
-    data_array[1]=0x0000006B;
-	dsi_set_cmdq(data_array, 2, 1);
-
-	data_array[0]=0x00023902;
-    data_array[1]=0x0000006C;
-	dsi_set_cmdq(data_array, 2, 1);
-
-	data_array[0]=0x00023902;
-    data_array[1]=0x0000006D;
-	dsi_set_cmdq(data_array, 2, 1);
-
-	data_array[0]=0x00023902;
-    data_array[1]=0x0000006E;
-	dsi_set_cmdq(data_array, 2, 1);
-
-	data_array[0]=0x00023902;
-    data_array[1]=0x0000006F;
-	dsi_set_cmdq(data_array, 2, 1);
-
-	data_array[0]=0x00023902;
-    data_array[1]=0x00000070;
-	dsi_set_cmdq(data_array, 2, 1);
-
-	data_array[0]=0x00023902;
-    data_array[1]=0x00000071;
-	dsi_set_cmdq(data_array, 2, 1);
-
-	data_array[0]=0x00023902;
-    data_array[1]=0x00002072;
-	dsi_set_cmdq(data_array, 2, 1);
-
-	data_array[0]=0x00023902;
-    data_array[1]=0x00000073;
-	dsi_set_cmdq(data_array, 2, 1);
-
-	data_array[0]=0x00023902;
-    data_array[1]=0x00000874;
-	dsi_set_cmdq(data_array, 2, 1);
-
-	data_array[0]=0x00023902;
-    data_array[1]=0x00000875;
-	dsi_set_cmdq(data_array, 2, 1);
-
-	data_array[0]=0x00023902;
-    data_array[1]=0x00000876;
-	dsi_set_cmdq(data_array, 2, 1);
-
-	data_array[0]=0x00023902;
-    data_array[1]=0x00000877;
-	dsi_set_cmdq(data_array, 2, 1);
-
-	data_array[0]=0x00023902;
-    data_array[1]=0x00000878;
-	dsi_set_cmdq(data_array, 2, 1);
-
-	data_array[0]=0x00023902;
-    data_array[1]=0x00000879;
-	dsi_set_cmdq(data_array, 2, 1);
-
-	data_array[0]=0x00023902;
-    data_array[1]=0x0000007A;
-	dsi_set_cmdq(data_array, 2, 1);
-
-	data_array[0]=0x00023902;
-    data_array[1]=0x0000007B;
-	dsi_set_cmdq(data_array, 2, 1);
-	data_array[0]=0x00023902;
-    data_array[1]=0x0000007C;
-	dsi_set_cmdq(data_array, 2, 1);
-	data_array[0]=0x00023902;
-    data_array[1]=0x0000007D;
-	dsi_set_cmdq(data_array, 2, 1);
-	data_array[0]=0x00023902;
-    data_array[1]=0x0000BF7e;
-	dsi_set_cmdq(data_array, 2, 1);
-	data_array[0]=0x00023902;
-    data_array[1]=0x00003F7F;
-	dsi_set_cmdq(data_array, 2, 1);
-	data_array[0]=0x00023902;
-    data_array[1]=0x00003F80;
-	dsi_set_cmdq(data_array, 2, 1);
-
-	data_array[0]=0x00023902;
-    data_array[1]=0x00003F81;
-	dsi_set_cmdq(data_array, 2, 1);
-	data_array[0]=0x00023902;
-    data_array[1]=0x00003F82;
-	dsi_set_cmdq(data_array, 2, 1);
-	data_array[0]=0x00023902;
-    data_array[1]=0x00003F83;
-	dsi_set_cmdq(data_array, 2, 1);
-	data_array[0]=0x00023902;
-    data_array[1]=0x00003F84;
-	dsi_set_cmdq(data_array, 2, 1);
-	data_array[0]=0x00023902;
-    data_array[1]=0x00000285;
-	dsi_set_cmdq(data_array, 2, 1);
-	data_array[0]=0x00023902;
-    data_array[1]=0x00000686;
-	dsi_set_cmdq(data_array, 2, 1);
-	data_array[0]=0x00023902;
-    data_array[1]=0x00003F87;
-	dsi_set_cmdq(data_array, 2, 1);
-	data_array[0]=0x00023902;
-    data_array[1]=0x00000888;
-	dsi_set_cmdq(data_array, 2, 1);
-	data_array[0]=0x00023902;
-    data_array[1]=0x00000C89;
-	dsi_set_cmdq(data_array, 2, 1);
-	data_array[0]=0x00023902;
-    data_array[1]=0x00000A8A;
-	dsi_set_cmdq(data_array, 2, 1);
-	data_array[0]=0x00023902;
-    data_array[1]=0x00000E8B;
-	dsi_set_cmdq(data_array, 2, 1);
-	data_array[0]=0x00023902;
-    data_array[1]=0x0000108C;
-	dsi_set_cmdq(data_array, 2, 1);
-	data_array[0]=0x00023902;
-    data_array[1]=0x0000148D;
-	dsi_set_cmdq(data_array, 2, 1);
-	data_array[0]=0x00023902;
-    data_array[1]=0x0000128E;
-	dsi_set_cmdq(data_array, 2, 1);
-	data_array[0]=0x00023902;
-    data_array[1]=0x0000168F;
-	dsi_set_cmdq(data_array, 2, 1);
-	data_array[0]=0x00023902;
-    data_array[1]=0x00000090;
-	dsi_set_cmdq(data_array, 2, 1);
-	data_array[0]=0x00023902;
-    data_array[1]=0x00000491;
-	dsi_set_cmdq(data_array, 2, 1);
-	data_array[0]=0x00023902;
-    data_array[1]=0x00003F92;
-	dsi_set_cmdq(data_array, 2, 1);
-	data_array[0]=0x00023902;
-    data_array[1]=0x00003F93;
-	dsi_set_cmdq(data_array, 2, 1);
-	data_array[0]=0x00023902;
-    data_array[1]=0x00003F94;
-	dsi_set_cmdq(data_array, 2, 1);
-	data_array[0]=0x00023902;
-    data_array[1]=0x00003F95;
-	dsi_set_cmdq(data_array, 2, 1);
-	data_array[0]=0x00023902;
-    data_array[1]=0x00000596;
-	dsi_set_cmdq(data_array, 2, 1);
-	data_array[0]=0x00023902;
-    data_array[1]=0x00000197;
-	dsi_set_cmdq(data_array, 2, 1);
-	data_array[0]=0x00023902;
-    data_array[1]=0x00001798;
-	dsi_set_cmdq(data_array, 2, 1);
-	data_array[0]=0x00023902;
-    data_array[1]=0x00001399;
-	dsi_set_cmdq(data_array, 2, 1);
-	data_array[0]=0x00023902;
-    data_array[1]=0x0000159A;
-	dsi_set_cmdq(data_array, 2, 1);
-	data_array[0]=0x00023902;
-    data_array[1]=0x0000119B;
-	dsi_set_cmdq(data_array, 2, 1);
-	data_array[0]=0x00023902;
-    data_array[1]=0x00000F9C;
-	dsi_set_cmdq(data_array, 2, 1);
-	data_array[0]=0x00023902;
-    data_array[1]=0x00000B9D;
-	dsi_set_cmdq(data_array, 2, 1);
-	data_array[0]=0x00023902;
-    data_array[1]=0x00000D9E;
-	dsi_set_cmdq(data_array, 2, 1);
-	data_array[0]=0x00023902;
-    data_array[1]=0x0000099F;
-	dsi_set_cmdq(data_array, 2, 1);
-	data_array[0]=0x00023902;
-    data_array[1]=0x00003FA0;
-	dsi_set_cmdq(data_array, 2, 1);
-	data_array[0]=0x00023902;
-    data_array[1]=0x000007A2;
-	dsi_set_cmdq(data_array, 2, 1);
-	data_array[0]=0x00023902;
-    data_array[1]=0x000003A3;
-	dsi_set_cmdq(data_array, 2, 1);
-	data_array[0]=0x00023902;
-    data_array[1]=0x00003FA4;
-	dsi_set_cmdq(data_array, 2, 1);
-	data_array[0]=0x00023902;
-    data_array[1]=0x00003FA5;
-	dsi_set_cmdq(data_array, 2, 1);
-	data_array[0]=0x00023902;
-    data_array[1]=0x00003FA6;
-	dsi_set_cmdq(data_array, 2, 1);
-	data_array[0]=0x00023902;
-    data_array[1]=0x00003FA7;
-	dsi_set_cmdq(data_array, 2, 1);
-	data_array[0]=0x00023902;
-    data_array[1]=0x00003FA9;
-	dsi_set_cmdq(data_array, 2, 1);
-	data_array[0]=0x00023902;
-    data_array[1]=0x00003FAA;
-	dsi_set_cmdq(data_array, 2, 1);
-	data_array[0]=0x00023902;
-    data_array[1]=0x00003FAB;
-	dsi_set_cmdq(data_array, 2, 1);
-	data_array[0]=0x00023902;
-    data_array[1]=0x00003FAC;
-	dsi_set_cmdq(data_array, 2, 1);
-	data_array[0]=0x00023902;
-    data_array[1]=0x00003FAD;
-	dsi_set_cmdq(data_array, 2, 1);
-	data_array[0]=0x00023902;
-    data_array[1]=0x00003FAE;
-	dsi_set_cmdq(data_array, 2, 1);
-	data_array[0]=0x00023902;
-    data_array[1]=0x00003FAF;
-	dsi_set_cmdq(data_array, 2, 1);
-	data_array[0]=0x00023902;
-    data_array[1]=0x00003FB0;
-	dsi_set_cmdq(data_array, 2, 1);
-	data_array[0]=0x00023902;
-    data_array[1]=0x00003FB1;
-	dsi_set_cmdq(data_array, 2, 1);
-	data_array[0]=0x00023902;
-    data_array[1]=0x00003FB2;
-	dsi_set_cmdq(data_array, 2, 1);
-	data_array[0]=0x00023902;
-    data_array[1]=0x000005B3;
-	dsi_set_cmdq(data_array, 2, 1);
-	data_array[0]=0x00023902;
-    data_array[1]=0x000001B4;
-	dsi_set_cmdq(data_array, 2, 1);
-	data_array[0]=0x00023902;
-    data_array[1]=0x00003FB5;
-	dsi_set_cmdq(data_array, 2, 1);
-	data_array[0]=0x00023902;
-    data_array[1]=0x00000FB6;
-	dsi_set_cmdq(data_array, 2, 1);
-	data_array[0]=0x00023902;
-    data_array[1]=0x00000BB7;
-	dsi_set_cmdq(data_array, 2, 1);
-	data_array[0]=0x00023902;
-    data_array[1]=0x00000DB8;
-	dsi_set_cmdq(data_array, 2, 1);
-	data_array[0]=0x00023902;
-    data_array[1]=0x000009B9;
-	dsi_set_cmdq(data_array, 2, 1);
-	data_array[0]=0x00023902;
-    data_array[1]=0x000013BA;
-	dsi_set_cmdq(data_array, 2, 1);
-	data_array[0]=0x00023902;
-    data_array[1]=0x000017BB;
-	dsi_set_cmdq(data_array, 2, 1);
-	data_array[0]=0x00023902;
-    data_array[1]=0x000011BC;
-	dsi_set_cmdq(data_array, 2, 1);
-	data_array[0]=0x00023902;
-    data_array[1]=0x000015BD;
-	dsi_set_cmdq(data_array, 2, 1);
-	data_array[0]=0x00023902;
-    data_array[1]=0x000007BE;
-	dsi_set_cmdq(data_array, 2, 1);
-	data_array[0]=0x00023902;
-    data_array[1]=0x000003BF;
-	dsi_set_cmdq(data_array, 2, 1);
-	data_array[0]=0x00023902;
-    data_array[1]=0x00003FC0;
-	dsi_set_cmdq(data_array, 2, 1);
-	data_array[0]=0x00023902;
-    data_array[1]=0x00003FC1;
-	dsi_set_cmdq(data_array, 2, 1);
-	data_array[0]=0x00023902;
-    data_array[1]=0x00003FC2;
-	dsi_set_cmdq(data_array, 2, 1);
-	data_array[0]=0x00023902;
-    data_array[1]=0x00003FC3;
-	dsi_set_cmdq(data_array, 2, 1);
-	data_array[0]=0x00023902;
-    data_array[1]=0x000002C4;
-	dsi_set_cmdq(data_array, 2, 1);
-	data_array[0]=0x00023902;
-    data_array[1]=0x000006C5;
-	dsi_set_cmdq(data_array, 2, 1);
-	data_array[0]=0x00023902;
-    data_array[1]=0x000014C6;
-	dsi_set_cmdq(data_array, 2, 1);
-	data_array[0]=0x00023902;
-    data_array[1]=0x000010C7;
-	dsi_set_cmdq(data_array, 2, 1);
-	data_array[0]=0x00023902;
-    data_array[1]=0x000016C8;
-	dsi_set_cmdq(data_array, 2, 1);
-	data_array[0]=0x00023902;
-    data_array[1]=0x000012C9;
-	dsi_set_cmdq(data_array, 2, 1);
-	data_array[0]=0x00023902;
-    data_array[1]=0x000008CA;
-	dsi_set_cmdq(data_array, 2, 1);
-	data_array[0]=0x00023902;
-    data_array[1]=0x00000CCB;
-	dsi_set_cmdq(data_array, 2, 1);
-	data_array[0]=0x00023902;
-    data_array[1]=0x00000ACC;
-	dsi_set_cmdq(data_array, 2, 1);
-	data_array[0]=0x00023902;
-    data_array[1]=0x00000ECD;
-	dsi_set_cmdq(data_array, 2, 1);
-	data_array[0]=0x00023902;
-    data_array[1]=0x00003FCE;
-	dsi_set_cmdq(data_array, 2, 1);
-	data_array[0]=0x00023902;
-    data_array[1]=0x000000CF;
-	dsi_set_cmdq(data_array, 2, 1);
-	data_array[0]=0x00023902;
-    data_array[1]=0x000004D0;
-	dsi_set_cmdq(data_array, 2, 1);
-	data_array[0]=0x00023902;
-    data_array[1]=0x00003FD1;
-	dsi_set_cmdq(data_array, 2, 1);
-	data_array[0]=0x00023902;
-    data_array[1]=0x00003FD2;
-	dsi_set_cmdq(data_array, 2, 1);
-	data_array[0]=0x00023902;
-    data_array[1]=0x00003FD3;
-	dsi_set_cmdq(data_array, 2, 1);
-	data_array[0]=0x00023902;
-    data_array[1]=0x00003FD4;
-	dsi_set_cmdq(data_array, 2, 1);
-	data_array[0]=0x00023902;
-    data_array[1]=0x00003FD5;
-	dsi_set_cmdq(data_array, 2, 1);
-	data_array[0]=0x00023902;
-    data_array[1]=0x00003FD6;
-	dsi_set_cmdq(data_array, 2, 1);
-	data_array[0]=0x00023902;
-    data_array[1]=0x00003FD7;
-	dsi_set_cmdq(data_array, 2, 1);
-
-	data_array[0]=0x00023902;
-    data_array[1]=0x000004FE;
-	dsi_set_cmdq(data_array, 2, 1);
-
-	data_array[0]=0x00023902;
-    data_array[1]=0x00000060;
-	dsi_set_cmdq(data_array, 2, 1);
-	data_array[0]=0x00023902;
-    data_array[1]=0x00001261;
-	dsi_set_cmdq(data_array, 2, 1);
-	data_array[0]=0x00023902;
-    data_array[1]=0x00001962;
-	dsi_set_cmdq(data_array, 2, 1);
-	data_array[0]=0x00023902;
-    data_array[1]=0x00000E63;
-	dsi_set_cmdq(data_array, 2, 1);
-	data_array[0]=0x00023902;
-    data_array[1]=0x00000664;
-	dsi_set_cmdq(data_array, 2, 1);
-	data_array[0]=0x00023902;
-    data_array[1]=0x00001465;
-	dsi_set_cmdq(data_array, 2, 1);
-	data_array[0]=0x00023902;
-    data_array[1]=0x00001066;
-	dsi_set_cmdq(data_array, 2, 1);
-	data_array[0]=0x00023902;
-    data_array[1]=0x00000C67;
-	dsi_set_cmdq(data_array, 2, 1);
-	data_array[0]=0x00023902;
-    data_array[1]=0x00001668;
-	dsi_set_cmdq(data_array, 2, 1);
-	data_array[0]=0x00023902;
-    data_array[1]=0x00000C69;
-	dsi_set_cmdq(data_array, 2, 1);
-	data_array[0]=0x00023902;
-    data_array[1]=0x00000E6A;
-	dsi_set_cmdq(data_array, 2, 1);
-	data_array[0]=0x00023902;
-    data_array[1]=0x0000086B;
-	dsi_set_cmdq(data_array, 2, 1);
-	data_array[0]=0x00023902;
-    data_array[1]=0x00000F6C;
-	dsi_set_cmdq(data_array, 2, 1);
-	data_array[0]=0x00023902;
-    data_array[1]=0x0000116D;
-	dsi_set_cmdq(data_array, 2, 1);
-	data_array[0]=0x00023902;
-    data_array[1]=0x00000C6E;
-	dsi_set_cmdq(data_array, 2, 1);
-	data_array[0]=0x00023902;
-    data_array[1]=0x0000006F;
-	dsi_set_cmdq(data_array, 2, 1);
-	data_array[0]=0x00023902;
-    data_array[1]=0x00000070;
-	dsi_set_cmdq(data_array, 2, 1);
-	data_array[0]=0x00023902;
-    data_array[1]=0x00001271;
-	dsi_set_cmdq(data_array, 2, 1);
-	data_array[0]=0x00023902;
-    data_array[1]=0x00001972;
-	dsi_set_cmdq(data_array, 2, 1);
-	data_array[0]=0x00023902;
-    data_array[1]=0x00000E73;
-	dsi_set_cmdq(data_array, 2, 1);
-	data_array[0]=0x00023902;
-    data_array[1]=0x00000674;
-	dsi_set_cmdq(data_array, 2, 1);
-	data_array[0]=0x00023902;
-    data_array[1]=0x00001475;
-	dsi_set_cmdq(data_array, 2, 1);
-	data_array[0]=0x00023902;
-    data_array[1]=0x00001076;
-	dsi_set_cmdq(data_array, 2, 1);
-	data_array[0]=0x00023902;
-    data_array[1]=0x00000C77;
-	dsi_set_cmdq(data_array, 2, 1);
-	data_array[0]=0x00023902;
-    data_array[1]=0x00001678;
-	dsi_set_cmdq(data_array, 2, 1);
-	data_array[0]=0x00023902;
-    data_array[1]=0x00000C79;
-	dsi_set_cmdq(data_array, 2, 1);
-	data_array[0]=0x00023902;
-    data_array[1]=0x00000E7A;
-	dsi_set_cmdq(data_array, 2, 1);
-	data_array[0]=0x00023902;
-    data_array[1]=0x0000087B;
-	dsi_set_cmdq(data_array, 2, 1);
-	data_array[0]=0x00023902;
-    data_array[1]=0x00000F7C;
-	dsi_set_cmdq(data_array, 2, 1);
-	data_array[0]=0x00023902;
-    data_array[1]=0x0000117D;
-	dsi_set_cmdq(data_array, 2, 1);
-	data_array[0]=0x00023902;
-    data_array[1]=0x00000C7E;
-	dsi_set_cmdq(data_array, 2, 1);
-	data_array[0]=0x00023902;
-    data_array[1]=0x0000007F;
-	dsi_set_cmdq(data_array, 2, 1);
-
-	data_array[0]=0x00023902;
-    data_array[1]=0x000006FE;
-	dsi_set_cmdq(data_array, 2, 1);
-	data_array[0]=0x00023902;
-    data_array[1]=0x00004F15;
-	dsi_set_cmdq(data_array, 2, 1);
-	data_array[0]=0x00023902;
-    data_array[1]=0x00004D4C;
-	dsi_set_cmdq(data_array, 2, 1);
-	data_array[0]=0x00023902;
-    data_array[1]=0x000007FE;
-	dsi_set_cmdq(data_array, 2, 1);
-	
-	data_array[0]=0x00023902;
-    data_array[1]=0x0000400F;
-	dsi_set_cmdq(data_array, 2, 1);
-
-	data_array[0]=0x00023902;
-    data_array[1]=0x000007CC;
-
-//select mtk's ufod
-      data_array[0]=0x000A1500;
-      dsi_set_cmdq(data_array, 1, 1);
- //vlc enable at bit7    
-      data_array[0]=0x000B1500;
-      dsi_set_cmdq(data_array, 1, 1);
- //cfg[31:24]
-      data_array[0]=0x000C1500;
-      dsi_set_cmdq(data_array, 1, 1);
- //cfg[23:16]
-      data_array[0]=0x000D1500;
-      dsi_set_cmdq(data_array, 1, 1);
- //cfg[15:8]
-      data_array[0]=0x010E1500;
-      dsi_set_cmdq(data_array, 1, 1);
- //cfg[7:0]
-
-
-	dsi_set_cmdq(data_array, 2, 1);
-	data_array[0]=0x00023902;
-    data_array[1]=0x000015B0;
-	dsi_set_cmdq(data_array, 2, 1);
-	data_array[0]=0x00023902;
-    data_array[1]=0x000059B2;
-	dsi_set_cmdq(data_array, 2, 1);
-	data_array[0]=0x00023902;
-    data_array[1]=0x0000BFB4;
-	dsi_set_cmdq(data_array, 2, 1);
-
-	data_array[0]=0x00023902;
-    data_array[1]=0x000000FE;
-	dsi_set_cmdq(data_array, 2, 1);
-
-	data_array[0]=0x00023902;
-    data_array[1]=0x0000A958;
-	dsi_set_cmdq(data_array, 2, 1);
-	
-	data_array[0]=0x00023902;
 #if (LCM_DSI_CMD_MODE)
-	  	data_array[1]=0x000008C2;//cmd mode
+	params->dsi.mode = CMD_MODE;
 #else
-			data_array[1]=0x00000BC2;//video mode
+	params->dsi.mode   = SYNC_PULSE_VDO_MODE;//SYNC_EVENT_VDO_MODE;//BURST_VDO_MODE;////
 #endif
-	dsi_set_cmdq(data_array, 2, 1);
-			data_array[0] = 0x00033902;
-			data_array[1] = (((FRAME_HEIGHT/2)&0xFF) << 16) | (((FRAME_HEIGHT/2)>>8) << 8) | 0x44;
-			dsi_set_cmdq(data_array, 2, 1);
-	
-      data_array[0]=0x00351500;
-      dsi_set_cmdq(data_array, 1, 1);
-
-	data_array[0]=0x00110500;
-	dsi_set_cmdq(data_array, 1, 1);
-	MDELAY(120);
 
-	data_array[0]=0x00290500;
-	dsi_set_cmdq(data_array, 1, 1);
+	// DSI
+	/* Command mode setting */
+		params->dsi.LANE_NUM				= LCM_THREE_LANE;
+	
+	//The following defined the fomat for data coming from LCD engine.
+	params->dsi.data_format.color_order = LCM_COLOR_ORDER_RGB;
+	params->dsi.data_format.trans_seq   = LCM_DSI_TRANS_SEQ_MSB_FIRST;
+	params->dsi.data_format.padding     = LCM_DSI_PADDING_ON_LSB;
+	params->dsi.data_format.format      = LCM_DSI_FORMAT_RGB888;
+	
+	
+	params->dsi.PS=LCM_PACKED_PS_24BIT_RGB888;
+	
+#if (LCM_DSI_CMD_MODE)
+	params->dsi.intermediat_buffer_num = 0;//because DSI/DPI HW design change, this parameters should be 0 when video mode in MT658X; or memory leakage
+	params->dsi.word_count=FRAME_WIDTH*3;	//DSI CMD mode need set these two bellow params, different to 6577
 #else
-#if 1
-      data_array[0]=0x07FE1500;
-      dsi_set_cmdq(data_array, 1, 1);
- //engineering mode
-      data_array[0]=0x5D031500;
-      dsi_set_cmdq(data_array, 1, 1);
-#endif	
-	  data_array[0]=0x01FE1500;
-      dsi_set_cmdq(data_array, 1, 1);
-#if 1
-      data_array[0]=0x760A1500;
-      dsi_set_cmdq(data_array, 1, 1);
-
-      data_array[0]=0x880B1500;
-      dsi_set_cmdq(data_array, 1, 1);
+	params->dsi.intermediat_buffer_num = 0;	//because DSI/DPI HW design change, this parameters should be 0 when video mode in MT658X; or memory leakage
 #endif
-      data_array[0]=0x0F271500;
-      dsi_set_cmdq(data_array, 1, 1);
-
-      data_array[0]=0x0F281500;
-      dsi_set_cmdq(data_array, 1, 1);
 
-      data_array[0]=0x0F291500;
-      dsi_set_cmdq(data_array, 1, 1);
+	// Video mode setting
+	params->dsi.packet_size=256;
 
-      data_array[0]=0x0F2A1500;
-      dsi_set_cmdq(data_array, 1, 1);
+	params->dsi.vertical_sync_active				=  2;//4
+	params->dsi.vertical_backporch					= 14;//50;
+	params->dsi.vertical_frontporch					= 16;//50;
+	params->dsi.vertical_active_line				= FRAME_HEIGHT; 
 
-      data_array[0]=0x08121500;
-      dsi_set_cmdq(data_array, 1, 1);
+	params->dsi.horizontal_sync_active				= 4;//10
+	params->dsi.horizontal_backporch				= 16;//34; 
+	params->dsi.horizontal_frontporch				= 8;//24;
+	params->dsi.horizontal_active_pixel				= FRAME_WIDTH;
 
-      data_array[0]=0x28461500;
-      dsi_set_cmdq(data_array, 1, 1);
-
-      data_array[0]=0x221B1500;
-      dsi_set_cmdq(data_array, 1, 1);
-
-      data_array[0]=0x210E1500;
-      dsi_set_cmdq(data_array, 1, 1);
-
-      data_array[0]=0x03FE1500;
-      dsi_set_cmdq(data_array, 1, 1);
-
-      data_array[0]=0x05001500;
-      dsi_set_cmdq(data_array, 1, 1);
-
-      data_array[0]=0x16011500;
-      dsi_set_cmdq(data_array, 1, 1);
-   
-      data_array[0]=0x01021500;
-      dsi_set_cmdq(data_array, 1, 1);
-    
-      data_array[0]=0x05031500;
-      dsi_set_cmdq(data_array, 1, 1);
-    
-      data_array[0]=0x7D041500;
-      dsi_set_cmdq(data_array, 1, 1);
-   
-      data_array[0]=0x00051500;
-      dsi_set_cmdq(data_array, 1, 1);
-   
-      data_array[0]=0x50061500;
-      dsi_set_cmdq(data_array, 1, 1);
-    
-      data_array[0]=0x05071500;
-      dsi_set_cmdq(data_array, 1, 1);
-    
-      data_array[0]=0x16081500;
-      dsi_set_cmdq(data_array, 1, 1);
-    
-      data_array[0]=0x03091500;
-      dsi_set_cmdq(data_array, 1, 1);
-    
-      data_array[0]=0x070A1500;
-      dsi_set_cmdq(data_array, 1, 1);
-    
-      data_array[0]=0x7D0B1500;
-      dsi_set_cmdq(data_array, 1, 1);
-    
-      data_array[0]=0x000C1500;
-      dsi_set_cmdq(data_array, 1, 1);
-   
-      data_array[0]=0x500D1500;
-      dsi_set_cmdq(data_array, 1, 1);
-   
-      data_array[0]=0x050E1500;
-      dsi_set_cmdq(data_array, 1, 1);
-   
-      data_array[0]=0x060F1500;
-      dsi_set_cmdq(data_array, 1, 1);
-    
-      data_array[0]=0x07101500;
-      dsi_set_cmdq(data_array, 1, 1);
-    
-      data_array[0]=0x08111500;
-      dsi_set_cmdq(data_array, 1, 1);
-    
-      data_array[0]=0x00121500;
-      dsi_set_cmdq(data_array, 1, 1);
-   
-      data_array[0]=0x7D131500;
-      dsi_set_cmdq(data_array, 1, 1);
-   
-      data_array[0]=0x00141500;
-      dsi_set_cmdq(data_array, 1, 1);
-    
-      data_array[0]=0x85151500;
-      dsi_set_cmdq(data_array, 1, 1);
-    
-      data_array[0]=0x08161500;
-      dsi_set_cmdq(data_array, 1, 1);
-   
-      data_array[0]=0x09171500;
-      dsi_set_cmdq(data_array, 1, 1);
-   
-      data_array[0]=0x0A181500;
-      dsi_set_cmdq(data_array, 1, 1);
-   
-      data_array[0]=0x0B191500;
-      dsi_set_cmdq(data_array, 1, 1);
-  
-      data_array[0]=0x0C1A1500;
-      dsi_set_cmdq(data_array, 1, 1);
-   
-      data_array[0]=0x001B1500;
-      dsi_set_cmdq(data_array, 1, 1);
-
-      data_array[0]=0x7D1C1500;
-      dsi_set_cmdq(data_array, 1, 1);
- 
-      data_array[0]=0x001D1500;
-      dsi_set_cmdq(data_array, 1, 1);
-    
-      data_array[0]=0x851E1500;
-      dsi_set_cmdq(data_array, 1, 1);
-    
-      data_array[0]=0x081F1500;
-      dsi_set_cmdq(data_array, 1, 1);
-    
-      data_array[0]=0x00201500;
-      dsi_set_cmdq(data_array, 1, 1);
-    
-      data_array[0]=0x00211500;
-      dsi_set_cmdq(data_array, 1, 1);
-   
-      data_array[0]=0x00221500;
-      dsi_set_cmdq(data_array, 1, 1);
-    
-      data_array[0]=0x00231500;
-      dsi_set_cmdq(data_array, 1, 1);
-    
-      data_array[0]=0x00241500;
-      dsi_set_cmdq(data_array, 1, 1);
-    
-      data_array[0]=0x00251500;
-      dsi_set_cmdq(data_array, 1, 1);
-   
-      data_array[0]=0x00261500;
-      dsi_set_cmdq(data_array, 1, 1);
-    
-      data_array[0]=0x00271500;
-      dsi_set_cmdq(data_array, 1, 1);
-   
-      data_array[0]=0x00281500;
-      dsi_set_cmdq(data_array, 1, 1);
-    
-      data_array[0]=0x00291500;
-      dsi_set_cmdq(data_array, 1, 1);
-    
-      data_array[0]=0x052A1500;
-      dsi_set_cmdq(data_array, 1, 1);
-    
-      data_array[0]=0x062B1500;
-      dsi_set_cmdq(data_array, 1, 1);
-    
-      data_array[0]=0x072D1500;
-      dsi_set_cmdq(data_array, 1, 1);
-    
-      data_array[0]=0x082F1500;
-      dsi_set_cmdq(data_array, 1, 1);
-    
-      data_array[0]=0x00301500;
-      dsi_set_cmdq(data_array, 1, 1);
-    
-      data_array[0]=0x40311500;
-      dsi_set_cmdq(data_array, 1, 1);
-    
-      data_array[0]=0x05321500;
-      dsi_set_cmdq(data_array, 1, 1);
-    
-      data_array[0]=0x08331500;
-      dsi_set_cmdq(data_array, 1, 1);
-   
-      data_array[0]=0x54341500;
-      dsi_set_cmdq(data_array, 1, 1);
-   
-      data_array[0]=0x7D351500;
-      dsi_set_cmdq(data_array, 1, 1);
-    
-      data_array[0]=0x00361500;
-      dsi_set_cmdq(data_array, 1, 1);
-   
-      data_array[0]=0x09371500;
-      dsi_set_cmdq(data_array, 1, 1);
-    
-      data_array[0]=0x0A381500;
-      dsi_set_cmdq(data_array, 1, 1);
-    
-      data_array[0]=0x0B391500;
-      dsi_set_cmdq(data_array, 1, 1);
-    
-      data_array[0]=0x0C3A1500;
-      dsi_set_cmdq(data_array, 1, 1);
-    
-      data_array[0]=0x003B1500;
-      dsi_set_cmdq(data_array, 1, 1);
-    
-      data_array[0]=0x403D1500;
-      dsi_set_cmdq(data_array, 1, 1);
-    
-      data_array[0]=0x053F1500;
-      dsi_set_cmdq(data_array, 1, 1);
-    
-      data_array[0]=0x08401500;
-      dsi_set_cmdq(data_array, 1, 1);
-    
-      data_array[0]=0x54411500;
-      dsi_set_cmdq(data_array, 1, 1);
-   
-      data_array[0]=0x7D421500;
-      dsi_set_cmdq(data_array, 1, 1);
-   
-      data_array[0]=0x00431500;
-      dsi_set_cmdq(data_array, 1, 1);
-    
-      data_array[0]=0x00441500;
-      dsi_set_cmdq(data_array, 1, 1);
-   
-      data_array[0]=0x00451500;
-      dsi_set_cmdq(data_array, 1, 1);
-    
-      data_array[0]=0x00461500;
-      dsi_set_cmdq(data_array, 1, 1);
-    
-      data_array[0]=0x00471500;
-      dsi_set_cmdq(data_array, 1, 1);
-   
-      data_array[0]=0x00481500;
-      dsi_set_cmdq(data_array, 1, 1);
-    
-      data_array[0]=0x00491500;
-      dsi_set_cmdq(data_array, 1, 1);
-   
-      data_array[0]=0x004A1500;
-      dsi_set_cmdq(data_array, 1, 1);
-    
-      data_array[0]=0x004B1500;
-      dsi_set_cmdq(data_array, 1, 1);
-    
-      data_array[0]=0x004C1500;
-      dsi_set_cmdq(data_array, 1, 1);
-   
-      data_array[0]=0x004D1500;
-      dsi_set_cmdq(data_array, 1, 1);
-    
-      data_array[0]=0x004E1500;
-      dsi_set_cmdq(data_array, 1, 1);
-    
-      data_array[0]=0x004F1500;
-      dsi_set_cmdq(data_array, 1, 1);
-   
-      data_array[0]=0x00501500;
-      dsi_set_cmdq(data_array, 1, 1);
-    
-      data_array[0]=0x00511500;
-      dsi_set_cmdq(data_array, 1, 1);
-   
-      data_array[0]=0x00521500;
-      dsi_set_cmdq(data_array, 1, 1);
-   
-      data_array[0]=0x00531500;
-      dsi_set_cmdq(data_array, 1, 1);
-   
-      data_array[0]=0x00541500;
-      dsi_set_cmdq(data_array, 1, 1);
-   
-      data_array[0]=0x00551500;
-      dsi_set_cmdq(data_array, 1, 1);
-    
-      data_array[0]=0x00561500;
-      dsi_set_cmdq(data_array, 1, 1);
-    
-      data_array[0]=0x00581500;
-      dsi_set_cmdq(data_array, 1, 1);
-    
-      data_array[0]=0x00591500;
-      dsi_set_cmdq(data_array, 1, 1);
-    
-      data_array[0]=0x005A1500;
-      dsi_set_cmdq(data_array, 1, 1);
-    
-      data_array[0]=0x005B1500;
-      dsi_set_cmdq(data_array, 1, 1);
-    
-      data_array[0]=0x005C1500;
-      dsi_set_cmdq(data_array, 1, 1);
-    
-      data_array[0]=0x005D1500;
-      dsi_set_cmdq(data_array, 1, 1);
-    
-      data_array[0]=0x005E1500;
-      dsi_set_cmdq(data_array, 1, 1);
-    
-      data_array[0]=0x005F1500;
-      dsi_set_cmdq(data_array, 1, 1);
-   
-      data_array[0]=0x00601500;
-      dsi_set_cmdq(data_array, 1, 1);
-    
-      data_array[0]=0x00611500;
-      dsi_set_cmdq(data_array, 1, 1);
-    
-      data_array[0]=0x00621500;
-      dsi_set_cmdq(data_array, 1, 1);
-   
-      data_array[0]=0x00631500;
-      dsi_set_cmdq(data_array, 1, 1);
-   
-      data_array[0]=0x00641500;
-      dsi_set_cmdq(data_array, 1, 1);
-   
-      data_array[0]=0x00651500;
-      dsi_set_cmdq(data_array, 1, 1);
-   
-      data_array[0]=0x00661500;
-      dsi_set_cmdq(data_array, 1, 1);
-   
-      data_array[0]=0x00671500;
-      dsi_set_cmdq(data_array, 1, 1);
-    
-      data_array[0]=0x00681500;
-      dsi_set_cmdq(data_array, 1, 1);
-    
-      data_array[0]=0x00691500;
-      dsi_set_cmdq(data_array, 1, 1);
-    
-      data_array[0]=0x006A1500;
-      dsi_set_cmdq(data_array, 1, 1);
-    
-      data_array[0]=0x006B1500;
-      dsi_set_cmdq(data_array, 1, 1);
-    
-      data_array[0]=0x006C1500;
-      dsi_set_cmdq(data_array, 1, 1);
-    
-      data_array[0]=0x006D1500;
-      dsi_set_cmdq(data_array, 1, 1);
-    
-      data_array[0]=0x006E1500;
-      dsi_set_cmdq(data_array, 1, 1);
-   
-      data_array[0]=0x006F1500;
-      dsi_set_cmdq(data_array, 1, 1);
-   
-      data_array[0]=0x00701500;
-      dsi_set_cmdq(data_array, 1, 1);
-  
-      data_array[0]=0x00711500;
-      dsi_set_cmdq(data_array, 1, 1);
-   
-      data_array[0]=0x20721500;
-      dsi_set_cmdq(data_array, 1, 1);
-   
-      data_array[0]=0x00731500;
-      dsi_set_cmdq(data_array, 1, 1);
-  
-      data_array[0]=0x00741500;
-      dsi_set_cmdq(data_array, 1, 1);
-   
-      data_array[0]=0x00751500;
-      dsi_set_cmdq(data_array, 1, 1);
-   
-      data_array[0]=0x00761500;
-      dsi_set_cmdq(data_array, 1, 1);
-   
-      data_array[0]=0x00771500;
-      dsi_set_cmdq(data_array, 1, 1);
-   
-      data_array[0]=0x00781500;
-      dsi_set_cmdq(data_array, 1, 1);
-    
-      data_array[0]=0x00791500;
-      dsi_set_cmdq(data_array, 1, 1);
-   
-      data_array[0]=0x007A1500;
-      dsi_set_cmdq(data_array, 1, 1);
-    
-      data_array[0]=0x007B1500;
-      dsi_set_cmdq(data_array, 1, 1);
-   
-      data_array[0]=0x007C1500;
-      dsi_set_cmdq(data_array, 1, 1);
-   
-      data_array[0]=0x007D1500;
-      dsi_set_cmdq(data_array, 1, 1);
-    
-      data_array[0]=0xBF7E1500;
-      dsi_set_cmdq(data_array, 1, 1);
-    
-      data_array[0]=0x3F7F1500;
-      dsi_set_cmdq(data_array, 1, 1);
-    
-      data_array[0]=0x3F801500;
-      dsi_set_cmdq(data_array, 1, 1);
-    
-      data_array[0]=0x3F811500;
-      dsi_set_cmdq(data_array, 1, 1);
-    
-      data_array[0]=0x3F821500;
-      dsi_set_cmdq(data_array, 1, 1);
-   
-      data_array[0]=0x3F831500;
-      dsi_set_cmdq(data_array, 1, 1);
-   
-      data_array[0]=0x3F841500;
-      dsi_set_cmdq(data_array, 1, 1);
-    
-      data_array[0]=0x02851500;
-      dsi_set_cmdq(data_array, 1, 1);
-    
-      data_array[0]=0x06861500;
-      dsi_set_cmdq(data_array, 1, 1);
-   
-      data_array[0]=0x3F871500;
-      dsi_set_cmdq(data_array, 1, 1);
-    
-      data_array[0]=0x08881500;
-      dsi_set_cmdq(data_array, 1, 1);
-    
-      data_array[0]=0x0C891500;
-      dsi_set_cmdq(data_array, 1, 1);
-   
-      data_array[0]=0x0A8A1500;
-      dsi_set_cmdq(data_array, 1, 1);
-    
-      data_array[0]=0x0E8B1500;
-      dsi_set_cmdq(data_array, 1, 1);
-   
-      data_array[0]=0x108C1500;
-      dsi_set_cmdq(data_array, 1, 1);
-   
-      data_array[0]=0x148D1500;
-      dsi_set_cmdq(data_array, 1, 1);
-   
-      data_array[0]=0x128E1500;
-      dsi_set_cmdq(data_array, 1, 1);
-   
-      data_array[0]=0x168F1500;
-      dsi_set_cmdq(data_array, 1, 1);
-   
-      data_array[0]=0x00901500;
-      dsi_set_cmdq(data_array, 1, 1);
-   
-      data_array[0]=0x04911500;
-      dsi_set_cmdq(data_array, 1, 1);
-   
-      data_array[0]=0x3F921500;
-      dsi_set_cmdq(data_array, 1, 1);
-    
-      data_array[0]=0x3F931500;
-      dsi_set_cmdq(data_array, 1, 1);
-   
-      data_array[0]=0x3F941500;
-      dsi_set_cmdq(data_array, 1, 1);
-    
-      data_array[0]=0x3F951500;
-      dsi_set_cmdq(data_array, 1, 1);
-    
-      data_array[0]=0x05961500;
-      dsi_set_cmdq(data_array, 1, 1);
-   
-      data_array[0]=0x01971500;
-      dsi_set_cmdq(data_array, 1, 1);
-    
-      data_array[0]=0x17981500;
-      dsi_set_cmdq(data_array, 1, 1);
-    
-      data_array[0]=0x13991500;
-      dsi_set_cmdq(data_array, 1, 1);
-    
-      data_array[0]=0x159A1500;
-      dsi_set_cmdq(data_array, 1, 1);
-    
-      data_array[0]=0x119B1500;
-      dsi_set_cmdq(data_array, 1, 1);
-    
-      data_array[0]=0x0F9C1500;
-      dsi_set_cmdq(data_array, 1, 1);
-   
-      data_array[0]=0x0B9D1500;
-      dsi_set_cmdq(data_array, 1, 1);
-   
-      data_array[0]=0x0D9E1500;
-      dsi_set_cmdq(data_array, 1, 1);
-    
-      data_array[0]=0x099F1500;
-      dsi_set_cmdq(data_array, 1, 1);
-    
-      data_array[0]=0x3FA01500;
-      dsi_set_cmdq(data_array, 1, 1);
-    
-      data_array[0]=0x07A21500;
-      dsi_set_cmdq(data_array, 1, 1);
-    
-      data_array[0]=0x03A31500;
-      dsi_set_cmdq(data_array, 1, 1);
-    
-      data_array[0]=0x3FA41500;
-      dsi_set_cmdq(data_array, 1, 1);
-    
-      data_array[0]=0x3FA51500;
-      dsi_set_cmdq(data_array, 1, 1);
-    
-      data_array[0]=0x3FA61500;
-      dsi_set_cmdq(data_array, 1, 1);
-    
-      data_array[0]=0x3FA71500;
-      dsi_set_cmdq(data_array, 1, 1);
-   
-      data_array[0]=0x3FA91500;
-      dsi_set_cmdq(data_array, 1, 1);
-    
-      data_array[0]=0x3FAA1500;
-      dsi_set_cmdq(data_array, 1, 1);
-    
-      data_array[0]=0x3FAB1500;
-      dsi_set_cmdq(data_array, 1, 1);
-    
-      data_array[0]=0x3FAC1500;
-      dsi_set_cmdq(data_array, 1, 1);
-    
-      data_array[0]=0x3FAD1500;
-      dsi_set_cmdq(data_array, 1, 1);
-   
-      data_array[0]=0x3FAE1500;
-      dsi_set_cmdq(data_array, 1, 1);
-    
-      data_array[0]=0x3FAF1500;
-      dsi_set_cmdq(data_array, 1, 1);
-    
-      data_array[0]=0x3FB01500;
-      dsi_set_cmdq(data_array, 1, 1);
-    
-      data_array[0]=0x3FB11500;
-      dsi_set_cmdq(data_array, 1, 1);
-    
-      data_array[0]=0x3FB21500;
-      dsi_set_cmdq(data_array, 1, 1);
-    
-      data_array[0]=0x05B31500;
-      dsi_set_cmdq(data_array, 1, 1);
-   
-      data_array[0]=0x01B41500;
-      dsi_set_cmdq(data_array, 1, 1);
-   
-      data_array[0]=0x3FB51500;
-      dsi_set_cmdq(data_array, 1, 1);
-   
-      data_array[0]=0x0FB61500;
-      dsi_set_cmdq(data_array, 1, 1);
-   
-      data_array[0]=0x0BB71500;
-      dsi_set_cmdq(data_array, 1, 1);
-   
-      data_array[0]=0x0DB81500;
-      dsi_set_cmdq(data_array, 1, 1);
-    
-      data_array[0]=0x09B91500;
-      dsi_set_cmdq(data_array, 1, 1);
-    
-      data_array[0]=0x13BA1500;
-      dsi_set_cmdq(data_array, 1, 1);
-    
-      data_array[0]=0x17BB1500;
-      dsi_set_cmdq(data_array, 1, 1);
-    
-      data_array[0]=0x11BC1500;
-      dsi_set_cmdq(data_array, 1, 1);
-    
-      data_array[0]=0x15BD1500;
-      dsi_set_cmdq(data_array, 1, 1);
-    
-      data_array[0]=0x07BE1500;
-      dsi_set_cmdq(data_array, 1, 1);
-    
-      data_array[0]=0x03BF1500;
-      dsi_set_cmdq(data_array, 1, 1);
-    
-      data_array[0]=0x3FC01500;
-      dsi_set_cmdq(data_array, 1, 1);
-    
-      data_array[0]=0x3FC11500;
-      dsi_set_cmdq(data_array, 1, 1);
-    
-      data_array[0]=0x3FC21500;
-      dsi_set_cmdq(data_array, 1, 1);
-    
-      data_array[0]=0x3FC31500;
-      dsi_set_cmdq(data_array, 1, 1);
-    
-      data_array[0]=0x02C41500;
-      dsi_set_cmdq(data_array, 1, 1);
-    
-      data_array[0]=0x06C51500;
-      dsi_set_cmdq(data_array, 1, 1);
-    
-      data_array[0]=0x14C61500;
-      dsi_set_cmdq(data_array, 1, 1);
-   
-      data_array[0]=0x10C71500;
-      dsi_set_cmdq(data_array, 1, 1);
-   
-      data_array[0]=0x16C81500;
-      dsi_set_cmdq(data_array, 1, 1);
-   
-      data_array[0]=0x12C91500;
-      dsi_set_cmdq(data_array, 1, 1);
-    
-      data_array[0]=0x08CA1500;
-      dsi_set_cmdq(data_array, 1, 1);
-   
-      data_array[0]=0x0CCB1500;
-      dsi_set_cmdq(data_array, 1, 1);
-    
-      data_array[0]=0x0ACC1500;
-      dsi_set_cmdq(data_array, 1, 1);
-    
-      data_array[0]=0x0ECD1500;
-      dsi_set_cmdq(data_array, 1, 1);
-    
-      data_array[0]=0x3FCE1500;
-      dsi_set_cmdq(data_array, 1, 1);
-   
-      data_array[0]=0x00CF1500;
-      dsi_set_cmdq(data_array, 1, 1);
-    
-      data_array[0]=0x04D01500;
-      dsi_set_cmdq(data_array, 1, 1);
-    
-      data_array[0]=0x3FD11500;
-      dsi_set_cmdq(data_array, 1, 1);
-    
-      data_array[0]=0x3FD21500;
-      dsi_set_cmdq(data_array, 1, 1);
-    
-      data_array[0]=0x3FD31500;
-      dsi_set_cmdq(data_array, 1, 1);
-    
-      data_array[0]=0x3FD41500;
-      dsi_set_cmdq(data_array, 1, 1);
-   
-      data_array[0]=0x3FD51500;
-      dsi_set_cmdq(data_array, 1, 1);
-    
-      data_array[0]=0x3FD61500;
-      dsi_set_cmdq(data_array, 1, 1);
-    
-      data_array[0]=0x3FD71500;
-      dsi_set_cmdq(data_array, 1, 1);
-
-      data_array[0]=0x06FE1500;
-      dsi_set_cmdq(data_array, 1, 1);
-
-      data_array[0]=0x4D4C1500;
-      dsi_set_cmdq(data_array, 1, 1);
-
-      data_array[0]=0x07FE1500;
-      dsi_set_cmdq(data_array, 1, 1);
- //engineering mode
-      data_array[0]=0x07CC1500;
-      dsi_set_cmdq(data_array, 1, 1);
-
-      data_array[0]=0x34B21500;
-      dsi_set_cmdq(data_array, 1, 1);
-
-      data_array[0]=0x04B51500;
-      dsi_set_cmdq(data_array, 1, 1);
-
-      data_array[0]=0x400F1500;
-      dsi_set_cmdq(data_array, 1, 1);
- //select mtk's ufod
-      data_array[0]=0x800A1500;
-      dsi_set_cmdq(data_array, 1, 1);
- //vlc enable at bit7    
-      data_array[0]=0x000B1500;
-      dsi_set_cmdq(data_array, 1, 1);
- //cfg[31:24]
-      data_array[0]=0x000C1500;
-      dsi_set_cmdq(data_array, 1, 1);
- //cfg[23:16]
-      data_array[0]=0x000D1500;
-      dsi_set_cmdq(data_array, 1, 1);
- //cfg[15:8]
-      data_array[0]=0x050E1500;
-      dsi_set_cmdq(data_array, 1, 1);
- //cfg[7:0]
-      data_array[0]=0x00FE1500;
-      dsi_set_cmdq(data_array, 1, 1);
-#if 0
-      data_array[0]=0xC8551500;
-      dsi_set_cmdq(data_array, 1, 1);
-#endif
-      data_array[0]=0xA9581500;
-      dsi_set_cmdq(data_array, 1, 1);
-
-#if (LCM_DSI_CMD_MODE)
-	  	data_array[0]=0x08C21500;//cmd mode
-#else
-			data_array[0]=0x08C21500;//video mode
-#endif
-      dsi_set_cmdq(data_array, 1, 1);
+	// Bit rate calculation
+	//1 Every lane speed
+params->dsi.PLL_CLOCK=250;
+}
 
-      data_array[0]=0x00111500;
-      dsi_set_cmdq(data_array, 1, 1);
-      MDELAY(120);
+static void lcm_init(void)
+{
 
-			data_array[0] = 0x00033902;
-			data_array[1] = (((FRAME_HEIGHT/2)&0xFF) << 16) | (((FRAME_HEIGHT/2)>>8) << 8) | 0x44;
-			dsi_set_cmdq(data_array, 2, 1);
-	
-      data_array[0]=0x00351500;
-      dsi_set_cmdq(data_array, 1, 1);
+	SET_RESET_PIN(1);
+	MDELAY(10);
+	SET_RESET_PIN(0);
+	MDELAY(50);
+	SET_RESET_PIN(1);
+	MDELAY(120);
 
-      data_array[0]=0x00291500;
-      dsi_set_cmdq(data_array, 1, 1);
-#endif
+	push_table(lcm_initialization_setting,sizeof(lcm_initialization_setting) /sizeof(struct LCM_setting_table), 1);
 }
 
-
 static void lcm_suspend(void)
 {
-	unsigned int data_array[16];
+ 
+     push_table(lcm_sleep_in_setting,sizeof(lcm_sleep_in_setting) /sizeof(struct LCM_setting_table), 1);
+
+     SET_RESET_PIN(0);
+     MDELAY(50);
+	 
 
-	data_array[0]=0x00280500;
-	dsi_set_cmdq(data_array, 1, 1);
-	MDELAY(120);
-	
-	data_array[0]=0x00100500;
-	dsi_set_cmdq(data_array, 1, 1);
-	MDELAY(50);
 }
 
 
 static void lcm_resume(void)
 {
+    //unsigned int id;
+	//unsigned char buffer[5];
+	//unsigned int array[5];
+	//lcm_compare_id();
+//	push_table(lcm_sleep_out_setting,sizeof(lcm_sleep_out_setting) /sizeof(struct LCM_setting_table), 1);
 	lcm_init();
+			
+/*array[0] = 0x00063902;// read id return two byte,version and id
+	array[1] = 0x52AA55F0;
+	array[2] = 0x00000108;
+	dsi_set_cmdq(array, 3, 1);
+	MDELAY(10);
+	
+	array[0] = 0x00023700;// read id return two byte,version and id
+	dsi_set_cmdq(array, 1, 1);
+
+	read_reg_v2(0xc5, buffer, 2);
+	id = ((buffer[0] << 8) | buffer[1]);
+#if defined(BUILD_LK)
+printf("%s, [rm68191_ctc50_jhzt]  buffer[0] = [0x%d] buffer[2] = [0x%d] ID = [0x%d]\n",__func__, buffer[0], buffer[1], id);
+#else
+printk("%s, [rm68191_ctc50_jhzt]  buffer[0] = [0x%d] buffer[2] = [0x%d] ID = [0x%d]\n",__func__, buffer[0], buffer[1], id);
+#endif*/
 }
 
 
 static void lcm_update(unsigned int x, unsigned int y,
-                       unsigned int width, unsigned int height)
+		unsigned int width, unsigned int height)
 {
-	static int last_update_x      = -1;
-	static int last_update_y      = -1;
-	static int last_update_width  = -1;
-	static int last_update_height = -1;
-	unsigned int need_update = 1;
-	
 	unsigned int x0 = x;
 	unsigned int y0 = y;
 	unsigned int x1 = x0 + width - 1;
 	unsigned int y1 = y0 + height - 1;
 
-	unsigned char x0_MSB = ((x0>>8)&0xFF);
-	unsigned char x0_LSB = (x0&0xFF);
-	unsigned char x1_MSB = ((x1>>8)&0xFF);
-	unsigned char x1_LSB = (x1&0xFF);
-	unsigned char y0_MSB = ((y0>>8)&0xFF);
-	unsigned char y0_LSB = (y0&0xFF);
-	unsigned char y1_MSB = ((y1>>8)&0xFF);
-	unsigned char y1_LSB = (y1&0xFF);
+	unsigned char x0_MSB = ((x0 >> 8) & 0xFF);
+	unsigned char x0_LSB = (x0 & 0xFF);
+	unsigned char x1_MSB = ((x1 >> 8) & 0xFF);
+	unsigned char x1_LSB = (x1 & 0xFF);
+	unsigned char y0_MSB = ((y0 >> 8) & 0xFF);
+	unsigned char y0_LSB = (y0 & 0xFF);
+	unsigned char y1_MSB = ((y1 >> 8) & 0xFF);
+	unsigned char y1_LSB = (y1 & 0xFF);
 
 	unsigned int data_array[16];
 
-	// need update at the first time
-	if(-1 == last_update_x && -1 == last_update_y && -1 == last_update_width && -1 == last_update_height)
-	{
-		last_update_x      = (int)x;
-		last_update_y      = (int)y;
-		last_update_width  = (int)width;
-		last_update_height = (int)height;
-	}
-	// no need update if the same region as last time
-	else if(last_update_x == (int)x && last_update_y == (int)y && last_update_width == (int)width && last_update_height == (int)height)
-	{
-		//need_update = 0;
-	}
-	// need update if region change
-	else
-	{
-		last_update_x      = (int)x;
-		last_update_y      = (int)y;
-		last_update_width  = (int)width;
-		last_update_height = (int)height;
-	}
+	data_array[0] = 0x00053902;
+	data_array[1] =
+		(x1_MSB << 24) | (x0_LSB << 16) | (x0_MSB << 8) | 0x2a;
+	data_array[2] = (x1_LSB);
+	data_array[3] = 0x00053902;
+	data_array[4] =
+		(y1_MSB << 24) | (y0_LSB << 16) | (y0_MSB << 8) | 0x2b;
+	data_array[5] = (y1_LSB);
+	data_array[6] = 0x002c3909;
 
-	if(need_update)
-	{
-		data_array[0]= 0x00053902;
-		data_array[1]= (x1_MSB<<24)|(x0_LSB<<16)|(x0_MSB<<8)|0x2a;
-		data_array[2]= (x1_LSB);
-		dsi_set_cmdq(data_array, 3, 1);
-		
-		data_array[0]= 0x00053902;
-		data_array[1]= (y1_MSB<<24)|(y0_LSB<<16)|(y0_MSB<<8)|0x2b;
-		data_array[2]= (y1_LSB);
-		dsi_set_cmdq(data_array, 3, 1);
-	}
-	
-	data_array[0]= 0x002c3909;
-	dsi_set_cmdq(data_array, 1, 0);
+	dsi_set_cmdq(&data_array, 7, 0);
 
 }
 
+
 static unsigned int lcm_compare_id(void)
 {
-	unsigned int id=0;
-	unsigned char buffer[3];
-	unsigned int array[16];  
-
-		SET_RESET_PIN(1);
-		MDELAY(10); 
-		SET_RESET_PIN(0);
-		MDELAY(10); 
-		SET_RESET_PIN(1);
-		MDELAY(10);
-
-	array[0] = 0x00033700;// read id return two byte,version and id
-	dsi_set_cmdq(array, 1, 1);
+	int array[4];
+	char buffer[5];
+	char id_high=0;
+	char id_low=0;
+	int id1=0;
+	int id2=0;
+
+	SET_RESET_PIN(1);
+	MDELAY(10);
+	SET_RESET_PIN(0);
+	MDELAY(10);
+	SET_RESET_PIN(1);
+	MDELAY(120);
 	
-	read_reg_v2(0x04, buffer, 3);
-	id = buffer[0]|(buffer[1]<<8); //we only need ID
-    #ifdef BUILD_LK
-		printf("%s, LK RM68210 debug: RM68210 id = 0x%08x\n", __func__, id);
-    #else
-		printk("%s, kernel RM68210 horse debug: RM68210 id = 0x%08x\n", __func__, id);
-    #endif
-
-    if(id == LCM_ID_RM68210)
-    	return 1;
-    else
-        return 0;
-
-}
-
-#if 0
-#ifndef BUILD_LK
-static unsigned int lcm_esd_test = FALSE;      ///only for ESD test
-#endif
-
-static unsigned int lcm_esd_check(void)
-{
-  #ifndef BUILD_LK
-	char  buffer[3];
-	int   array[4];
-	int ret = 0;
+	array[0]=0x01FE1500;
+	dsi_set_cmdq(&array,1, 1);
 	
-	if(lcm_esd_test)
-	{
-		lcm_esd_test = FALSE;
-		return TRUE;
-	}
-
 	array[0] = 0x00013700;
 	dsi_set_cmdq(array, 1, 1);
-
-	read_reg_v2(0x0F, buffer, 1);
-	if(buffer[0] != 0xc0)
-	{
-		printk("[LCM ERROR] [0x0F]=0x%02x\n", buffer[0]);
-		ret++;
-	}
-
-	read_reg_v2(0x05, buffer, 1);
-	if(buffer[0] != 0x00)
-	{
-		printk("[LCM ERROR] [0x05]=0x%02x\n", buffer[0]);
-		ret++;
-	}
-	
-	read_reg_v2(0x0A, buffer, 1);
-	if((buffer[0]&0xf)!=0x0C)
-	{
-		printk("[LCM ERROR] [0x0A]=0x%02x\n", buffer[0]);
-		ret++;
-	}
-
-	// return TRUE: need recovery
-	// return FALSE: No need recovery
-	if(ret)
-	{
-		return TRUE;
-	}
-	else
-	{			 
-		return FALSE;
-	}
-#else
-	return TRUE;
-#endif
+	read_reg_v2(0xde, buffer, 1);
+
+	id_high = buffer[0];
+	read_reg_v2(0xdf, buffer, 1);
+	id_low = buffer[0];
+	id1 = (id_high<<8) | id_low;
+
+	#if defined(BUILD_LK)
+		printf("rm68200a %s id1 = 0x%04x, id2 = 0x%04x\n", __func__, id1,id2);
+	#else
+		printk("rm68200a %s id1 = 0x%04x, id2 = 0x%04x\n", __func__, id1,id2);
+	#endif
+	return (0x6820 == id1)?1:0;
 }
-
+//no use
 static unsigned int lcm_esd_recover(void)
 {
-	lcm_init();
-	lcm_resume();
+    unsigned char para = 0;
+	unsigned int data_array1[16];
 
-	return TRUE;
-}
+#ifndef BUILD_LK
+    printk("RM68190 lcm_esd_recover enter\n");
 #endif
+    
 
-static unsigned int lcm_ata_check(unsigned char *buffer)
+    SET_RESET_PIN(1);
+    MDELAY(10);
+    SET_RESET_PIN(0);
+    MDELAY(30);
+    SET_RESET_PIN(1);
+    MDELAY(130);
+    #if 0
+	push_table(lcm_initialization_setting, sizeof(lcm_initialization_setting) / sizeof(struct LCM_setting_table), 1);
+	MDELAY(10);
+	push_table(lcm_sleep_out_setting, sizeof(lcm_sleep_out_setting) / sizeof(struct LCM_setting_table), 1);
+    	MDELAY(10);
+    #else
+        lcm_init();
+    #endif
+   
+   data_array1[0]= 0x00320500;
+   dsi_set_cmdq(&data_array1, 1, 1);
+   MDELAY(50);
+
+    return 1;
+}
+static unsigned int lcm_esd_check(void)
 {
+    unsigned char buffer[1] ={0};
+    //unsigned int data_array[1];
+   // data_array[0] = 0x00013700;// read id return two byte,version and id 3 byte 
+  // dsi_set_cmdq(&data_array, 1, 1);
+   read_reg_v2(0x0a, buffer, 1);
+   
 #ifndef BUILD_LK
-	unsigned int ret = 0;
-	unsigned int x0 = FRAME_WIDTH/4;
-	unsigned int x1 = FRAME_WIDTH*3/4;
-
-	unsigned char x0_MSB = ((x0>>8)&0xFF);
-	unsigned char x0_LSB = (x0&0xFF);
-	unsigned char x1_MSB = ((x1>>8)&0xFF);
-	unsigned char x1_LSB = (x1&0xFF);
-
-	unsigned int data_array[3];
-	unsigned char read_buf[4];
-	printk("ATA check size = 0x%x,0x%x,0x%x,0x%x\n",x0_MSB,x0_LSB,x1_MSB,x1_LSB);
-	data_array[0]= 0x0005390A;//HS packet
-	data_array[1]= (x1_MSB<<24)|(x0_LSB<<16)|(x0_MSB<<8)|0x2a;
-	data_array[2]= (x1_LSB);
-	dsi_set_cmdq(data_array, 3, 1);
-
-	data_array[0] = 0x00043700;// read id return two byte,version and id
-	dsi_set_cmdq(data_array, 1, 1);
-	
-	read_reg_v2(0x2A, read_buf, 4);
-
-	if((read_buf[0] == x0_MSB) && (read_buf[1] == x0_LSB) 
-		&& (read_buf[2] == x1_MSB) && (read_buf[3] == x1_LSB))
-		ret = 1;
-	else
-		ret = 0;
-
-	x0 = 0;
-	x1 = FRAME_WIDTH - 1;
-
-	x0_MSB = ((x0>>8)&0xFF);
-	x0_LSB = (x0&0xFF);
-	x1_MSB = ((x1>>8)&0xFF);
-	x1_LSB = (x1&0xFF);
-
-	data_array[0]= 0x0005390A;//HS packet
-	data_array[1]= (x1_MSB<<24)|(x0_LSB<<16)|(x0_MSB<<8)|0x2a;
-	data_array[2]= (x1_LSB);
-	dsi_set_cmdq(data_array, 3, 1);
-	return ret;
-#else
-	return 0;
+    printk("RM68190 lcm_esd_check enter %x\n",buffer[0]);
+#endif
+#ifndef BUILD_LK
+        if(buffer[0] == 0x9C)
+        {
+          #ifndef BUILD_LK
+          printk("RM68190 lcm_esd_check false \n");
+          #endif
+
+            return false;
+        }
+        else
+        {      
+           #ifndef BUILD_LK
+          printk("RM68190 lcm_esd_check true \n");
+          #endif
+           //lcm_esd_recover();
+            return true;
+        }
 #endif
 }
+
 // ---------------------------------------------------------------------------
 //  Get LCM Driver Hooks
 // ---------------------------------------------------------------------------
@@ -2240,7 +775,7 @@ LCM_DRIVER rm68200_6735_dsi_video_lcm_drv =
 	.suspend        = lcm_suspend,
 	.resume         = lcm_resume,
 	.compare_id     = lcm_compare_id,
-	.ata_check		= lcm_ata_check,
+	//.ata_check		= lcm_ata_check,
 //	.esd_check   	= lcm_esd_check,
 //    .esd_recover	= lcm_esd_recover,
 #if (LCM_DSI_CMD_MODE)
diff --git a/include/config/auto.conf b/include/config/auto.conf
index d272c62..e78d3eb 100644
--- a/include/config/auto.conf
+++ b/include/config/auto.conf
@@ -839,7 +839,6 @@ CONFIG_PM_WAKELOCKS=y
 CONFIG_CRYPTO_BLKCIPHER2=y
 CONFIG_SECURITY_SELINUX_AVC_STATS=y
 CONFIG_SND_SEQ_DUMMY=y
-CONFIG_POCKETMOD=y
 CONFIG_COMPACTION=y
 CONFIG_PROC_FS=y
 CONFIG_MTD_BLOCK=y
diff --git a/include/generated/autoconf.h b/include/generated/autoconf.h
index 96bb397..b3de188 100644
--- a/include/generated/autoconf.h
+++ b/include/generated/autoconf.h
@@ -841,7 +841,6 @@
 #define CONFIG_CRYPTO_BLKCIPHER2 1
 #define CONFIG_SECURITY_SELINUX_AVC_STATS 1
 #define CONFIG_SND_SEQ_DUMMY 1
-#define CONFIG_POCKETMOD 1
 #define CONFIG_COMPACTION 1
 #define CONFIG_PROC_FS 1
 #define CONFIG_MTD_BLOCK 1
diff --git a/include/generated/compile.h b/include/generated/compile.h
index c0d3fcf..be0285e 100644
--- a/include/generated/compile.h
+++ b/include/generated/compile.h
@@ -1,7 +1,7 @@
-/* This file is auto generated, version 2 */
+/* This file is auto generated, version 10 */
 /* SMP PREEMPT */
 #define UTS_MACHINE "arm64"
-#define UTS_VERSION "#2 SMP PREEMPT Tue May 3 21:33:15 MSK 2016"
+#define UTS_VERSION "#10 SMP PREEMPT Tue May 3 23:53:56 MSK 2016"
 #define LINUX_COMPILE_BY "olegsvs"
 #define LINUX_COMPILE_HOST "olegsvs-develop"
 #define LINUX_COMPILER "gcc version 4.9 20150123 (prerelease) (GCC) "
-- 
2.7.4

